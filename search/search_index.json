{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"halfORM Documentation","text":"<p>Documentation Version</p> <p>This documentation covers halfORM 0.15.0 (latest stable release). For older versions, see the GitHub releases.</p> <p> </p> <p>The PostgreSQL-native ORM that stays out of your way</p> <p>halfORM lets you keep your database schema in SQL where it belongs, while giving you the comfort of Python for data manipulation. No migrations, no schema conflicts, no ORM fighting \u2014 just PostgreSQL and Python working together.</p>"},{"location":"#overview","title":"Overview","text":"<p>halfORM is a lightweight, database-first Object-Relational Mapper designed specifically for PostgreSQL. Unlike traditional ORMs that impose their own schema management, halfORM adapts to your existing database structure, making it perfect for teams that prefer SQL-first development.</p> <p>Why halfORM?</p> <ul> <li>\ud83c\udfaf Database-First: Your PostgreSQL schema is the source of truth</li> <li>\ud83d\udd0d SQL Transparency: See exactly what queries are generated</li> <li>\u26a1 Zero Setup: Connect to existing databases instantly</li> <li>\ud83d\ude80 PostgreSQL Native: Leverage advanced PostgreSQL features</li> <li>\ud83c\udfa8 Custom Classes: Override with business logic using <code>@register</code></li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#instant-database-access","title":"\ud83d\udd25 Instant Database Access","text":"<pre><code>from half_orm.model import Model\n\n# Connect to your existing database\nblog = Model('blog_db')\n\n# Work with your tables immediately\nPost = blog.get_relation_class('blog.post')\nAuthor = blog.get_relation_class('blog.author')\n</code></pre>"},{"location":"#custom-relation-classes","title":"\ud83c\udfa8 Custom Relation Classes","text":"<pre><code>from half_orm.model import register\nfrom half_orm.relation import singleton\n\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_blog_post_author_id'\n    }\n\n    @singleton\n    def create_post(self, title, content):\n        return self.posts_rfk(title=title, content=content).ho_insert()\n\n# Foreign keys now return your custom classes!\npost = Post(title='Welcome').ho_get()\nauthor = post.author_fk().ho_get()  # Returns Author instance\nauthor.create_post(\"New Post\", \"Content\")  # Custom method available\n</code></pre>"},{"location":"#intuitive-querying","title":"\ud83d\udd0d Intuitive Querying","text":"<pre><code># The object IS the filter - no .filter() needed\nyoung_people = Person(birth_date=('&gt;', '1990-01-01'))\ngmail_users = Person(email=('ilike', '%@gmail.com'))\n\n# Navigate relationships while filtering\nalice_posts = Post().author_fk(name=('ilike', 'alice%'))\n\n# Chain operations naturally\nrecent_posts = (Post(is_published=True)\n    .ho_order_by('created_at desc')\n    .ho_limit(10))\n</code></pre>"},{"location":"#postgresql-native-features","title":"\ud83d\udd27 PostgreSQL Native Features","text":"<pre><code># Use views, functions, and procedures\nUserStats = blog.get_relation_class('analytics.user_stats')  # Database view\nresults = blog.execute_function('calculate_metrics', user_id=123)\n\n# Advanced PostgreSQL data types work seamlessly\nJsonData = blog.get_relation_class('app.json_table')\ndata = JsonData(metadata='{\"type\": \"user\", \"premium\": true}')  # JSONB support\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running in under 5 minutes:</p> <ol> <li> <p>Install halfORM <pre><code>pip install half_orm\n</code></pre></p> </li> <li> <p>Configure connection <pre><code>mkdir ~/.half_orm\necho \"[database]\nname = my_database\nuser = username\npassword = password\nhost = localhost\" &gt; ~/.half_orm/my_database\n</code></pre></p> </li> <li> <p>Start coding <pre><code>from half_orm.model import Model\n\ndb = Model('my_database')\nPerson = db.get_relation_class('public.person')\n\n# Create\nperson = Person(name='Alice', email='alice@example.com')\nresult = person.ho_insert()\n\n# Query\nfor person in Person(email=('ilike', '%@gmail.com')).ho_select():\n    print(f\"Found: {person['name']}\")\n</code></pre></p> </li> </ol> <p>\ud83d\udc49 Full Quick Start Guide \u2192</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li> <p>\ud83d\ude80 Quick Start</p> <p>Get up and running with halfORM in minutes. Connect to your database and start working with your data immediately.</p> <p>Get Started \u2192</p> </li> <li> <p>\ud83d\udcda Tutorial</p> <p>Step-by-step guide covering all halfORM concepts from basic CRUD operations to advanced relationship navigation.</p> <p>Learn halfORM \u2192</p> </li> <li> <p>\ud83d\udccb API Reference</p> <p>Complete documentation of all halfORM classes, methods, and functions with detailed examples.</p> <p>API Docs \u2192</p> </li> <li> <p>\ud83d\udca1 Examples</p> <p>Real-world examples and patterns for common use cases like web applications, data analysis, and more.</p> <p>View Examples \u2192</p> </li> <li> <p>\ud83d\udcd6 Guides</p> <p>In-depth guides on configuration, performance optimization, testing, and migrating from other ORMs.</p> <p>Browse Guides \u2192</p> </li> <li> <p>\ud83c\udfd7\ufe0f Architecture</p> <p>Understanding halfORM's internals, design principles, and how it works under the hood.</p> <p>Deep Dive \u2192</p> </li> </ul>"},{"location":"#why-choose-halform","title":"Why Choose halfORM?","text":""},{"location":"#perfect-for","title":"\u2705 Perfect For","text":"<ul> <li>PostgreSQL-centric applications - Leverage PostgreSQL's full power</li> <li>Existing database projects - Work with established schemas</li> <li>SQL-comfortable teams - Keep complex logic in the database</li> <li>Rapid prototyping - Get started instantly</li> <li>Microservices - Lightweight with no framework baggage</li> </ul>"},{"location":"#consider-alternatives-if","title":"\ud83e\udd14 Consider Alternatives If","text":"<ul> <li>Multi-database support needed - halfORM is PostgreSQL-only</li> <li>Django ecosystem - Django ORM may integrate better</li> <li>Code-first approach preferred - You want to define models in Python</li> <li>Heavy ORM features required - Need lazy loading, identity maps, etc.</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository - Source code and issue tracking</li> <li>Discussions - Community Q&amp;A and ideas</li> <li>PyPI Package - Official releases</li> </ul>"},{"location":"#whats-new","title":"What's New","text":""},{"location":"#version-0150","title":"Version 0.15.0 \ud83c\udf89","text":"<p>Latest Release - January 2025</p> <p>Major update with new custom relation classes and breaking changes.</p> <ul> <li>\ud83c\udfa8 New <code>@register</code> decorator for custom relation classes with business logic</li> <li>\ud83d\udd17 Enhanced foreign key navigation with custom class resolution  </li> <li>\ud83d\udcda Complete documentation rewrite with improved structure</li> <li>\u26a0\ufe0f Breaking change: HOP packager moved to separate <code>halfORM_dev</code> package</li> </ul> <pre><code># New in 0.15.0: Custom relation classes\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {'posts_rfk': '_reverse_fkey_blog_post_author_id'}\n\n    @singleton\n    def create_post(self, title, content):\n        return self.posts_rfk(title=title, content=content).ho_insert()\n\n# Foreign keys now return your custom classes!\npost = Post().ho_get()\nauthor = post.author_fk().ho_get()  # Returns Author instance\nauthor.create_post(\"Title\", \"Content\")  # Custom method available\n</code></pre> <p>\ud83d\udccb View Full Changelog \u2192</p>"},{"location":"#migration-from-014x","title":"Migration from 0.14.x","text":"<p>HOP Users - Action Required</p> <p>If you were using the <code>hop</code> command, install the new package: <pre><code>pip install half_orm_dev\n</code></pre></p> <p>halfORM 0.15.0 focuses exclusively on ORM functionality.</p> <p>Ready to start?</p> <p>Jump into the Quick Start Guide or explore the Tutorial for a comprehensive introduction to halfORM.</p> <p>Made with \u2764\ufe0f for PostgreSQL and Python developers</p>"},{"location":"quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with halfORM in under 5 minutes. This guide will take you from installation to your first successful database operation.</p> <p>Prerequisites</p> <ul> <li>Python 3.7 or higher</li> <li>PostgreSQL 9.6 or higher</li> <li>Basic familiarity with Python and SQL</li> </ul>"},{"location":"quick-start/#step-1-installation","title":"Step 1: Installation","text":"<p>Install halfORM using pip:</p> <pre><code>pip install half_orm\n</code></pre> <p>Virtual Environment Recommended</p> <p>It's recommended to install halfORM in a virtual environment: <pre><code>python -m venv halfORM-env\nsource halfORM-env/bin/activate  # Linux/Mac\n# or halfORM-env\\Scripts\\activate  # Windows\npip install half_orm\n</code></pre></p> <p>Pro tip: For automatic virtual environment management, check out auto-venv - it handles virtual environments seamlessly!</p>"},{"location":"quick-start/#step-2-database-setup","title":"Step 2: Database Setup","text":"<p>For this guide, we'll create a simple blog database. If you already have a PostgreSQL database, you can skip to Step 3.</p>"},{"location":"quick-start/#create-example-database","title":"Create Example Database","text":"<p>Connect to PostgreSQL and create our example:</p> <pre><code>-- Connect to PostgreSQL as superuser\nCREATE DATABASE halform_quickstart;\n\n-- Reconnect to the new database (separate command)\n\\c halform_quickstart\n\n-- Create schema\nCREATE SCHEMA blog;\n\n-- Create tables\nCREATE TABLE blog.author (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE blog.post (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    content TEXT,\n    author_id INTEGER REFERENCES blog.author(id),\n    published_at TIMESTAMP DEFAULT NOW(),\n    is_published BOOLEAN DEFAULT FALSE\n);\n\n-- Add some sample data\nINSERT INTO blog.author (name, email) VALUES \n    ('Alice Johnson', 'alice@example.com'),\n    ('Bob Smith', 'bob@example.com');\n\nINSERT INTO blog.post (title, content, author_id, is_published) VALUES \n    ('Welcome to halfORM', 'This is our first post using halfORM!', 1, true),\n    ('Database-First Development', 'Why schema-first approach rocks...', 1, true),\n    ('Draft Post', 'This is still a work in progress.', 2, false);\n</code></pre>"},{"location":"quick-start/#step-3-configuration","title":"Step 3: Configuration","text":""},{"location":"quick-start/#create-configuration-directory","title":"Create Configuration Directory","text":"<pre><code># Create config directory\nmkdir ~/.half_orm\nexport HALFORM_CONF_DIR=~/.half_orm\n</code></pre> <p>Windows Users</p> <p>On Windows, set the environment variable through System Properties: 1. Right-click \"This PC\" \u2192 Properties 2. Advanced system settings \u2192 Environment Variables 3. Add <code>HALFORM_CONF_DIR</code> with value like <code>C:\\Users\\YourName\\.half_orm</code></p>"},{"location":"quick-start/#create-connection-file","title":"Create Connection File","text":"<p>Create a connection file in your config directory:</p> ~/.half_orm/halform_quickstart<pre><code>[database]\nname = halform_quickstart\nuser = your_username\npassword = your_password\nhost = localhost\nport = 5432\n</code></pre>"},{"location":"quick-start/#alternative-trusted-authentication","title":"Alternative: Trusted Authentication","text":"<p>Skip Configuration (PostgreSQL with trusted auth)</p> <p>Since version 0.14, if no config file exists, halfORM attempts trusted authentication with a role matching <code>$USER</code>. </p> <p>If your PostgreSQL is configured for trusted authentication (common in development), you can skip the configuration file entirely and go directly to Step 4!</p> <p>All examples will work with or without the config file: <pre><code>blog = Model('halform_quickstart')  # Works with or without config file!\n</code></pre></p>"},{"location":"quick-start/#step-4-first-connection","title":"Step 4: First Connection","text":"<p>Let's verify everything works:</p> test_connection.py<pre><code>from half_orm.model import Model\n\ntry:\n    # Connect to the database\n    blog = Model('halform_quickstart')\n\n    # Show all relations in the database\n    print(\"\u2705 Connected successfully!\")\n    print(\"\\nDatabase structure:\")\n    print(blog)\n\nexcept Exception as e:\n    print(f\"\u274c Connection failed: {e}\")\n    print(\"Check your database is running and credentials are correct.\")\n</code></pre> <p>Expected output: <pre><code>\u2705 Connected successfully!\n\nDatabase structure:\nr \"blog\".\"author\"\nr \"blog\".\"post\"\n</code></pre></p>"},{"location":"quick-start/#step-5-create-your-first-classes","title":"Step 5: Create Your First Classes","text":"blog_models.py<pre><code>from half_orm.model import Model\n\n# Connect to database\nblog = Model('halform_quickstart')\n\n# Create classes for our tables\nclass Author(blog.get_relation_class('blog.author')):\n    \"\"\"Authors who write blog posts\"\"\"\n    pass\n\nclass Post(blog.get_relation_class('blog.post')):\n    \"\"\"Blog posts with content\"\"\"\n    pass\n\n# Explore the table structure\nif __name__ == \"__main__\":\n    print(\"=== Author Table ===\")\n    print(Author())\n\n    print(\"\\n=== Post Table ===\")  \n    print(Post())\n</code></pre> <p>This will show you the complete table structure, including columns, types, constraints, and foreign keys.</p>"},{"location":"quick-start/#step-6-basic-crud-operations","title":"Step 6: Basic CRUD Operations","text":"<p>Now let's perform some basic operations:</p> crud_examples.py<pre><code>from half_orm.model import Model\n\nblog = Model('halform_quickstart')\n\nclass Author(blog.get_relation_class('blog.author')):\n    pass\n\nclass Post(blog.get_relation_class('blog.post')):\n    pass\n\n# === CREATE ===\nprint(\"Creating a new author...\")\nnew_author = Author(\n    name='Charlie Brown', \n    email='charlie@example.com'\n)\n\n# Check if author already exists\nif new_author.ho_is_empty():\n    result = new_author.ho_insert()\n    print(f\"\u2705 Created author: {result}\")\nelse:\n    print(\"Author already exists!\")\n\n# === READ ===\nprint(\"\\nReading authors...\")\nfor author in Author().ho_select('name', 'email'):\n    print(f\"\ud83d\udcdd {author['name']} ({author['email']})\")\n\n# === UPDATE ===\nprint(\"\\nUpdating author email...\")\ncharlie = Author(name='Charlie Brown')\nif not charlie.ho_is_empty():\n    charlie.ho_update(email='charlie.brown@newdomain.com')\n    print(\"\u2705 Email updated!\")\n\n# === DELETE ===\nprint(\"\\nDeleting test author...\")\nAuthor(name='Charlie Brown').ho_delete()\nprint(\"\u2705 Author deleted!\")\n</code></pre>"},{"location":"quick-start/#step-7-working-with-relationships","title":"Step 7: Working with Relationships","text":"<p>halfORM makes working with foreign keys intuitive:</p> relationships.py<pre><code>from half_orm.model import Model\n\nblog = Model('halform_quickstart')\n\nclass Author(blog.get_relation_class('blog.author')):\n    # Define foreign key relationships\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_halform_quickstart_blog_post_author_id'\n    }\n\nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {\n        'author_fk': 'post_author_id_fkey'\n    }\n\n# Find an author\nalice = Author(name='Alice Johnson').ho_get()\nprint(f\"Author: {alice.name.value}\")\n\n# Get all posts by this author\nalice_posts = alice.posts_rfk()\nprint(f\"\\nPosts by {alice.name.value}:\")\nfor post in alice_posts.ho_select('title', 'is_published'):\n    status = \"\u2705 Published\" if post['is_published'] else \"\ud83d\udcdd Draft\"\n    print(f\"  - {post['title']} ({status})\")\n\n# Get author from a post\nfirst_post = Post(title='Welcome to halfORM').ho_get()\npost_author = first_post.author_fk().ho_get()\nprint(f\"\\n'{first_post.title.value}' was written by: {post_author.name.value}\")\n</code></pre> <p>Foreign Key Names</p> <p>When you print a relation (e.g., <code>print(Author())</code>), halfORM shows you the exact foreign key names to use in your <code>Fkeys</code> dictionary. Just copy and paste them!</p>"},{"location":"quick-start/#step-8-query-filtering-and-chaining","title":"Step 8: Query Filtering and Chaining","text":"<p>halfORM supports flexible querying:</p> querying.py<pre><code>from half_orm.model import Model\n\nblog = Model('halform_quickstart')\n\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_halform_quickstart_blog_post_author_id'\n    }\n\nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {\n        'author_fk': 'post_author_id_fkey'\n    }\n\n# === FILTERING ===\n# Exact match\npublished_posts = Post(is_published=True)\n\n# Comparison operators\nrecent_posts = Post(published_at=('&gt;', '2024-01-01'))\n\n# Pattern matching with foreign key navigation\nalice_posts = Author(name=('ilike', 'alice%')).posts_rfk(is_published=True)\n\n# === CHAINING ===\n# Get recent published posts, ordered by date\nrecent_published = (Post(is_published=True)\n    .ho_order_by('published_at DESC')\n    .ho_limit(5))\n\nfor post in recent_published.ho_select('title', 'published_at'):\n    print(f\"\ud83d\udcd6 {post['title']} ({post['published_at']})\")\n\n# === COUNTING ===\ntotal_posts = Post().ho_count()\npublished_count = Post(is_published=True).ho_count()\ndraft_count = Post(is_published=False).ho_count()\n\nprint(f\"\\n\ud83d\udcca Statistics:\")\nprint(f\"Total posts: {total_posts}\")\nprint(f\"Published: {published_count}\")\nprint(f\"Drafts: {draft_count}\")\n\n# === DEBUGGING ===\n# See the generated SQL\nquery = Post(is_published=True).ho_order_by('published_at DESC')\nquery.ho_mogrify()\nlist(query.ho_select())  # This will print the SQL query\n</code></pre>"},{"location":"quick-start/#step-9-register-custom-classes-optional","title":"Step 9: Register Custom Classes (Optional)","text":"<p>For advanced use cases, you can override the auto-generated classes with custom implementations that include business logic and cleaner foreign key mappings:</p> custom_blog_classes.py<pre><code>from half_orm.model import Model, register\n\nblog = Model('halform_quickstart')\n\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    \"\"\"Custom Author class with business methods\"\"\"\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_halform_quickstart_blog_post_author_id'\n    }\n\n    def create_post(self, title, content, published=False):\n        \"\"\"Create a new post for this author.\"\"\"\n        return self.posts_rfk(\n            title=title, \n            content=content, \n            is_published=published\n        ).ho_insert()\n\n    def get_published_posts(self):\n        \"\"\"Get all published posts by this author.\"\"\"\n        return self.posts_rfk(is_published=True).ho_select()\n\n    def get_stats(self):\n        \"\"\"Get author statistics.\"\"\"\n        all_posts = self.posts_rfk()\n        published = all_posts(is_published=True)\n        return {\n            'total_posts': all_posts.ho_count(),\n            'published_posts': published.ho_count(),\n            'draft_posts': all_posts.ho_count() - published.ho_count()\n        }\n\n@register\nclass Post(blog.get_relation_class('blog.post')):\n    \"\"\"Custom Post class with business methods\"\"\"\n    Fkeys = {\n        'author_fk': 'post_author_id_fkey'\n    }\n\n    def publish(self):\n        \"\"\"Publish this post.\"\"\"\n        from datetime import datetime\n        self.is_published.value = True\n        self.published_at.value = datetime.now()\n        return self.ho_update()\n\n    def unpublish(self):\n        \"\"\"Unpublish this post.\"\"\"\n        self.is_published.value = False\n        return self.ho_update()\n\n    def get_author_name(self):\n        \"\"\"Get the name of this post's author.\"\"\"\n        return self.author_fk().ho_get().name.value\n\n# Test the custom classes\nif __name__ == \"__main__\":\n    # Find Alice\n    alice = Author(name='Alice Johnson').ho_get()\n\n    # Create a post using custom method\n    new_post = alice.create_post(\n        title=\"halfORM Custom Classes\", \n        content=\"This post was created using a custom method!\",\n        published=True\n    )\n    print(f\"\u2705 Created post: {new_post}\")\n\n    # Get author statistics\n    stats = alice.get_stats()\n    print(f\"\ud83d\udcca Alice's stats: {stats}\")\n\n    # Navigate from post to author using custom method\n    post = Post(title='Welcome to halfORM').ho_get()\n    author_name = post.get_author_name()\n    print(f\"\ud83d\udcdd '{post.title.value}' was written by: {author_name}\")\n</code></pre>"},{"location":"quick-start/#the-power-of-register","title":"The Power of @register","text":"<p>Once registered, your custom classes are returned automatically by foreign key relationships:</p> <pre><code># Before @register: generic classes with limited functionality\npost = Post(title='Welcome').ho_get()\nauthor = post.author_fk().ho_get()  # Generic Author class\n# author only has basic CRUD methods\n\n# After @register: your custom classes with business logic\npost = Post(title='Welcome').ho_get()  \nauthor = post.author_fk().ho_get()  # YOUR custom Author class!\nauthor.create_post(\"New Post\", \"Content\")  # Custom methods available!\nstats = author.get_stats()  # Your business logic works!\n</code></pre>"},{"location":"quick-start/#benefits","title":"Benefits","text":"<ul> <li>Clean Fkeys: Use friendly names instead of long constraint names</li> <li>Business Logic: Encapsulate domain logic in your relation classes</li> <li>Automatic Resolution: Foreign keys return your custom classes</li> <li>No Performance Cost: Registration happens at import time</li> <li>Code Preservation: Your custom code survives class regeneration</li> </ul> <p>When to Use Custom Classes</p> <p>Use <code>@register</code> when you need: - Business logic methods on your data objects - Cleaner, more readable foreign key names - Domain-specific validation or computed properties - Complex operations that involve multiple tables</p> <p>For simple CRUD operations, the auto-generated classes work perfectly!</p>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've successfully:</p> <ul> <li>\u2705 Installed and configured halfORM</li> <li>\u2705 Connected to a PostgreSQL database  </li> <li>\u2705 Created relation classes</li> <li>\u2705 Performed CRUD operations</li> <li>\u2705 Navigated relationships</li> <li>\u2705 Built filtered queries</li> </ul>"},{"location":"quick-start/#where-to-go-next","title":"Where to go next:","text":"<ol> <li>Tutorial - Deep dive into halfORM concepts</li> <li>Foreign Keys Guide - Master relationship navigation</li> <li>Examples - See real-world applications</li> <li>API Reference - Complete method documentation</li> </ol>"},{"location":"quick-start/#common-next-questions","title":"Common next questions:","text":"<ul> <li>Transactions? \u2192 See Transactions Tutorial</li> <li>Complex queries? \u2192 Check Advanced Querying</li> <li>Performance tips? \u2192 Read Performance Guide</li> <li>Migration from other ORMs? \u2192 Visit Migration Guides</li> </ul>"},{"location":"quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quick-start/#connection-issues","title":"Connection Issues","text":"<pre><code># Test your connection\nfrom half_orm.model import Model\n\ntry:\n    db = Model('your_config_name')\n    print(\"\u2705 Connection successful!\")\nexcept Exception as e:\n    print(f\"\u274c Connection failed: {e}\")\n    # Check database is running, credentials are correct\n</code></pre>"},{"location":"quick-start/#configuration-problems","title":"Configuration Problems","text":"<pre><code># Verify config file location\necho $HALFORM_CONF_DIR\nls -la $HALFORM_CONF_DIR\n\n# Check config file format\ncat $HALFORM_CONF_DIR/your_config_file\n</code></pre>"},{"location":"quick-start/#import-errors","title":"Import Errors","text":"<pre><code># Verify halfORM installation\npip show half_orm\n\n# Reinstall if needed\npip install --upgrade half_orm\n</code></pre> <p>Need Help?</p> <ul> <li>Check the FAQ for common issues</li> <li>Join GitHub Discussions for community help</li> <li>Report bugs via GitHub Issues</li> </ul> <p>You're now ready to build amazing PostgreSQL applications with halfORM! \ud83d\ude80</p>"},{"location":"api/","title":"API Reference","text":"<p>Section Status</p> <p>API reference structure is ready. Automated docstring extraction is configured.</p>"},{"location":"api/#modules","title":"Modules","text":"<p>[Overview of all modules]</p>"},{"location":"api/#quick-reference","title":"Quick Reference","text":"<p>[Common methods and patterns]</p>"},{"location":"api/errors/","title":"Errors","text":"<p>API Status</p> <p>Error documentation needs comprehensive coverage of all exception types.</p>"},{"location":"api/errors/#error-categories","title":"Error Categories","text":"<p>[Overview of error types]</p>"},{"location":"api/errors/#exception-reference","title":"Exception Reference","text":""},{"location":"api/errors/#half_orm.relation_errors","title":"<code>relation_errors</code>","text":"<p>This module provides the errors for the relation module.</p>"},{"location":"api/errors/#half_orm.relation_errors-classes","title":"Classes","text":""},{"location":"api/errors/#half_orm.relation_errors.DuplicateAttributeError","title":"<code>DuplicateAttributeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Attempt to setattr to an already existing attribute.</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class DuplicateAttributeError(Exception):\n    \"\"\"Attempt to setattr to an already existing attribute.\"\"\"\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.ExpectedOneError","title":"<code>ExpectedOneError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>This exception is raised when get count differs from 1.</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class ExpectedOneError(Exception):\n    \"\"\"This exception is raised when get count differs from 1.\"\"\"\n    def __init__(self, relation, count):\n        self.rel = relation\n        self.count = count\n        self.plural = '' if count == 0 else 's'\n        Exception.__init__(self, f'Expected 1, got {self.count} tuple{self.plural}')\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.IsFrozenError","title":"<code>IsFrozenError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Class is frozen</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class IsFrozenError(Exception):\n    \"\"\"Class is frozen\"\"\"\n    def __init__(self, cls, msg):\n        super().__init__(\n            f\"ERROR! The class {cls} is forzen.\\n\"\n            f\"Use ho_unfreeze to add the '{msg}' attribute to it.\")\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.NotASingletonError","title":"<code>NotASingletonError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The constraint do not define a singleton.</p> <p>Raised from ExpectedOneError (err).</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class NotASingletonError(Exception):\n    \"\"\"The constraint do not define a singleton.\n\n    Raised from ExpectedOneError (err).\n    \"\"\"\n    def __init__(self, err):\n        Exception.__init__(self, f'Not a singleton. Got {err.count} tuple{err.plural}')\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.UnknownAttributeError","title":"<code>UnknownAttributeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Unknown attribute error</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class UnknownAttributeError(Exception):\n    \"\"\"Unknown attribute error\"\"\"\n    def __init__(self, msg):\n        super().__init__(f\"ERROR! Unknown attribute: {msg}.\")\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.WrongFkeyError","title":"<code>WrongFkeyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when Fkeys contains a wrong name</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class WrongFkeyError(Exception):\n    \"Raised when Fkeys contains a wrong name\"\n    def __init__(self, cls, value):\n        fkeys_list = \"\\n\".join([f\" - {fkey}\" for fkey in cls._ho_fkeys.keys()])\n        err = f\"Can't find '{value}'!\\n\" \\\n            f\"List of keys for {cls.__class__.__name__}:\\n\" \\\n            f\"{fkeys_list}\"\n        super().__init__(err)\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors","title":"<code>model_errors</code>","text":"<p>This module provides the errors for the model module.</p>"},{"location":"api/errors/#half_orm.model_errors-classes","title":"Classes","text":""},{"location":"api/errors/#half_orm.model_errors.MalformedConfigFile","title":"<code>MalformedConfigFile</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The config file is malformed.</p> <p>The missing parameters are indicated in the error message.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class MalformedConfigFile(Exception):\n    \"\"\"The config file is malformed.\n\n    The missing parameters are indicated in the error message.\n    \"\"\"\n    def __init__(self, filename, msg, missing_param):\n        self.filename = filename\n        Exception.__init__(\n            self,\n            f\"Malformed config file: {filename}\\n{msg}: {missing_param}\")\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors.MissingConfigFile","title":"<code>MissingConfigFile</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The config file has not been found.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class MissingConfigFile(Exception):\n    \"\"\"The config file has not been found.\"\"\"\n    def __init__(self, filename):\n        self.filename = filename\n        Exception.__init__(self, f'Missing config file: {filename}')\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors.MissingSchemaInName","title":"<code>MissingSchemaInName</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The QRN should contain a schema name.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class MissingSchemaInName(Exception):\n    \"\"\"The QRN should contain a schema name.\"\"\"\n    def __init__(self, qrn):\n        Exception.__init__(self, f\"do you mean 'public.{qrn}'?\")\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors.UnknownRelation","title":"<code>UnknownRelation</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The FQRN doesn't match any relation in the database.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class UnknownRelation(Exception):\n    \"\"\"The FQRN doesn't match any relation in the database.\"\"\"\n    def __init__(self, sfqrn):\n        self.dbname = sfqrn[0]\n        self.schema = sfqrn[1]\n        self.relation = sfqrn[2]\n        Exception.__init__(self, f\"'{sfqrn[1]}.{sfqrn[2]}' does not exist in the database {sfqrn[0]}.\")\n</code></pre>"},{"location":"api/field/","title":"Field","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/field/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/field/#reference","title":"Reference","text":""},{"location":"api/field/#half_orm.field","title":"<code>field</code>","text":"<p>This module provides the Field class. It is used by the <code>relation &lt;#module-half_orm.relation&gt;</code>_ module.</p>"},{"location":"api/field/#half_orm.field-classes","title":"Classes","text":""},{"location":"api/field/#half_orm.field.Field","title":"<code>Field</code>","text":"<p>The class Field is for Relation internal usage. It is called by the RelationFactory metaclass for each field in the relation considered.</p> Source code in <code>half_orm/field.py</code> <pre><code>class Field():\n    \"\"\"The class Field is for Relation internal usage. It is called by\n    the RelationFactory metaclass for each field in the relation considered.\n    \"\"\"\n    def __init__(self, name, relation, metadata):\n        self.__relation = relation\n        self.__name = name\n        self.__is_set = False\n        self.__metadata = metadata\n        self.__sql_type = self.__metadata['fieldtype']\n        self.__value = None\n        self.__unaccent = False\n        self.__comp = '='\n\n    @property\n    def _relation(self): # pragma: no cover\n        return self.__relation\n\n    @property\n    def _metadata(self): # pragma: no cover\n        return self.__metadata\n\n    @property\n    def py_type(self):\n        sql_type = self.__sql_type\n        list_ = False\n        if sql_type[0] == '_':\n            sql_type = sql_type[1:]\n            list_ = True\n        python_type = SQL_ADAPTER.get(sql_type, typing.Any)\n        if list_:\n            python_type = typing.List[python_type]\n        return python_type\n\n    @property\n    def name(self):\n        return self.__name\n\n    def is_set(self):\n        \"Returns if the field is set or not.\"\n        return self.__is_set\n\n    def _is_part_of_pk(self):\n        \"Returns True if the field is part of the PK\"\n        return bool(self.__metadata['pkey'])\n\n    def is_not_null(self):\n        \"Returns True if the field is defined as not null.\"\n        return bool(self.__metadata['notnull'])\n\n    def __repr__(self):\n        md_ = self.__metadata\n        field_constraint = f\"{md_['notnull'] and 'NOT NULL' or ''}\"\n        repr_ = f\"({md_['fieldtype']}) {field_constraint}\"\n        if self.__is_set:\n            repr_ = f\"{repr_} ({self.__name} {self.__comp} {self.__value})\"\n        return repr_.strip()\n\n    def __str__(self):\n        return str(self.__value)\n\n    def __praf(self, query, ho_id):\n        \"\"\"Returns field_name prefixed with relation alias if the query is\n        select. Otherwise, returns the field name quoted with \".\n        \"\"\"\n        ho_id = f'r{ho_id}'\n        if query == 'select':\n            return f'{ho_id}.\"{self.__name}\"'\n        return f'\"{self.__name}\"'\n\n    def _where_repr(self, query, ho_id):\n        \"\"\"Returns the SQL representation of the field for the where clause\n        \"\"\"\n        where_repr = ''\n        comp_str = '%s'\n        isiterable = type(self.__value) in {tuple, list, set}\n        col_is_array = self.__sql_type[0] == '_'\n        comp = self._comp()\n        if comp == '=' and isiterable:\n            comp = 'in'\n        cast = ''\n        if self.__value != NULL and not isiterable:\n            cast = f'::{self.__sql_type}'\n        if col_is_array and comp == '=':\n            where_repr = f'{comp_str} = ANY({self.__praf(query, ho_id)})'\n        elif not self.unaccent:\n            where_repr = f\"{self.__praf(query, ho_id)} {comp} {comp_str}{cast}\"\n        else:\n            where_repr = f\"unaccent({self.__praf(query, ho_id)}) {comp} unaccent({comp_str}{cast})\"\n        return where_repr\n\n    @property\n    def value(self):\n        \"Returns the value of the field object\"\n        return self.__value\n\n    def set(self, *args):\n        \"\"\"Sets the value (and the comparator) associated with the field.\"\"\"\n        self.__relation._ho_is_singleton = False\n        value = args[0]\n        if value is None:\n            self.__is_set = False\n            self.__value = None\n            self.__comp = '='\n            return\n        comp = None\n        if isinstance(value, tuple):\n            if len(value) != 2:\n                raise ValueError(f\"Can't match {value} with (comp, value)!\")\n            comp, value = value\n        if value is None:\n            raise ValueError(\"Can't have a None value with a comparator!\")\n        if value is NULL and comp is None:\n            comp = 'is'\n        elif comp is None:\n            comp = '='\n        if isinstance(value, (list, set)):\n            value = tuple(value)\n        comp = comp.lower()\n        if value is NULL and comp not in {'is', 'is not'}:\n            raise ValueError(\"comp should be 'is' or 'is not' with NULL value!\")\n        self.__is_set = True\n        self.__value = value\n        self.__comp = comp\n\n    def _set(self, *args):\n        sys.stderr.write(\n            \"WARNING! Field._set method is deprecated. Use Field.set instead.\\n\"\n            \"It will be remove in 1.0 version.\\n\")\n        return self.set(*args)\n\n    def _unset(self): #pragma: no cover\n        \"Unset a field\"\n        sys.stderr.write(\n            \"WARNING! Field._unset method is deprecated. Set the value of the field to None instead.\\n\"\n            \"It will be remove in 1.0 version.\\n\")\n        self.__is_set = False\n        self.__value = None\n        self.__comp = '='\n\n    @property\n    def unaccent(self):\n        return self.__unaccent\n    @unaccent.setter\n    def unaccent(self, value):\n        if not isinstance(value, bool):\n            raise RuntimeError('unaccent value must be True or False!')\n        self.__unaccent = value\n\n    def _comp(self):\n        \"Returns the comparator associated to the value.\"\n        if self.__comp == '%':\n            return '%%'\n        return self.__comp\n\n    @property\n    def _relation(self):\n        \"\"\"Internal usage.\n\n        Returns:\n            Relation: The Relation class for which self is an attribute.\n        \"\"\"\n        return self.__relation\n\n    def _psycopg_adapter(self):\n        \"\"\"Return the SQL representation of self.__value\"\"\"\n        return psycopg2.extensions.adapt(self.__value)\n\n    @property\n    def _name(self):\n        return self.__name\n\n    def __call__(self):\n        \"\"\"In case someone inadvertently uses the name of a field for a method.\"\"\"\n        rel_class = self.__relation.__class__\n        rcn = rel_class.__name__\n        method = rel_class.__dict__.get(self.__name)\n        err_msg = \"'Field' object is not callable.\"\n        warn_msg = f\"'{self.__name}' is an attribute of type Field of the '{rcn}' object.\"\n        if method:\n            err_msg = f\"{err_msg}\\n{warn_msg}\"\n            err_msg = f\"{err_msg}\\nDo not use '{self.__name}' as a method name.\"\n        raise TypeError(err_msg)\n</code></pre>"},{"location":"api/field/#half_orm.field.Field-attributes","title":"Attributes","text":""},{"location":"api/field/#half_orm.field.Field.value","title":"<code>value</code>  <code>property</code>","text":"<p>Returns the value of the field object</p>"},{"location":"api/field/#half_orm.field.Field-functions","title":"Functions","text":""},{"location":"api/field/#half_orm.field.Field.__call__","title":"<code>__call__()</code>","text":"<p>In case someone inadvertently uses the name of a field for a method.</p> Source code in <code>half_orm/field.py</code> <pre><code>def __call__(self):\n    \"\"\"In case someone inadvertently uses the name of a field for a method.\"\"\"\n    rel_class = self.__relation.__class__\n    rcn = rel_class.__name__\n    method = rel_class.__dict__.get(self.__name)\n    err_msg = \"'Field' object is not callable.\"\n    warn_msg = f\"'{self.__name}' is an attribute of type Field of the '{rcn}' object.\"\n    if method:\n        err_msg = f\"{err_msg}\\n{warn_msg}\"\n        err_msg = f\"{err_msg}\\nDo not use '{self.__name}' as a method name.\"\n    raise TypeError(err_msg)\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.__praf","title":"<code>__praf(query, ho_id)</code>","text":"<p>Returns field_name prefixed with relation alias if the query is select. Otherwise, returns the field name quoted with \".</p> Source code in <code>half_orm/field.py</code> <pre><code>def __praf(self, query, ho_id):\n    \"\"\"Returns field_name prefixed with relation alias if the query is\n    select. Otherwise, returns the field name quoted with \".\n    \"\"\"\n    ho_id = f'r{ho_id}'\n    if query == 'select':\n        return f'{ho_id}.\"{self.__name}\"'\n    return f'\"{self.__name}\"'\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.is_not_null","title":"<code>is_not_null()</code>","text":"<p>Returns True if the field is defined as not null.</p> Source code in <code>half_orm/field.py</code> <pre><code>def is_not_null(self):\n    \"Returns True if the field is defined as not null.\"\n    return bool(self.__metadata['notnull'])\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.is_set","title":"<code>is_set()</code>","text":"<p>Returns if the field is set or not.</p> Source code in <code>half_orm/field.py</code> <pre><code>def is_set(self):\n    \"Returns if the field is set or not.\"\n    return self.__is_set\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.set","title":"<code>set(*args)</code>","text":"<p>Sets the value (and the comparator) associated with the field.</p> Source code in <code>half_orm/field.py</code> <pre><code>def set(self, *args):\n    \"\"\"Sets the value (and the comparator) associated with the field.\"\"\"\n    self.__relation._ho_is_singleton = False\n    value = args[0]\n    if value is None:\n        self.__is_set = False\n        self.__value = None\n        self.__comp = '='\n        return\n    comp = None\n    if isinstance(value, tuple):\n        if len(value) != 2:\n            raise ValueError(f\"Can't match {value} with (comp, value)!\")\n        comp, value = value\n    if value is None:\n        raise ValueError(\"Can't have a None value with a comparator!\")\n    if value is NULL and comp is None:\n        comp = 'is'\n    elif comp is None:\n        comp = '='\n    if isinstance(value, (list, set)):\n        value = tuple(value)\n    comp = comp.lower()\n    if value is NULL and comp not in {'is', 'is not'}:\n        raise ValueError(\"comp should be 'is' or 'is not' with NULL value!\")\n    self.__is_set = True\n    self.__value = value\n    self.__comp = comp\n</code></pre>"},{"location":"api/fkey/","title":"FKey","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/fkey/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/fkey/#reference","title":"Reference","text":""},{"location":"api/fkey/#half_orm.fkey","title":"<code>fkey</code>","text":"<p>This module provides the FKey class.</p>"},{"location":"api/fkey/#half_orm.fkey-classes","title":"Classes","text":""},{"location":"api/fkey/#half_orm.fkey.FKey","title":"<code>FKey</code>","text":"<p>Foreign key class</p> <p>A foreign key is set by assigning to it a Relation object of the corresponding type (see FKey.set method). It is then used to construct the join query for Relation.ho_select method.</p> Source code in <code>half_orm/fkey.py</code> <pre><code>class FKey:\n    \"\"\"Foreign key class\n\n    A foreign key is set by assigning to it a Relation object of the\n    corresponding type (see FKey.set method).\n    It is then used to construct the join query for Relation.ho_select\n    method.\n    \"\"\"\n\n    def __init__(self,\n                 fk_name, relation, fk_sfqrn,\n                 fk_names=None, fields=None, confupdtype=None, confdeltype=None):\n        self.__relation = relation\n        self.__to_relation = None\n        self.__name = fk_name\n        self.__is_set = False\n        self.__fk_names = fk_names or []\n        self.__fk_from = None\n        self.__fk_to = None\n        self.__confupdtype = confupdtype\n        self.__confdeltype = confdeltype\n        self.__fk_fqrn = fk_sfqrn\n        self.__fields_names = fields\n        self.__fields = [f'\"{name}\"' for name in fields]\n\n    def __get_rel(self, fqtn):\n        \"\"\"Returns the relation class referenced by fqtn.\n        First try model._import_class fallback to model.get_relation_class on ImportError.\n        \"\"\"\n        return self.__relation._ho_model._import_class(fqtn)\n\n    def __call__(self, __cast__=None, **kwargs):\n        \"\"\"Returns the relation referenced by the fkey.\n        Uses the __cast__ if it is set.\n        \"\"\"\n        f_relation = self.__get_rel(__cast__ or normalize_qrn(self.__fk_fqrn))(**kwargs)\n        rev_fkey_name = f'_reverse_{f_relation.ho_id}'\n        f_relation._ho_fkeys[rev_fkey_name] = FKey(\n            rev_fkey_name,\n            f_relation,\n            f_relation._t_fqrn, self.__fields, self.__fk_names)\n        f_relation._ho_fkeys[rev_fkey_name].set(self.__relation)\n        return f_relation\n\n    def values(self):\n        return [list(elt.values()) for elt in self.__to_relation.ho_select(*self.__fk_names)]\n\n    def set(self, __to):\n        \"\"\"Sets the relation associated to the foreign key.\n\n        TODO: check that the __to is indeed atteinable from self\n        \"\"\"\n        # pylint: disable=import-outside-toplevel\n        from half_orm.relation import Relation\n\n        if not issubclass(__to.__class__, Relation):\n            raise RuntimeError(\"Fkey.set excepts an argument of type Relation\")\n        self.__to_relation = __to\n        from_ = self.__relation\n        self.__fk_from = from_\n        self.__fk_to = __to\n        self.__is_set = __to.ho_is_set()\n        from_._ho_join_to[self] = __to\n        return self\n\n    def is_set(self):\n        \"\"\"Return if the foreign key is set (boolean).\"\"\"\n        return self.__is_set\n\n    @property\n    def confupdtype(self):\n        \"on update configuration\"\n        return self.__confupdtype\n\n    @property\n    def confdeltype(self):\n        \"on delete configuration\"\n        return self.__confdeltype\n\n    #@utils.trace\n    def _join_query(self, orig_rel):\n        \"\"\"Returns the join_query, join_values of a foreign key.\n        fkey interface: frel, from_, __to, fields, fk_names\n        \"\"\"\n        from_ = self.__fk_from\n        __to = self.__fk_to\n        orig_rel_id = f'r{orig_rel.ho_id}'\n        to_id = f'r{__to.ho_id}'\n        from_id = f'r{from_.ho_id}'\n        if __to._qrn == orig_rel._qrn:\n            to_id = orig_rel_id\n        if from_._qrn == orig_rel._qrn:\n            from_id = orig_rel_id\n        from_fields = (f'{from_id}.{name}' for name in self.__fields)\n        to_fields = (f'{to_id}.{name}' for name in self.__fk_names)\n        bounds = \" and \".join(\n            [f'{a} = {b}' for a, b in zip(to_fields, from_fields)])\n        return f\"({bounds})\"\n\n    #@utils.trace\n    def _fkey_prep_select(self):\n        return (self.__fields, self.__fk_to._ho_prep_select(*self.fk_names)) if self.__is_set else None\n\n    @property\n    def name(self):\n        \"Returns the internal name of the foreign key\"\n        return self.__name\n\n    @property\n    def remote(self):\n        \"Returns the fqtn of the foreign table and if the link is reverse\"\n        return {'fqtn': self()._t_fqrn[1:], 'reverse': self.__name.find('_reverse_fkey_') == 0}\n\n    @property\n    def fk_names(self):\n        \"\"\"Returns the names of the fields composing the foreign key in the foreign table.\"\"\"\n        return self.__fk_names\n\n    @property\n    def names(self):\n        \"Returns the names of the fields composing the foreign key in the table\"\n        return self.__fields_names\n\n    def __repr__(self):\n        \"\"\"Representation of a foreign key\n        \"\"\"\n        fields = list(self.__fields)\n        fields = f\"({', '.join(fields)})\"\n        repr_ = f\"- {self.__name}: {fields}\\n \u21b3 {normalize_fqrn(self.__fk_fqrn)}({', '.join(self.fk_names)})\"\n        if self.__is_set:\n            repr_value = str(self.__fk_to)\n            res = []\n            for line in repr_value.split('\\n'):\n                res.append(f'     {line}')\n            res = '\\n'.join(res)\n            repr_ = f'{repr_}\\n{res}'\n        return repr_\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey-attributes","title":"Attributes","text":""},{"location":"api/fkey/#half_orm.fkey.FKey.confdeltype","title":"<code>confdeltype</code>  <code>property</code>","text":"<p>on delete configuration</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.confupdtype","title":"<code>confupdtype</code>  <code>property</code>","text":"<p>on update configuration</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.fk_names","title":"<code>fk_names</code>  <code>property</code>","text":"<p>Returns the names of the fields composing the foreign key in the foreign table.</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.name","title":"<code>name</code>  <code>property</code>","text":"<p>Returns the internal name of the foreign key</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.names","title":"<code>names</code>  <code>property</code>","text":"<p>Returns the names of the fields composing the foreign key in the table</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.remote","title":"<code>remote</code>  <code>property</code>","text":"<p>Returns the fqtn of the foreign table and if the link is reverse</p>"},{"location":"api/fkey/#half_orm.fkey.FKey-functions","title":"Functions","text":""},{"location":"api/fkey/#half_orm.fkey.FKey.__call__","title":"<code>__call__(__cast__=None, **kwargs)</code>","text":"<p>Returns the relation referenced by the fkey. Uses the cast if it is set.</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def __call__(self, __cast__=None, **kwargs):\n    \"\"\"Returns the relation referenced by the fkey.\n    Uses the __cast__ if it is set.\n    \"\"\"\n    f_relation = self.__get_rel(__cast__ or normalize_qrn(self.__fk_fqrn))(**kwargs)\n    rev_fkey_name = f'_reverse_{f_relation.ho_id}'\n    f_relation._ho_fkeys[rev_fkey_name] = FKey(\n        rev_fkey_name,\n        f_relation,\n        f_relation._t_fqrn, self.__fields, self.__fk_names)\n    f_relation._ho_fkeys[rev_fkey_name].set(self.__relation)\n    return f_relation\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.__get_rel","title":"<code>__get_rel(fqtn)</code>","text":"<p>Returns the relation class referenced by fqtn. First try model._import_class fallback to model.get_relation_class on ImportError.</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def __get_rel(self, fqtn):\n    \"\"\"Returns the relation class referenced by fqtn.\n    First try model._import_class fallback to model.get_relation_class on ImportError.\n    \"\"\"\n    return self.__relation._ho_model._import_class(fqtn)\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.__repr__","title":"<code>__repr__()</code>","text":"<p>Representation of a foreign key</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def __repr__(self):\n    \"\"\"Representation of a foreign key\n    \"\"\"\n    fields = list(self.__fields)\n    fields = f\"({', '.join(fields)})\"\n    repr_ = f\"- {self.__name}: {fields}\\n \u21b3 {normalize_fqrn(self.__fk_fqrn)}({', '.join(self.fk_names)})\"\n    if self.__is_set:\n        repr_value = str(self.__fk_to)\n        res = []\n        for line in repr_value.split('\\n'):\n            res.append(f'     {line}')\n        res = '\\n'.join(res)\n        repr_ = f'{repr_}\\n{res}'\n    return repr_\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.is_set","title":"<code>is_set()</code>","text":"<p>Return if the foreign key is set (boolean).</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def is_set(self):\n    \"\"\"Return if the foreign key is set (boolean).\"\"\"\n    return self.__is_set\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.set","title":"<code>set(__to)</code>","text":"<p>Sets the relation associated to the foreign key.</p> <p>TODO: check that the __to is indeed atteinable from self</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def set(self, __to):\n    \"\"\"Sets the relation associated to the foreign key.\n\n    TODO: check that the __to is indeed atteinable from self\n    \"\"\"\n    # pylint: disable=import-outside-toplevel\n    from half_orm.relation import Relation\n\n    if not issubclass(__to.__class__, Relation):\n        raise RuntimeError(\"Fkey.set excepts an argument of type Relation\")\n    self.__to_relation = __to\n    from_ = self.__relation\n    self.__fk_from = from_\n    self.__fk_to = __to\n    self.__is_set = __to.ho_is_set()\n    from_._ho_join_to[self] = __to\n    return self\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey-functions","title":"Functions","text":""},{"location":"api/model/","title":"Model","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/model/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/model/#reference","title":"Reference","text":""},{"location":"api/model/#half_orm.model","title":"<code>model</code>","text":"<p>This module provides the class Model.</p> <p>The class Model is responsible for the connection to the PostgreSQL database.</p> <p>Once connected, you can use the <code>get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;</code>_ method to generate a class to access any relation (table/view) in your database.</p> Example <p>from half_orm.model import Model model = Model('my_config_file') class MyTable(model.get_relation_class('my_schema.my_table')): ...     # Your business code goes here</p> Note <p>The default schema is <code>public</code> in PostgreSQL, so to reference a table <code>my_table</code> in this schema you'll have to use <code>pubic.my_table</code>.</p>"},{"location":"api/model/#half_orm.model-classes","title":"Classes","text":""},{"location":"api/model/#half_orm.model.Model","title":"<code>Model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>the configuration file that contains the informations to connect to the database.</p> required <code>scope</code> <code>Optional[str]</code> <p>used to agregate several modules in a package. See <code>hop &lt;https://github.com/collorg/halfORM/blob/main/doc/hop.md&gt;</code>_.</p> <code>None</code> Note <p>The config_file is searched in the <code>HALFORM_CONF_DIR</code> variable if specified, then in <code>/etc/half_orm</code>. The file format is as follows:</p> <pre><code>| [database]\n| name = &lt;postgres db name&gt;\n| user = &lt;postgres user&gt;\n| password = &lt;postgres password&gt;\n| host = &lt;host name | localhost&gt;\n| port = &lt;port | 5432&gt;\n</code></pre> <p>name is the only mandatory entry if you are using an <code>ident login with a local account &lt;https://www.postgresql.org/docs/current/auth-ident.html&gt;</code>_.</p> Source code in <code>half_orm/model.py</code> <pre><code>class Model:\n    \"\"\"\n    Parameters:\n        config_file (str): the configuration file that contains the informations to connect\n            to the database.\n        scope (Optional[str]): used to agregate several modules in a package.\n            See `hop &lt;https://github.com/collorg/halfORM/blob/main/doc/hop.md&gt;`_.\n\n    Note:\n        The **config_file** is searched in the `HALFORM_CONF_DIR` variable if specified,\n        then in `/etc/half_orm`. The file format is as follows:\n\n            | [database]\n            | name = &lt;postgres db name&gt;\n            | user = &lt;postgres user&gt;\n            | password = &lt;postgres password&gt;\n            | host = &lt;host name | localhost&gt;\n            | port = &lt;port | 5432&gt;\n\n        *name* is the only mandatory entry if you are using an\n        `ident login with a local account &lt;https://www.postgresql.org/docs/current/auth-ident.html&gt;`_.\n    \"\"\"\n    __deja_vu = {}\n    _classes_ = {}\n    def __init__(self, config_file: None, scope: str=None):\n        \"\"\"Model constructor\n\n        Use @config_file in your scripts. The @dbname parameter is\n        reserved to the __factory metaclass.\n        \"\"\"\n        self.__dbinfo = {}\n        self.__load_config(config_file)\n        self._scope = scope and scope.split('.')[0]\n        self.__conn = None\n        self.__connect()\n\n    def __load_config(self, config_file):\n        \"\"\"Load the config file\n\n        Raises:\n            MissingConfigFile: If the **config_file** is not found in *HALFORM_CONF_DIR*.\n            MalformedConfigFile: if the *name* is missing in the **config_file**.\n            RuntimeError: If the reconnection is attempted on another database.\n        \"\"\"\n        self.__config_file = config_file\n        config = ConfigParser()\n        file_ = os.path.join(CONF_DIR, self.__config_file)\n        if config.read([file_]):\n            try:\n                database = config['database']\n            except KeyError as exc:\n                raise model_errors.MalformedConfigFile(file_, 'Missing section', 'database') from exc\n            try:\n                dbname = database['name']\n            except KeyError as exc:\n                raise model_errors.MalformedConfigFile(file_, 'Missing mandatory parameter', 'name') from exc\n\n            if self.__dbinfo and dbname != self.__dbname:\n                raise RuntimeError(\n                    f\"Can't reconnect to another database: {dbname} != {self.__dbname}\")\n            self.__dbinfo['dbname'] = dbname\n\n        else:\n            dbname = config_file\n            self.__dbinfo['dbname'] = dbname\n            database = {'user': None, 'password': None, 'host': None, 'port': None}\n            utils.warning(f\"No config file for '{dbname}'\\nI will try to use a trusted authentication to the database '{dbname}' with the role '{os.environ.get('USER') or os.getlogin()}'.\\n\")\n\n        self.__dbinfo['user'] = database.get('user')\n        self.__dbinfo['password'] = database.get('password')\n        self.__dbinfo['host'] = database.get('host')\n        self.__dbinfo['port'] = database.get('port')\n\n    def __connect(self, config_file: str=None, reload: bool=False):\n        \"\"\"Setup a new connection to the database.\n\n        The reconnect method is an alias to the ``__connect`` method.\n\n        Parameters:\n            config_file (str): If a config_file is provided, the connection is made with the new\n                parameters, allowing to change role. The database name must be the same.\n            reload (bool): If set to True, reloads the metadata from the database. Usefull if\n                the model has changed.\n        \"\"\"\n        self.disconnect()\n\n        if config_file:\n            self.__load_config(config_file)\n        self.__conn = psycopg2.connect(**self.__dbinfo, cursor_factory=RealDictCursor)\n        self.__conn.autocommit = True\n        self.__pg_meta = pg_meta.PgMeta(self.__conn, reload)\n        if reload:\n            self._classes_[self._dbname] = {}\n        if self.__dbname not in self.__class__.__deja_vu:\n            self.__deja_vu[self.__dbname] = self\n\n    reconnect = __connect\n\n    def get_relation_class(self, relation_name: str, fields_aliases: typing.Dict=None): # -&gt; Relation\n        \"\"\"This method is a factory that generates a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class.\n\n        Args:\n            relation_name (string): the full name (`&lt;schema&gt;.&lt;relation&gt;`) of the targeted relation in the database.\n\n        Raises:\n            ValueError: if the schema is missing in relation_name\n            UnknownRelationError: if the relation is not found in the database\n\n        Returns:\n            a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class:\n                the class corresponding to the relation in the database.\n\n        Examples:\n            A class inheriting the `Relation &lt;#half_orm.relation.Relation&gt;`_ class is returned:\n                &gt;&gt;&gt; Person = model.get_relation_class('actor.person')\n                &gt;&gt;&gt; Person\n                &lt;class 'half_orm.relation.Table_HalftestActorPerson'&gt;\n                &gt;&gt;&gt; Person.__bases__\n                (&lt;class 'half_orm.relation.Relation'&gt;,)\n\n            A prefered way to create a class:\n                &gt;&gt;&gt; class Person(model.get_relation_class('actor.person)):\n                &gt;&gt;&gt;     # Your code goes here\n\n            A `MissingSchemaInName &lt;#half_orm.model_errors.MissingSchemaInName&gt;`_ is raised when the schema name is missing:\n                &gt;&gt;&gt; model.get_relation_class('person')\n                [...]MissingSchemaInName: do you mean 'public.person'?\n\n            An `UnknownRelation &lt;#half_orm.model_errors.UnknownRelation&gt;`_ is raised if the relation is not found in the model:\n                &gt;&gt;&gt; model.get_relation_class('public.person')\n                [...]UnknownRelation: 'public.person' does not exist in the database halftest.\n        \"\"\"\n        try:\n            schema, table = relation_name.replace('\"', '').rsplit('.', 1)\n        except ValueError as err:\n            raise model_errors.MissingSchemaInName(relation_name) from err\n        return factory({'fqrn': (self.__dbname, schema, table), 'model': self.__deja_vu[self.__dbname], 'fields_aliases':fields_aliases})\n\n\n    @staticmethod\n    def _deja_vu(dbname):\n        \"\"\"Returns None if the database hasn't been loaded yet.\n        Otherwise, it returns the Model object already loaded.\n        The Model object is shared between all_ the relations in the\n        database. The Model object is loaded only once for a given database.\n        \"\"\"\n        return Model.__deja_vu.get(dbname)\n\n    @property\n    def __dbname(self):\n        return self.__dbinfo['dbname']\n\n    def ping(self):\n        \"\"\"Checks if the connection is still established.\n        Attempts a new connection otherwise.\n\n        Returns:\n            bool: True if the connection is established, False otherwise.\n        \"\"\"\n        try:\n            self.execute_query(\"select 1\")\n            return True\n        except (psycopg2.OperationalError, psycopg2.InterfaceError):\n            try:\n                self.__connect()\n                self.execute_query(\"select 1\")\n            except (psycopg2.OperationalError, psycopg2.InterfaceError) as exc: #pragma: no cover\n                # log reconnection attempt failure\n                sys.stderr.write(f'{exc.exception}\\n')\n                sys.stderr.flush()\n            return False\n\n    def disconnect(self):\n        \"\"\"Closes the connection to the database.\n        \"\"\"\n        if self.__conn is not None and not self.__conn.closed:\n            self.__conn.close()\n\n    def _reload(self, config_file=None):\n        \"\"\"Reload metadata\n\n        Updates the model according to changes made to the database.\n        \"\"\"\n        self.__connect(config_file, True)\n\n    @property\n    def _dbname(self):\n        \"\"\"\n        property. Returns the database name.\n        \"\"\"\n        return self.__dbname\n\n    @property\n    def _connection(self):\n        \"\"\"\\\n        Property. Returns the psycopg2 connection attached to the Model object.\n        \"\"\"\n        return self.__conn\n\n    def _fields_metadata(self, sfqrn):\n        \"Proxy to PgMeta.fields_meta\"\n        return self.__pg_meta.fields_meta(self.__dbname, sfqrn)\n\n    def _fkeys_metadata(self, sfqrn):\n        \"Proxy to PgMeta.fkeys_meta\"\n        return self.__pg_meta.fkeys_meta(self.__dbname, sfqrn)\n\n    def _relation_metadata(self, fqrn):\n        \"Proxy to PgMeta.relation_meta\"\n        return self.__pg_meta.relation_meta(self.__dbname, fqrn)\n\n    def _unique_constraints_list(self, fqrn):\n        \"Proxy to PgMeta._unique_constraints_list\"\n        return self.__pg_meta._unique_constraints_list(self.__dbname, fqrn)\n\n    def _pkey_constraint(self, fqrn):\n        \"Proxy to PgMeta._pkey_constraint\"\n        return self.__pg_meta._pkey_constraint(self.__dbname, fqrn)\n\n    def execute_query(self, query, values=(), mogrify=False):\n        \"\"\"Executes a raw SQL query.\n\n        Warning:\n            This method calls the psycopg2\n            `cursor.execute &lt;https://www.psycopg.org/docs/cursor.html?highlight=execute#cursor.execute&gt;`_\n            function.\n            Please read the psycopg2 documentation on\n            `passing parameters to SQL queries &lt;https://www.psycopg.org/docs/usage.html#query-parameters&gt;`_.\n        \"\"\"\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        try:\n            if mogrify:\n                print(cursor.mogrify(query, values).decode('utf-8'))\n            cursor.execute(query, values)\n        except (psycopg2.OperationalError, psycopg2.InterfaceError):\n            self.ping()\n            cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(query, values)\n        return cursor\n\n    def execute_function(self, fct_name, *args, **kwargs) -&gt; typing.List[tuple]:\n        \"\"\"`Executes a PostgreSQL function &lt;https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html&gt;`_.\n\n        Arguments:\n            *args: The list of parameters to be passed to the postgresql function.\n            **kwargs: The list of named parameters to be passed to the postgresql function.\n\n        Returns:\n            List[tuple]: a list of tuples.\n\n        Raises:\n            RuntimeError: If you mix ***args** and ****kwargs**.\n\n        Note:\n            You can't mix args and kwargs with the execute_function method!\n        \"\"\"\n        if bool(args) and bool(kwargs):\n            raise RuntimeError(\"You can't mix args and kwargs with the execute_function method!\")\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        if kwargs:\n            values = kwargs\n        else:\n            values = args\n        cursor.callproc(fct_name, values)\n        return cursor.fetchall()\n\n    def call_procedure(self, proc_name, *args, **kwargs):\n        \"\"\"`Executes a PostgreSQL procedure &lt;https://www.postgresql.org/docs/current/sql-call.html&gt;`_.\n\n        Arguments:\n            *args: The list of parameters to be passed to the postgresql function.\n            **kwargs: The list of named parameters to be passed to the postgresql function.\n\n        Returns:\n            None | List[tuple]: None or a list of tuples.\n\n        Raises:\n            RuntimeError: If you mix ***args** and ****kwargs**.\n\n        Note:\n            You can't mix args and kwargs with the call_procedure method!\n        \"\"\"\n        if bool(args) and bool(kwargs):\n            raise RuntimeError(\"You can't mix args and kwargs with the call_procedure method!\")\n        if kwargs:\n            params = ', '.join([f'{key} =&gt; %s' for key in kwargs])\n            values = tuple(kwargs.values())\n        else:\n            params = ', '.join(['%s' for _ in range(len(args))])\n            values = args\n        query = f'call {proc_name}({params})'\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        cursor.execute(query, values)\n        try:\n            return cursor.fetchall()\n        except psycopg2.ProgrammingError:\n            return None\n\n    def has_relation(self, qtn: str) -&gt; bool:\n        \"\"\"Checks if the qtn is a relation in the database\n\n        Returns:\n            bool: True if the relation exists in the database, False otherwise.\n\n        Example:\n            &gt;&gt;&gt; model.has_relation('public.person')\n            False\n            &gt;&gt;&gt; model.has_relation('actor.person')\n            True\n        \"\"\"\n        return self.__pg_meta.has_relation(self.__dbname, *qtn.rsplit('.', 1))\n\n    def _import_class(self, qtn, scope=None):\n        \"\"\"Used to return the class from the scope module.\n\n        This method is used to import a class from a module. The module\n        must reside in an accessible python package named `scope`.\n        \"\"\"\n        t_qtn = qtn.replace('\"', '').rsplit('.', 1)\n        self._scope = scope or self._scope\n        module_path = \".\".join(t_qtn)\n        if self._scope:\n            module_path = f'{self._scope}.{module_path}'\n        _class_name = pg_meta.class_name(qtn) # XXX\n        try:\n            module = __import__(\n                module_path, globals(), locals(), [_class_name], 0)\n            return module.__dict__[_class_name]\n        except:\n            return self.get_relation_class(qtn)\n\n    def _relations(self):\n        \"\"\"List all_ the relations in the database\"\"\"\n        rels = self.__pg_meta.relations_list(self.__dbname)\n        return rels\n\n    def desc(self):\n        \"\"\"Returns the list of the relations of the model.\n\n        Each element in the list contains:\n\n        * the relation type: 'r' relation, 'v' view, 'm' materialized view, 'p' partition;\n        * a tuple identifying the relation: (db name&gt;, &lt;schema name&gt;, &lt;relation name&gt;);\n        * a list of tuples indentifying the inherited relations.\n\n        Example:\n            &gt;&gt;&gt; from half_orm.model import Model\n            &gt;&gt;&gt; halftest = Model('halftest')\n            &gt;&gt;&gt; halftest.desc()\n            [('r', ('halftest', 'actor', 'person'), []), ('r', ('halftest', 'blog', 'comment'), []), ('r', ('halftest', 'blog', 'event'), [('halftest', 'blog', 'post')]), ('r', ('halftest', 'blog', 'post'), []), ('v', ('halftest', 'blog.view', 'post_comment'), [])]\n        \"\"\"\n        return self.__pg_meta.desc(self.__dbname)\n\n    def __str__(self):\n        return self.__pg_meta.str(self.__dbname)\n\n    def classes(self):\n        \"Returns the all the classes of the model\"\n        for relation in self._relations():\n            package_name = relation[1][0]\n            module_name = \".\".join(relation[1][1:])\n            if module_name.find('half_orm_meta') == 0:\n                continue\n            class_name = pg_meta.camel_case(relation[1][-1])\n            module = importlib.import_module(f\".{module_name}\", package_name)\n            yield getattr(module, class_name), relation[0]\n</code></pre>"},{"location":"api/model/#half_orm.model.Model-functions","title":"Functions","text":""},{"location":"api/model/#half_orm.model.Model.__connect","title":"<code>__connect(config_file=None, reload=False)</code>","text":"<p>Setup a new connection to the database.</p> <p>The reconnect method is an alias to the <code>__connect</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>If a config_file is provided, the connection is made with the new parameters, allowing to change role. The database name must be the same.</p> <code>None</code> <code>reload</code> <code>bool</code> <p>If set to True, reloads the metadata from the database. Usefull if the model has changed.</p> <code>False</code> Source code in <code>half_orm/model.py</code> <pre><code>def __connect(self, config_file: str=None, reload: bool=False):\n    \"\"\"Setup a new connection to the database.\n\n    The reconnect method is an alias to the ``__connect`` method.\n\n    Parameters:\n        config_file (str): If a config_file is provided, the connection is made with the new\n            parameters, allowing to change role. The database name must be the same.\n        reload (bool): If set to True, reloads the metadata from the database. Usefull if\n            the model has changed.\n    \"\"\"\n    self.disconnect()\n\n    if config_file:\n        self.__load_config(config_file)\n    self.__conn = psycopg2.connect(**self.__dbinfo, cursor_factory=RealDictCursor)\n    self.__conn.autocommit = True\n    self.__pg_meta = pg_meta.PgMeta(self.__conn, reload)\n    if reload:\n        self._classes_[self._dbname] = {}\n    if self.__dbname not in self.__class__.__deja_vu:\n        self.__deja_vu[self.__dbname] = self\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.__init__","title":"<code>__init__(config_file, scope=None)</code>","text":"<p>Model constructor</p> <p>Use @config_file in your scripts. The @dbname parameter is reserved to the __factory metaclass.</p> Source code in <code>half_orm/model.py</code> <pre><code>def __init__(self, config_file: None, scope: str=None):\n    \"\"\"Model constructor\n\n    Use @config_file in your scripts. The @dbname parameter is\n    reserved to the __factory metaclass.\n    \"\"\"\n    self.__dbinfo = {}\n    self.__load_config(config_file)\n    self._scope = scope and scope.split('.')[0]\n    self.__conn = None\n    self.__connect()\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.__load_config","title":"<code>__load_config(config_file)</code>","text":"<p>Load the config file</p> <p>Raises:</p> Type Description <code>MissingConfigFile</code> <p>If the config_file is not found in HALFORM_CONF_DIR.</p> <code>MalformedConfigFile</code> <p>if the name is missing in the config_file.</p> <code>RuntimeError</code> <p>If the reconnection is attempted on another database.</p> Source code in <code>half_orm/model.py</code> <pre><code>def __load_config(self, config_file):\n    \"\"\"Load the config file\n\n    Raises:\n        MissingConfigFile: If the **config_file** is not found in *HALFORM_CONF_DIR*.\n        MalformedConfigFile: if the *name* is missing in the **config_file**.\n        RuntimeError: If the reconnection is attempted on another database.\n    \"\"\"\n    self.__config_file = config_file\n    config = ConfigParser()\n    file_ = os.path.join(CONF_DIR, self.__config_file)\n    if config.read([file_]):\n        try:\n            database = config['database']\n        except KeyError as exc:\n            raise model_errors.MalformedConfigFile(file_, 'Missing section', 'database') from exc\n        try:\n            dbname = database['name']\n        except KeyError as exc:\n            raise model_errors.MalformedConfigFile(file_, 'Missing mandatory parameter', 'name') from exc\n\n        if self.__dbinfo and dbname != self.__dbname:\n            raise RuntimeError(\n                f\"Can't reconnect to another database: {dbname} != {self.__dbname}\")\n        self.__dbinfo['dbname'] = dbname\n\n    else:\n        dbname = config_file\n        self.__dbinfo['dbname'] = dbname\n        database = {'user': None, 'password': None, 'host': None, 'port': None}\n        utils.warning(f\"No config file for '{dbname}'\\nI will try to use a trusted authentication to the database '{dbname}' with the role '{os.environ.get('USER') or os.getlogin()}'.\\n\")\n\n    self.__dbinfo['user'] = database.get('user')\n    self.__dbinfo['password'] = database.get('password')\n    self.__dbinfo['host'] = database.get('host')\n    self.__dbinfo['port'] = database.get('port')\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.call_procedure","title":"<code>call_procedure(proc_name, *args, **kwargs)</code>","text":"<p><code>Executes a PostgreSQL procedure &lt;https://www.postgresql.org/docs/current/sql-call.html&gt;</code>_.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>The list of parameters to be passed to the postgresql function.</p> <code>()</code> <code>**kwargs</code> <p>The list of named parameters to be passed to the postgresql function.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None | List[tuple]: None or a list of tuples.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If you mix ***args** and ****kwargs**.</p> Note <p>You can't mix args and kwargs with the call_procedure method!</p> Source code in <code>half_orm/model.py</code> <pre><code>def call_procedure(self, proc_name, *args, **kwargs):\n    \"\"\"`Executes a PostgreSQL procedure &lt;https://www.postgresql.org/docs/current/sql-call.html&gt;`_.\n\n    Arguments:\n        *args: The list of parameters to be passed to the postgresql function.\n        **kwargs: The list of named parameters to be passed to the postgresql function.\n\n    Returns:\n        None | List[tuple]: None or a list of tuples.\n\n    Raises:\n        RuntimeError: If you mix ***args** and ****kwargs**.\n\n    Note:\n        You can't mix args and kwargs with the call_procedure method!\n    \"\"\"\n    if bool(args) and bool(kwargs):\n        raise RuntimeError(\"You can't mix args and kwargs with the call_procedure method!\")\n    if kwargs:\n        params = ', '.join([f'{key} =&gt; %s' for key in kwargs])\n        values = tuple(kwargs.values())\n    else:\n        params = ', '.join(['%s' for _ in range(len(args))])\n        values = args\n    query = f'call {proc_name}({params})'\n    cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n    cursor.execute(query, values)\n    try:\n        return cursor.fetchall()\n    except psycopg2.ProgrammingError:\n        return None\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.classes","title":"<code>classes()</code>","text":"<p>Returns the all the classes of the model</p> Source code in <code>half_orm/model.py</code> <pre><code>def classes(self):\n    \"Returns the all the classes of the model\"\n    for relation in self._relations():\n        package_name = relation[1][0]\n        module_name = \".\".join(relation[1][1:])\n        if module_name.find('half_orm_meta') == 0:\n            continue\n        class_name = pg_meta.camel_case(relation[1][-1])\n        module = importlib.import_module(f\".{module_name}\", package_name)\n        yield getattr(module, class_name), relation[0]\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.desc","title":"<code>desc()</code>","text":"<p>Returns the list of the relations of the model.</p> <p>Each element in the list contains:</p> <ul> <li>the relation type: 'r' relation, 'v' view, 'm' materialized view, 'p' partition;</li> <li>a tuple identifying the relation: (db name&gt;, , ); <li>a list of tuples indentifying the inherited relations.</li> Example <p>from half_orm.model import Model halftest = Model('halftest') halftest.desc() [('r', ('halftest', 'actor', 'person'), []), ('r', ('halftest', 'blog', 'comment'), []), ('r', ('halftest', 'blog', 'event'), [('halftest', 'blog', 'post')]), ('r', ('halftest', 'blog', 'post'), []), ('v', ('halftest', 'blog.view', 'post_comment'), [])]</p> Source code in <code>half_orm/model.py</code> <pre><code>def desc(self):\n    \"\"\"Returns the list of the relations of the model.\n\n    Each element in the list contains:\n\n    * the relation type: 'r' relation, 'v' view, 'm' materialized view, 'p' partition;\n    * a tuple identifying the relation: (db name&gt;, &lt;schema name&gt;, &lt;relation name&gt;);\n    * a list of tuples indentifying the inherited relations.\n\n    Example:\n        &gt;&gt;&gt; from half_orm.model import Model\n        &gt;&gt;&gt; halftest = Model('halftest')\n        &gt;&gt;&gt; halftest.desc()\n        [('r', ('halftest', 'actor', 'person'), []), ('r', ('halftest', 'blog', 'comment'), []), ('r', ('halftest', 'blog', 'event'), [('halftest', 'blog', 'post')]), ('r', ('halftest', 'blog', 'post'), []), ('v', ('halftest', 'blog.view', 'post_comment'), [])]\n    \"\"\"\n    return self.__pg_meta.desc(self.__dbname)\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.disconnect","title":"<code>disconnect()</code>","text":"<p>Closes the connection to the database.</p> Source code in <code>half_orm/model.py</code> <pre><code>def disconnect(self):\n    \"\"\"Closes the connection to the database.\n    \"\"\"\n    if self.__conn is not None and not self.__conn.closed:\n        self.__conn.close()\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.execute_function","title":"<code>execute_function(fct_name, *args, **kwargs)</code>","text":"<p><code>Executes a PostgreSQL function &lt;https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html&gt;</code>_.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>The list of parameters to be passed to the postgresql function.</p> <code>()</code> <code>**kwargs</code> <p>The list of named parameters to be passed to the postgresql function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[tuple]</code> <p>List[tuple]: a list of tuples.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If you mix ***args** and ****kwargs**.</p> Note <p>You can't mix args and kwargs with the execute_function method!</p> Source code in <code>half_orm/model.py</code> <pre><code>def execute_function(self, fct_name, *args, **kwargs) -&gt; typing.List[tuple]:\n    \"\"\"`Executes a PostgreSQL function &lt;https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html&gt;`_.\n\n    Arguments:\n        *args: The list of parameters to be passed to the postgresql function.\n        **kwargs: The list of named parameters to be passed to the postgresql function.\n\n    Returns:\n        List[tuple]: a list of tuples.\n\n    Raises:\n        RuntimeError: If you mix ***args** and ****kwargs**.\n\n    Note:\n        You can't mix args and kwargs with the execute_function method!\n    \"\"\"\n    if bool(args) and bool(kwargs):\n        raise RuntimeError(\"You can't mix args and kwargs with the execute_function method!\")\n    cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n    if kwargs:\n        values = kwargs\n    else:\n        values = args\n    cursor.callproc(fct_name, values)\n    return cursor.fetchall()\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.execute_query","title":"<code>execute_query(query, values=(), mogrify=False)</code>","text":"<p>Executes a raw SQL query.</p> Warning <p>This method calls the psycopg2 <code>cursor.execute &lt;https://www.psycopg.org/docs/cursor.html?highlight=execute#cursor.execute&gt;</code>_ function. Please read the psycopg2 documentation on <code>passing parameters to SQL queries &lt;https://www.psycopg.org/docs/usage.html#query-parameters&gt;</code>_.</p> Source code in <code>half_orm/model.py</code> <pre><code>def execute_query(self, query, values=(), mogrify=False):\n    \"\"\"Executes a raw SQL query.\n\n    Warning:\n        This method calls the psycopg2\n        `cursor.execute &lt;https://www.psycopg.org/docs/cursor.html?highlight=execute#cursor.execute&gt;`_\n        function.\n        Please read the psycopg2 documentation on\n        `passing parameters to SQL queries &lt;https://www.psycopg.org/docs/usage.html#query-parameters&gt;`_.\n    \"\"\"\n    cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n    try:\n        if mogrify:\n            print(cursor.mogrify(query, values).decode('utf-8'))\n        cursor.execute(query, values)\n    except (psycopg2.OperationalError, psycopg2.InterfaceError):\n        self.ping()\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        cursor.execute(query, values)\n    return cursor\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.get_relation_class","title":"<code>get_relation_class(relation_name, fields_aliases=None)</code>","text":"<p>This method is a factory that generates a class that inherits the <code>Relation &lt;#half_orm.relation.Relation&gt;</code>_ class.</p> <p>Parameters:</p> Name Type Description Default <code>relation_name</code> <code>string</code> <p>the full name (<code>&lt;schema&gt;.&lt;relation&gt;</code>) of the targeted relation in the database.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the schema is missing in relation_name</p> <code>UnknownRelationError</code> <p>if the relation is not found in the database</p> <p>Returns:</p> Type Description <p>a class that inherits the <code>Relation &lt;#half_orm.relation.Relation&gt;</code>_ class: the class corresponding to the relation in the database.</p> <p>Examples:</p> <p>A class inheriting the <code>Relation &lt;#half_orm.relation.Relation&gt;</code>_ class is returned:     &gt;&gt;&gt; Person = model.get_relation_class('actor.person')     &gt;&gt;&gt; Person          &gt;&gt;&gt; Person.bases     (,) <p>A prefered way to create a class:     &gt;&gt;&gt; class Person(model.get_relation_class('actor.person)):     &gt;&gt;&gt;     # Your code goes here</p> <p>A <code>MissingSchemaInName &lt;#half_orm.model_errors.MissingSchemaInName&gt;</code>_ is raised when the schema name is missing:     &gt;&gt;&gt; model.get_relation_class('person')     [...]MissingSchemaInName: do you mean 'public.person'?</p> <p>An <code>UnknownRelation &lt;#half_orm.model_errors.UnknownRelation&gt;</code>_ is raised if the relation is not found in the model:     &gt;&gt;&gt; model.get_relation_class('public.person')     [...]UnknownRelation: 'public.person' does not exist in the database halftest.</p> Source code in <code>half_orm/model.py</code> <pre><code>def get_relation_class(self, relation_name: str, fields_aliases: typing.Dict=None): # -&gt; Relation\n    \"\"\"This method is a factory that generates a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class.\n\n    Args:\n        relation_name (string): the full name (`&lt;schema&gt;.&lt;relation&gt;`) of the targeted relation in the database.\n\n    Raises:\n        ValueError: if the schema is missing in relation_name\n        UnknownRelationError: if the relation is not found in the database\n\n    Returns:\n        a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class:\n            the class corresponding to the relation in the database.\n\n    Examples:\n        A class inheriting the `Relation &lt;#half_orm.relation.Relation&gt;`_ class is returned:\n            &gt;&gt;&gt; Person = model.get_relation_class('actor.person')\n            &gt;&gt;&gt; Person\n            &lt;class 'half_orm.relation.Table_HalftestActorPerson'&gt;\n            &gt;&gt;&gt; Person.__bases__\n            (&lt;class 'half_orm.relation.Relation'&gt;,)\n\n        A prefered way to create a class:\n            &gt;&gt;&gt; class Person(model.get_relation_class('actor.person)):\n            &gt;&gt;&gt;     # Your code goes here\n\n        A `MissingSchemaInName &lt;#half_orm.model_errors.MissingSchemaInName&gt;`_ is raised when the schema name is missing:\n            &gt;&gt;&gt; model.get_relation_class('person')\n            [...]MissingSchemaInName: do you mean 'public.person'?\n\n        An `UnknownRelation &lt;#half_orm.model_errors.UnknownRelation&gt;`_ is raised if the relation is not found in the model:\n            &gt;&gt;&gt; model.get_relation_class('public.person')\n            [...]UnknownRelation: 'public.person' does not exist in the database halftest.\n    \"\"\"\n    try:\n        schema, table = relation_name.replace('\"', '').rsplit('.', 1)\n    except ValueError as err:\n        raise model_errors.MissingSchemaInName(relation_name) from err\n    return factory({'fqrn': (self.__dbname, schema, table), 'model': self.__deja_vu[self.__dbname], 'fields_aliases':fields_aliases})\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.has_relation","title":"<code>has_relation(qtn)</code>","text":"<p>Checks if the qtn is a relation in the database</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the relation exists in the database, False otherwise.</p> Example <p>model.has_relation('public.person') False model.has_relation('actor.person') True</p> Source code in <code>half_orm/model.py</code> <pre><code>def has_relation(self, qtn: str) -&gt; bool:\n    \"\"\"Checks if the qtn is a relation in the database\n\n    Returns:\n        bool: True if the relation exists in the database, False otherwise.\n\n    Example:\n        &gt;&gt;&gt; model.has_relation('public.person')\n        False\n        &gt;&gt;&gt; model.has_relation('actor.person')\n        True\n    \"\"\"\n    return self.__pg_meta.has_relation(self.__dbname, *qtn.rsplit('.', 1))\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.ping","title":"<code>ping()</code>","text":"<p>Checks if the connection is still established. Attempts a new connection otherwise.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the connection is established, False otherwise.</p> Source code in <code>half_orm/model.py</code> <pre><code>def ping(self):\n    \"\"\"Checks if the connection is still established.\n    Attempts a new connection otherwise.\n\n    Returns:\n        bool: True if the connection is established, False otherwise.\n    \"\"\"\n    try:\n        self.execute_query(\"select 1\")\n        return True\n    except (psycopg2.OperationalError, psycopg2.InterfaceError):\n        try:\n            self.__connect()\n            self.execute_query(\"select 1\")\n        except (psycopg2.OperationalError, psycopg2.InterfaceError) as exc: #pragma: no cover\n            # log reconnection attempt failure\n            sys.stderr.write(f'{exc.exception}\\n')\n            sys.stderr.flush()\n        return False\n</code></pre>"},{"location":"api/model/#half_orm.model-functions","title":"Functions","text":""},{"location":"api/relation/","title":"Relation","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/relation/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/relation/#reference","title":"Reference","text":""},{"location":"api/relation/#half_orm.relation","title":"<code>relation</code>","text":"<p>This module is used by the <code>model &lt;#module-half_orm.model&gt;</code>_ module to generate the classes that manipulate the data in your database with the <code>Model.get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;</code>_ method.</p> Example <p>from half_orm.model import Model model = Model('halftest') class Person(model.get_relation_class('actor.person')):     # your code goes here</p> <p>Main methods provided by the class Relation: - ho_insert: inserts a tuple into the pg table. - ho_select: returns a generator of the elements of the set defined by   the constraint on the Relation object. The elements are dictionaries with the   keys corresponding to the selected columns names in the relation.   The result is affected by the methods: ho_distinct, ho_order_by, ho_limit and ho_offset   (see below). - ho_update: updates the set defined by the constraint on the Relation object   with the values passed as arguments. - ho_delete: deletes from the relation the set of elements defined by the constraint   on the Relation object. - ho_get: returns the unique element defined by the constraint on the Relation object.   the element returned if of the type of the Relation object.</p> <p>The following methods can be chained on the object before a select.</p> <ul> <li>ho_distinct: ensures that there are no duplicates on the select result.</li> <li>ho_order_by: sets the order of the select result.</li> <li>ho_limit: limits the number of elements returned by the select method.</li> <li>ho_offset: sets the offset for the select method.</li> </ul>"},{"location":"api/relation/#half_orm.relation-classes","title":"Classes","text":""},{"location":"api/relation/#half_orm.relation.DC_Relation","title":"<code>DC_Relation</code>  <code>dataclass</code>","text":"Source code in <code>half_orm/relation.py</code> <pre><code>@dataclass\nclass DC_Relation: # pragma: no cover\n    def __init__(self, **kwargs): ...\n\n    def ho_insert(self, *args: List[str]) -&gt; Dict:\n        \"\"\"Insert a new tuple into the Relation.\n\n        Returns:\n            Dict: A dictionary containing the data inserted.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n            &gt;&gt;&gt; print(gaston)\n            {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n        Note:\n            It is not possible to insert more than one row with the ho_insert method\n        \"\"\"\n        ...\n    def ho_select(self, *args: List[str]) -&gt; [Dict]:\n        \"\"\"Gets the set of values correponding to the constraint attached to self.\n        This method is a generator.\n\n        Arguments:\n            *args: the fields names of the returned attributes. If omitted,\n                all the fields are returned.\n\n        Yields:\n            the result of the query as a list of dictionaries.\n\n        Example:\n            &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n            &gt;&gt;&gt;     print(person)\n            {'id': 1772}\n        \"\"\"\n        ...\n\n    def ho_update(self, *args, update_all=False, **kwargs) -&gt; [Dict]:\n        \"\"\"Updates the elements defined by self.\n\n        Arguments:\n            **kwargs: the values to be updated {[field name:value]}\n            *args [Optional]: the list of columns names to return in the dictionary list for the updated elements. If args is ('*', ), returns all the columns values.\n            update_all: a boolean that must be set to True if there is no constraint on\n            self. Defaults to False.\n        \"\"\"\n        ...\n\n    def ho_delete(self, *args, delete_all=False) -&gt; [Dict]:\n        \"\"\"removes all elements from the set that correspond to the constraint.\n\n        Arguments:\n            *args [Optional]:\n        \"\"\"\n        ...\n\n    def ho_get(self, *args: List[str]) -&gt; 'Relation':\n        \"\"\"The get method allows you to fetch a singleton from the database.\n        It garantees that the constraint references one and only one tuple.\n\n        Arguments:\n            args (List[str]): list of fields names.\\\n            If ommitted, all the values of the row retreived from the database\\\n            are set for the self object.\\\n            Otherwise, only the values listed in the `args` parameter are set.\n\n        Returns:\n            Relation: the object retreived from the database.\n\n        Raises:\n            ExpectedOneError: an exception is raised if no or more than one element is found.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n            &gt;&gt;&gt; type(gaston) is Person\n            True\n            &gt;&gt;&gt; gaston.id\n            (int4) NOT NULL (id = 1772)\n            &gt;&gt;&gt; str(gaston.id)\n            '1772'\n            &gt;&gt;&gt; gaston.id.value\n            1772\n        \"\"\"\n        ...\n\n    def ho_is_set(self):\n        \"\"\"Return True if one field at least is set or if self has been\n        constrained by at least one of its foreign keys or self is the\n        result of a combination of Relations (using set operators).\n        \"\"\"\n        ...\n\n    def ho_distinct(self):\n        \"\"\"Set distinct for the SQL request.\"\"\"\n        ...\n\n    def ho_unaccent(self, *fields_names):\n        \"Sets unaccent for each field listed in fields_names\"\n        ...\n\n    def ho_order_by(self, _order_):\n        \"\"\"Sets the SQL `order by` according to the \"_order_\" string passed\n\n        Example :\n            personnes.ho_order_by(\"field1, field2 desc, field3, field4 desc\")\n        \"\"\"\n        ...\n\n    def ho_limit(self, _limit_):\n        \"\"\"Sets the limit for the next SQL select request.\"\"\"\n        ...\n\n    def ho_offset(self, _offset_):\n        \"\"\"Set the offset for the next SQL select request.\"\"\"\n        ...\n\n    def ho_count(self, limit=0):\n        \"\"\"Returns the number of tuples matching the intention in the relation.\n        \"\"\"\n        ...\n\n    def ho_is_empty(self):\n        \"\"\"Returns True if the self is an empty set, False otherwise.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation-functions","title":"Functions","text":""},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_count","title":"<code>ho_count(limit=0)</code>","text":"<p>Returns the number of tuples matching the intention in the relation.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_count(self, limit=0):\n    \"\"\"Returns the number of tuples matching the intention in the relation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_delete","title":"<code>ho_delete(*args, delete_all=False)</code>","text":"<p>removes all elements from the set that correspond to the constraint.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>[Optional]</code> <code>()</code> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_delete(self, *args, delete_all=False) -&gt; [Dict]:\n    \"\"\"removes all elements from the set that correspond to the constraint.\n\n    Arguments:\n        *args [Optional]:\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_distinct","title":"<code>ho_distinct()</code>","text":"<p>Set distinct for the SQL request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_distinct(self):\n    \"\"\"Set distinct for the SQL request.\"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_get","title":"<code>ho_get(*args)</code>","text":"<p>The get method allows you to fetch a singleton from the database. It garantees that the constraint references one and only one tuple.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>list of fields names.            If ommitted, all the values of the row retreived from the database            are set for the self object.            Otherwise, only the values listed in the <code>args</code> parameter are set.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>Relation</code> <code>Relation</code> <p>the object retreived from the database.</p> <p>Raises:</p> Type Description <code>ExpectedOneError</code> <p>an exception is raised if no or more than one element is found.</p> Example <p>gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get() type(gaston) is Person True gaston.id (int4) NOT NULL (id = 1772) str(gaston.id) '1772' gaston.id.value 1772</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_get(self, *args: List[str]) -&gt; 'Relation':\n    \"\"\"The get method allows you to fetch a singleton from the database.\n    It garantees that the constraint references one and only one tuple.\n\n    Arguments:\n        args (List[str]): list of fields names.\\\n        If ommitted, all the values of the row retreived from the database\\\n        are set for the self object.\\\n        Otherwise, only the values listed in the `args` parameter are set.\n\n    Returns:\n        Relation: the object retreived from the database.\n\n    Raises:\n        ExpectedOneError: an exception is raised if no or more than one element is found.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n        &gt;&gt;&gt; type(gaston) is Person\n        True\n        &gt;&gt;&gt; gaston.id\n        (int4) NOT NULL (id = 1772)\n        &gt;&gt;&gt; str(gaston.id)\n        '1772'\n        &gt;&gt;&gt; gaston.id.value\n        1772\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_insert","title":"<code>ho_insert(*args)</code>","text":"<p>Insert a new tuple into the Relation.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>A dictionary containing the data inserted.</p> Example <p>gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert() print(gaston)</p> Note <p>It is not possible to insert more than one row with the ho_insert method</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_insert(self, *args: List[str]) -&gt; Dict:\n    \"\"\"Insert a new tuple into the Relation.\n\n    Returns:\n        Dict: A dictionary containing the data inserted.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n        &gt;&gt;&gt; print(gaston)\n        {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n    Note:\n        It is not possible to insert more than one row with the ho_insert method\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_is_empty","title":"<code>ho_is_empty()</code>","text":"<p>Returns True if the self is an empty set, False otherwise.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_empty(self):\n    \"\"\"Returns True if the self is an empty set, False otherwise.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_is_set","title":"<code>ho_is_set()</code>","text":"<p>Return True if one field at least is set or if self has been constrained by at least one of its foreign keys or self is the result of a combination of Relations (using set operators).</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_set(self):\n    \"\"\"Return True if one field at least is set or if self has been\n    constrained by at least one of its foreign keys or self is the\n    result of a combination of Relations (using set operators).\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_limit","title":"<code>ho_limit(_limit_)</code>","text":"<p>Sets the limit for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_limit(self, _limit_):\n    \"\"\"Sets the limit for the next SQL select request.\"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_offset","title":"<code>ho_offset(_offset_)</code>","text":"<p>Set the offset for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_offset(self, _offset_):\n    \"\"\"Set the offset for the next SQL select request.\"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_order_by","title":"<code>ho_order_by(_order_)</code>","text":"<p>Sets the SQL <code>order by</code> according to the \"order\" string passed</p> Example <p>personnes.ho_order_by(\"field1, field2 desc, field3, field4 desc\")</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_order_by(self, _order_):\n    \"\"\"Sets the SQL `order by` according to the \"_order_\" string passed\n\n    Example :\n        personnes.ho_order_by(\"field1, field2 desc, field3, field4 desc\")\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_select","title":"<code>ho_select(*args)</code>","text":"<p>Gets the set of values correponding to the constraint attached to self. This method is a generator.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>List[str]</code> <p>the fields names of the returned attributes. If omitted, all the fields are returned.</p> <code>()</code> <p>Yields:</p> Type Description <code>[Dict]</code> <p>the result of the query as a list of dictionaries.</p> Example <p>for person in Person(last_name=('like', 'La%')).ho_select('id'):     print(person)</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_select(self, *args: List[str]) -&gt; [Dict]:\n    \"\"\"Gets the set of values correponding to the constraint attached to self.\n    This method is a generator.\n\n    Arguments:\n        *args: the fields names of the returned attributes. If omitted,\n            all the fields are returned.\n\n    Yields:\n        the result of the query as a list of dictionaries.\n\n    Example:\n        &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n        &gt;&gt;&gt;     print(person)\n        {'id': 1772}\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_unaccent","title":"<code>ho_unaccent(*fields_names)</code>","text":"<p>Sets unaccent for each field listed in fields_names</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_unaccent(self, *fields_names):\n    \"Sets unaccent for each field listed in fields_names\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_update","title":"<code>ho_update(*args, update_all=False, **kwargs)</code>","text":"<p>Updates the elements defined by self.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>the values to be updated {[field name:value]}</p> <code>{}</code> <code>*args</code> <code>[Optional]</code> <p>the list of columns names to return in the dictionary list for the updated elements. If args is ('*', ), returns all the columns values.</p> <code>()</code> <code>update_all</code> <p>a boolean that must be set to True if there is no constraint on</p> <code>False</code> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_update(self, *args, update_all=False, **kwargs) -&gt; [Dict]:\n    \"\"\"Updates the elements defined by self.\n\n    Arguments:\n        **kwargs: the values to be updated {[field name:value]}\n        *args [Optional]: the list of columns names to return in the dictionary list for the updated elements. If args is ('*', ), returns all the columns values.\n        update_all: a boolean that must be set to True if there is no constraint on\n        self. Defaults to False.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation","title":"<code>Relation</code>","text":"<p>Used as a base class for the classes generated by <code>Model.get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;</code>_.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>the arguments names must correspond to the columns names of the relation.</p> <code>{}</code> <p>Raises:</p> Type Description <code>UnknownAttributeError</code> <p>If the name of an argument doesn't match a column name in the relation considered.</p> <p>Examples:</p> <p>You can generate a class for any relation in your database:     &gt;&gt;&gt; from half_orm.model import Model     &gt;&gt;&gt; model = Model('halftest')     &gt;&gt;&gt; class Person(model.get_relation_class('actor.person')):     &gt;&gt;&gt;     # your code</p> <p>To define a set of data in your relation at instantiation:     &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston')     &gt;&gt;&gt; all_names_starting_with_la = Person(last_name=('ilike', 'la%'))</p> <p>Or to constrain an instantiated object via its            <code>Fields &lt;#half_orm.field.Field&gt;</code>_:     &gt;&gt;&gt; person = Person()     &gt;&gt;&gt; person.birth_date = ('&gt;', '1970-01-01')</p> <p>Raises an <code>UnknownAttributeError &lt;#half_orm.relation_errors.UnknownAttributeError&gt;</code>_:     &gt;&gt;&gt; Person(lost_name='Lagaffe')     [...]UnknownAttributeError: ERROR! Unknown attribute: {'lost_name'}.</p> Source code in <code>half_orm/relation.py</code> <pre><code>class Relation:\n    \"\"\"Used as a base class for the classes generated by\n    `Model.get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;`_.\n\n    Args:\n        **kwargs: the arguments names must correspond to the columns names of the relation.\n\n    Raises:\n        UnknownAttributeError: If the name of an argument doesn't match a column name in the\n            relation considered.\n\n    Examples:\n        You can generate a class for any relation in your database:\n            &gt;&gt;&gt; from half_orm.model import Model\n            &gt;&gt;&gt; model = Model('halftest')\n            &gt;&gt;&gt; class Person(model.get_relation_class('actor.person')):\n            &gt;&gt;&gt;     # your code\n\n        To define a set of data in your relation at instantiation:\n            &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston')\n            &gt;&gt;&gt; all_names_starting_with_la = Person(last_name=('ilike', 'la%'))\n\n        Or to constrain an instantiated object via its\\\n            `Fields &lt;#half_orm.field.Field&gt;`_:\n            &gt;&gt;&gt; person = Person()\n            &gt;&gt;&gt; person.birth_date = ('&gt;', '1970-01-01')\n\n        Raises an `UnknownAttributeError &lt;#half_orm.relation_errors.UnknownAttributeError&gt;`_:\n            &gt;&gt;&gt; Person(lost_name='Lagaffe')\n            [...]UnknownAttributeError: ERROR! Unknown attribute: {'lost_name'}.\n    \"\"\"\n    _ho_fields_aliases = {}\n    _rels_ids = {}\n\n    def __init__(self, **kwargs):\n        _fqrn = \"\"\n        \"\"\"The names of the arguments must correspond to the names of the columns in the relation.\n        \"\"\"\n        module = __import__(self.__module__, globals(), locals(), ['FKEYS_PROPERTIES', 'FKEYS'], 0)\n        #TODO: remove in release 1.0.0\n        if hasattr(module, 'FKEYS_PROPERTIES') or hasattr(module, 'FKEYS'):\n            mod_fkeys = utils.Color.bold(module.__name__ + '.FKEYS')\n            err = f'''{mod_fkeys} variable is no longer supported!\\n'''\n            err += f'''\\tUse the \"{utils.Color.bold(self.__class__.__name__ + '.Fkeys')}\"''' + \\\n                ''' class attribute instead.\\n'''\n            raise DeprecationWarning(err)\n        self._ho_fk_loop = set()\n        self._ho_fields = {}\n        self._ho_pkey = {}\n        self._ho_fkeys = OrderedDict()\n        self._ho_fkeys_attr = set()\n        self._ho_join_to = {}\n        self._ho_is_singleton = False\n        self._ho_only = False\n        self._ho_neg = False\n        self._ho_set_fields()\n        self._ho_set_fkeys()\n        self._ho_query = \"\"\n        self._ho_query_type = None\n        self._ho_sql_query = []\n        self._ho_sql_values = []\n        self._ho_set_operators = _SetOperators(self)\n        self._ho_select_params = {}\n        self._ho_id_cast = None\n        self._ho_mogrify = False\n        self._ho_check_colums(*kwargs.keys())\n        _ = {self.__dict__[field_name].set(value)\n            for field_name, value in kwargs.items() if value is not None}\n        self._ho_isfrozen = True\n\n    def __call__(self, **kwargs):\n        return self.__class__(**kwargs)\n\n    def _ho_check_colums(self, *args):\n        \"Check that the args are actual columns of the relation\"\n        columns = {elt.replace('\"', '') for elt in args}\n        if columns.intersection(self._ho_fields.keys()) != columns:\n            diff = columns.difference(self._ho_fields.keys())\n            raise relation_errors.UnknownAttributeError(', '.join([elt for elt in args if elt in diff]))\n\n    #@utils.trace\n    def ho_insert(self, *args) -&gt; '[dict]':\n        \"\"\"Insert a new tuple into the Relation.\n\n        Returns:\n            [dict]: A singleton containing the data inserted.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n            &gt;&gt;&gt; print(gaston)\n            {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n        Note:\n            It is not possible to insert more than one row with the insert method\n        \"\"\"\n        _ = args and args != ('*',) and self._ho_check_colums(*args)\n        query_template = \"insert into {} ({}) values ({})\"\n        self._ho_query_type = 'insert'\n        fields_names, values, fk_fields, fk_query, fk_values = self.__what()\n        what_to_insert = [\"%s\" for _ in range(len(values))]\n        if fk_fields:\n            fields_names += fk_fields\n            what_to_insert += fk_query\n            values += fk_values\n        query = query_template.format(self._qrn, \", \".join(fields_names), \", \".join(what_to_insert))\n        returning = args or ['*']\n        if returning:\n            query = self._ho_add_returning(query, *returning)\n        with self.__execute(query, tuple(values)) as cursor:\n            res = [dict(elt) for elt in cursor.fetchall()] or [{}]\n            return res[0]\n\n    #@utils.trace\n    def ho_select(self, *args):\n        \"\"\"Gets the set of values correponding to the constraint attached to the object.\n        This method is a generator.\n\n        Arguments:\n            *args: the fields names of the returned attributes. If omitted,\n                all the fields are returned.\n\n        Yields:\n            the result of the query as a dictionary.\n\n        Example:\n            &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n            &gt;&gt;&gt;     print(person)\n            {'id': 1772}\n        \"\"\"\n        self._ho_check_colums(*args)\n        query, values = self._ho_prep_select(*args)\n        with self.__execute(query, values) as cursor:\n            for elt in cursor:\n                yield dict(elt)\n\n    #@utils.trace\n    def ho_get(self, *args: List[str]) -&gt; 'Relation':\n        \"\"\"The get method allows you to fetch a singleton from the database.\n        It garantees that the constraint references one and only one tuple.\n\n        Args:\n            args (List[str]): list of fields names.\\\n            If ommitted, all the values of the row retreived from the database\\\n            are set for the self object.\\\n            Otherwise, only the values listed in the `args` parameter are set.\n\n        Returns:\n            Relation: the object retreived from the database.\n\n        Raises:\n            ExpectedOneError: an exception is raised if no or more than one element is found.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n            &gt;&gt;&gt; type(gaston) is Person\n            True\n            &gt;&gt;&gt; gaston.id\n            (int4) NOT NULL (id = 1772)\n            &gt;&gt;&gt; str(gaston.id)\n            '1772'\n            &gt;&gt;&gt; gaston.id.value\n            1772\n        \"\"\"\n        self._ho_check_colums(*args)\n        self.ho_limit(2)\n        _count = self.ho_count()\n        if _count != 1:\n            raise relation_errors.ExpectedOneError(self, _count)\n        self._ho_is_singleton = True\n        ret = self(**(next(self.ho_select(*args))))\n        ret._ho_is_singleton = True\n        return ret\n\n    #@utils.trace\n    def __fkey_where(self, where, values):\n        _, _, fk_fields, fk_query, fk_values = self.__what()\n        if fk_fields:\n            fk_where = \" and \".join([f\"({a}) in ({b})\" for a, b in zip(fk_fields, fk_query)])\n            if fk_where:\n                where = f\"{where} and {fk_where}\"\n            values += fk_values\n        return where, values\n\n    #@utils.trace\n    def ho_update(self, *args, update_all=False, **kwargs):\n        \"\"\"\n        kwargs represents the values to be updated {[field name:value]}\n        The object self must be set unless update_all is True.\n        The constraints of self are updated with kwargs.\n        \"\"\"\n        if not (self.ho_is_set() or update_all):\n            raise RuntimeError(\n                f'Attempt to update all rows of {self.__class__.__name__}'\n                ' without update_all being set to True!')\n\n        _ = args and args != ('*',) and self._ho_check_colums(*args)\n        self._ho_check_colums(*(kwargs.keys()))\n        update_args = {key: value for key, value in kwargs.items() if value is not None}\n        if not update_args:\n            return None # no new value update. Should we raise an error here?\n\n        query_template = \"update {} set {} {}\"\n        what, where, values = self.__update_args(**update_args)\n        where, values = self.__fkey_where(where, values)\n        query = query_template.format(self._qrn, what, where)\n        if args:\n            query = self._ho_add_returning(query, *args)\n        with self.__execute(query, tuple(values)) as cursor:\n            for field_name, value in update_args.items():\n                self._ho_fields[field_name].set(value)\n            if args:\n                return [dict(elt) for elt in cursor.fetchall()]\n        return None\n\n    #@utils.trace\n    def ho_delete(self, *args, delete_all=False):\n        \"\"\"Removes a set of tuples from the relation.\n        To empty the relation, delete_all must be set to True.\n        \"\"\"\n        _ = args and args != ('*',) and self._ho_check_colums(*args)\n        if not (self.ho_is_set() or delete_all):\n            raise RuntimeError(\n                f'Attempt to delete all rows from {self.__class__.__name__}'\n                ' without delete_all being set to True!')\n        query_template = \"delete from {} {}\"\n        _, values = self.__prep_query(query_template)\n        self._ho_query_type = 'delete'\n        _, where, _ = self.__where_args()\n        where, values = self.__fkey_where(where, values)\n        if where:\n            where = f\" where {where}\"\n        query = f\"delete from {self._qrn} {where}\"\n        if args:\n            query = self._ho_add_returning(query, *args)\n        with self.__execute(query, tuple(values)) as cursor:\n            if args:\n                return [dict(elt) for elt in cursor.fetchall()]\n        return None\n\n    def _ho_add_returning(self, query, *args) -&gt; str:\n        \"Adds the SQL returning clause to the query\"\n        if args:\n            returning = ', '.join(args)\n            return f'{query} returning {returning}'\n        return query\n\n    def ho_unfreeze(self):\n        \"Allow to add attributs to a relation\"\n        self._ho_isfrozen = False\n\n    def ho_freeze(self):\n        \"set _ho_isfrozen to True.\"\n        self._ho_isfrozen = True\n\n    def __setattr__(self, key, value):\n        \"\"\"Sets an attribute as long as _ho_isfrozen is False\n\n        The foreign keys properties are not detected by hasattr\n        hence the line `_ = self.__dict__[key]` to double check if\n        the attribute is really present.\n        \"\"\"\n        if not hasattr(self, '_ho_isfrozen'):\n            object.__setattr__(self, '_ho_isfrozen', False)\n        if self._ho_isfrozen and not hasattr(self, key):\n            raise relation_errors.IsFrozenError(self.__class__, key)\n        if self.__dict__.get(key) and isinstance(self.__dict__[key], Field):\n            self.__dict__[key].set(value)\n            return\n        object.__setattr__(self, key, value)\n\n    #@utils.trace\n    def __execute(self, query, values):\n        return self._ho_model.execute_query(query, values, self._ho_mogrify)\n\n    @property\n    def ho_id(self):\n        \"\"\"Return the _ho_id_cast or the id of the relation.\n        \"\"\"\n        return self._ho_id_cast or id(self)\n\n    @property\n    def ho_only(self):\n        \"Returns the value of self._ho_only\"\n        return self._ho_only\n    @ho_only.setter\n    def ho_only(self, value):\n        \"\"\"Set the value of self._ho_only. Restrict the values of a query to\n        the elements of the relation (no inherited values).\n        \"\"\"\n        if value not in {True, False}:\n            raise ValueError(f'{value} is not a bool!')\n        self._ho_only = value\n\n    def __py_field_name(self, name, field_num):\n        py_name = self._ho_fields_aliases.get(name, name)\n        error = utils.check_attribute_name(py_name)\n        if error is not None:\n            utils.warning(f\"{error}\\n\", 'HALFORM')\n            return f'column{field_num}'\n        return py_name\n\n    def _ho_set_fields(self):\n        \"\"\"Initialise the fields of the relation.\"\"\"\n        _fields_metadata = self._ho_model._fields_metadata(self._t_fqrn)\n\n        for field_name, f_metadata in _fields_metadata.items():\n            field = Field(field_name, self, f_metadata)\n            field_name = self.__py_field_name(field_name, f_metadata['fieldnum'])\n            self._ho_fields[field_name] = field\n            setattr(self, field_name, field)\n            if field._is_part_of_pk():\n                self._ho_pkey[field_name] = field\n\n    def _ho_set_fkeys(self):\n        \"\"\"Initialisation of the foreign keys of the relation\"\"\"\n        #pylint: disable=import-outside-toplevel\n        from half_orm.fkey import FKey\n\n        _fkeys_metadata = self._ho_model._fkeys_metadata(self._t_fqrn)\n        for fkeyname, f_metadata in _fkeys_metadata.items():\n            self._ho_fkeys[fkeyname] = FKey(fkeyname, self, *f_metadata)\n        if hasattr(self.__class__, 'Fkeys') and not self._ho_fkeys_properties:\n            for key, value in self.Fkeys.items():\n                try:\n                    if key != '': # we skip empty keys\n                        setattr(self, key, self._ho_fkeys[value])\n                        self._ho_fkeys_attr.add(key)\n                except KeyError as exp:\n                    raise relation_errors.WrongFkeyError(self, value) from exp\n        self._ho_fkeys_properties = True\n\n    @classmethod\n    def _ho_dataclass_name(cls):\n        database, schema, relation = cls._t_fqrn\n        schemaname = ''.join([elt.capitalize() for elt in schema.split('.')])\n        relationname = ''.join([elt.capitalize() for elt in relation.split('_')])\n        return f'DC_{schemaname}{relationname}'\n\n    def ho_dict(self):\n        \"\"\"Returns a dictionary containing only the values of the fields\n        that are set.\"\"\"\n        return {key:field.value for key, field in self._ho_fields.items() if field.is_set()}\n\n    def keys(self):\n        return self._ho_fields.keys()\n\n    def items(self):\n        for key, field in self._ho_fields.items():\n            yield key, field.value\n\n    def __getitem__(self, key):\n        return self._ho_fields[key].value\n\n    def __to_dict_val_comp(self):\n        \"\"\"Returns a dictionary containing the values and comparators of the fields\n        that are set.\"\"\"\n        return {key:(field._comp(), field.value) for key, field in\n                self._ho_fields.items() if field.is_set()}\n\n    def __repr__(self):\n\n        fkeys_usage = \"\"\"\\\nTo use the foreign keys as direct attributes of the class, copy/paste the Fkeys below into\nyour code as a class attribute and replace the empty string key(s) with the alias(es) you\nwant to use. The aliases must be unique and different from any of the column names. Empty\nstring keys are ignored.\n\nFkeys = {\"\"\"\n\n        rel_kind = self._ho_kind\n        ret = []\n        database, schema, relation = self._t_fqrn\n        ret.append(f\"DATABASE: {database}\")\n        ret.append(f\"SCHEMA: {schema}\")\n        ret.append(f\"{rel_kind.upper()}: {relation}\\n\")\n        if self._ho_metadata['description']:\n            ret.append(f\"DESCRIPTION:\\n{self._ho_metadata['description']}\")\n        ret.append('FIELDS:')\n        mx_fld_n_len = 0\n        for field_name in self._ho_fields.keys():\n            mx_fld_n_len = max(mx_fld_n_len, len(field_name))\n        for field_name, field in self._ho_fields.items():\n            field_desc = f\"- {field_name}:{' ' * (mx_fld_n_len + 1 - len(field_name))}{repr(field)}\"\n            error = utils.check_attribute_name(field.name)\n            if error and not field.name in self._ho_fields_aliases:\n                field_desc = f'{field_desc} --- FIX ME! {error}'\n            ret.append(field_desc)\n        ret.append('')\n        pkey = self._ho_model._pkey_constraint(self._t_fqrn)\n        if pkey:\n            ret.append(f\"PRIMARY KEY ({', '.join(pkey)})\")\n        for uniq in self._ho_model._unique_constraints_list(self._t_fqrn):\n            ret.append(f\"UNIQUE CONSTRAINT ({', '.join(uniq)})\")\n        if self._ho_fkeys.keys():\n            plur = 'S' if len(self._ho_fkeys) &gt; 1 else ''\n            ret.append(f'FOREIGN KEY{plur}:')\n            for fkey in self._ho_fkeys.values():\n                ret.append(repr(fkey))\n            ret.append('')\n            if not hasattr(self, 'Fkeys'):\n                ret.append(fkeys_usage)\n                for fkey in self._ho_fkeys:\n                    ret.append(f\"    '': '{fkey}',\")\n            else:\n                ret.append(\"Fkeys = {\")\n                for key, value in self.Fkeys.items():\n                    ret.append(f\"    '{key}': '{value}',\")\n            ret.append('}')\n        return '\\n'.join(ret)\n\n    def ho_is_set(self):\n        \"\"\"Return True if one field at least is set or if self has been\n        constrained by at least one of its foreign keys or self is the\n        result of a combination of Relations (using set operators).\n        \"\"\"\n        joined_to = False\n        for _, jt_ in self._ho_join_to.items():\n            jt_id = id(jt_)\n            if jt_id in self._ho_fk_loop:\n                raise RuntimeError(\"Can't set Fkey on the same object\")\n            self._ho_fk_loop.add(jt_id)\n            joined_to |= jt_.ho_is_set()\n        self._ho_fk_loop = set()\n        return (joined_to or bool(self._ho_set_operators.operator) or bool(self._ho_neg) or\n                bool({field for field in self._ho_fields.values() if field.is_set()}))\n\n    def __get_set_fields(self):\n        \"\"\"Returns a list containing only the fields that are set.\"\"\"\n        return [field for field in self._ho_fields.values() if field.is_set()]\n\n    #@utils.trace\n    def __walk_op(self, rel_id_, out=None, _fields_=None):\n        \"\"\"Walk the set operators tree and return a list of SQL where\n        representation of the query with a list of the fields of the query.\n        \"\"\"\n        if out is None:\n            out = []\n            _fields_ = []\n        if self._ho_set_operators.operator:\n            if self._ho_neg:\n                out.append(\"not (\")\n            out.append(\"(\")\n            left = self._ho_set_operators.left\n            left._ho_query_type = self._ho_query_type\n            left.__walk_op(rel_id_, out, _fields_)\n            if self._ho_set_operators.right is not None:\n                out.append(f\" {self._ho_set_operators.operator}\\n    \")\n                right = self._ho_set_operators.right\n                right._ho_query_type = self._ho_query_type\n                right.__walk_op(rel_id_, out, _fields_)\n            out.append(\")\")\n            if self._ho_neg:\n                out.append(\")\")\n        else:\n            out.append(self.__where_repr(rel_id_))\n            _fields_ += self.__get_set_fields()\n        return out, _fields_\n\n    def _ho_sql_id(self):\n        \"\"\"Returns the FQRN as alias for the sql query.\"\"\"\n        return f\"{self._qrn} as r{self.ho_id}\"\n\n    #@utils.trace\n    def __get_from(self, orig_rel=None, deja_vu=None):\n        \"\"\"Constructs the _ho_sql_query and gets the _ho_sql_values for self.\"\"\"\n        if deja_vu is None:\n            orig_rel = self\n            self._ho_sql_query = [self._ho_sql_id()]\n            deja_vu = {self.ho_id:[(self, None)]}\n        for fkey, fk_rel in self._ho_join_to.items():\n            fk_rel._ho_query_type = orig_rel._ho_query_type\n            if fk_rel.ho_id not in deja_vu:\n                deja_vu[fk_rel.ho_id] = []\n            # elif (fk_rel, fkey) in deja_vu[fk_rel.ho_id] or fk_rel is orig_rel:\n            #     #sys.stderr.write(f\"d\u00e9j\u00e0 vu in from! {fk_rel._fqrn}\\n\")\n            #     continue\n            fk_rel.__get_from(orig_rel, deja_vu)\n            deja_vu[fk_rel.ho_id].append((fk_rel, fkey))\n            _, where, values = fk_rel.__where_args()\n            where = f\" and\\n {where}\"\n            orig_rel._ho_sql_query.insert(1, f'\\n  join {fk_rel._ho_sql_id()} on\\n   ')\n            orig_rel._ho_sql_query.insert(2, fkey._join_query(self))\n            orig_rel._ho_sql_query.append(where)\n            orig_rel._ho_sql_values += values\n\n    #@utils.trace\n    def __where_repr(self, rel_id_):\n        where_repr = []\n        for field in self.__get_set_fields():\n            where_repr.append(field._where_repr(self._ho_query_type, rel_id_))\n        where_repr = ' and '.join(where_repr) or '1 = 1'\n        ret = f\"({where_repr})\"\n        if self._ho_neg:\n            ret = f\"not ({ret})\"\n        return ret\n\n    #@utils.trace\n    def __where_args(self, *args):\n        \"\"\"Returns the what, where and values needed to construct the queries.\n        \"\"\"\n        rel_id_ = self.ho_id\n        what = f'r{rel_id_}.*'\n        if args:\n            what = ', '.join([f'r{rel_id_}.{arg}' for arg in args])\n        s_where, set_fields = self.__walk_op(rel_id_)\n        s_where = ''.join(s_where)\n        return what, s_where, set_fields\n\n    #@utils.trace\n    def __prep_query(self, query_template, *args):\n        \"\"\"Prepare the SQL query to be executed.\"\"\"\n        from half_orm.fkey import FKey\n\n        self._ho_sql_values = []\n        self._ho_query_type = 'select'\n        what, where, values = self.__where_args(*args)\n        where = f\"\\nwhere\\n    {where}\"\n        self.__get_from()\n        # remove duplicates\n        for idx, elt in reversed(list(enumerate(self._ho_sql_query))):\n            if elt.find('\\n  join ') == 0 and self._ho_sql_query.count(elt) &gt; 1:\n                self._ho_sql_query[idx] = '  and\\n'\n        # check that fkeys are fkeys\n        for fkey_name in self._ho_fkeys_attr:\n            fkey_cls = self.__dict__[fkey_name].__class__\n            if fkey_cls != FKey:\n                raise RuntimeError(\n                    f'self.{fkey_name} is not a FKey (got a {fkey_cls.__name__} object instead).\\n'\n                    f'- use: self.{fkey_name}.set({fkey_cls.__name__}(...))\\n'\n                    f'- not: self.{fkey_name} = {fkey_cls.__name__}(...)'\n                    )\n        return (\n            query_template.format(\n                what,\n                self._ho_only and \"only\" or \"\",\n                ' '.join(self._ho_sql_query), where),\n            values)\n\n    #@utils.trace\n    def _ho_prep_select(self, *args):\n        distinct = self._ho_select_params.get('distinct', '')\n        query_template = f\"select\\n {distinct} {{}}\\nfrom\\n  {{}} {{}}\\n  {{}}\"\n        query, values = self.__prep_query(query_template, *args)\n        values = tuple(self._ho_sql_values + values)\n        if 'order_by' in self._ho_select_params:\n            query = f\"{query} order by {self._ho_select_params['order_by']}\"\n        if 'limit' in self._ho_select_params:\n            query = f\"{query} limit {self._ho_select_params['limit']}\"\n        if 'offset' in self._ho_select_params:\n            query = f\"{query} offset {self._ho_select_params['offset']}\"\n        return query, values\n\n    def ho_distinct(self, dist=True):\n        \"\"\"Set distinct in SQL select request.\"\"\"\n        distinct = 'distinct'\n        if dist not in {True, False}:\n            raise ValueError('ho_distinct argument must be either True or False!')\n        if dist in {False, None}:\n            distinct = ''\n        self._ho_select_params['distinct'] = distinct\n        return self\n\n    def ho_unaccent(self, *fields_names):\n        \"Sets unaccent for each field listed in fields_names\"\n        for field_name in fields_names:\n            if not isinstance(self.__dict__[field_name], Field):\n                raise ValueError(f'{field_name} is not a Field!')\n            self.__dict__[field_name].unaccent = True\n        return self\n\n    def ho_order_by(self, _order_):\n        \"\"\"Set SQL order by according to the \"order\" string passed\n\n        @order string example :\n        \"field1, field2 desc, field3, field4 desc\"\n        \"\"\"\n        self._ho_select_params['order_by'] = _order_\n        return self\n\n    def ho_limit(self, _limit_):\n        \"\"\"Set limit for the next SQL select request.\"\"\"\n        if _limit_:\n            self._ho_select_params['limit'] = int(_limit_)\n        elif 'limit' in self._ho_select_params:\n            self._ho_select_params.pop('limit')\n        return self\n\n    def ho_offset(self, _offset_):\n        \"\"\"Set the offset for the next SQL select request.\"\"\"\n        self._ho_select_params['offset'] = int(_offset_)\n        return self\n\n    def ho_mogrify(self):\n        \"\"\"Prints the select query.\"\"\"\n        self._ho_mogrify = True\n        return self\n\n    # @utils.trace\n    def ho_count(self, *args):\n        \"\"\"Returns the number of tuples matching the intention in the relation.\n        \"\"\"\n        self._ho_query = \"select\"\n        query, values = self._ho_prep_select(*args)\n        query = f'select\\n  count(*) from ({query}) as ho_count'\n        return self.__execute(query, values).fetchone()['count']\n\n    def ho_is_empty(self):\n        \"\"\"Returns True if the relation is empty, False otherwise.\n        \"\"\"\n        self.ho_limit(1)\n        return self.ho_count() == 0\n\n    #@utils.trace\n    def __update_args(self, **kwargs):\n        \"\"\"Returns the what, where an values for the update query.\"\"\"\n        what_fields = []\n        new_values = []\n        self._ho_query_type = 'update'\n        _, where, values = self.__where_args()\n        where = f\" where {where}\"\n        for field_name, new_value in kwargs.items():\n            what_fields.append(self._ho_fields[field_name].name)\n            new_values.append(new_value)\n        what = \", \".join([f'\"{elt}\" = %s' for elt in what_fields])\n        return what, where, new_values + values\n\n    #@utils.trace\n    def __what(self):\n        \"\"\"Returns the constrained fields and foreign keys.\n        \"\"\"\n        set_fields = self.__get_set_fields()\n        fields_names = [\n            f'\"{field.name}\"' for field in self._ho_fields.values() if field.is_set()]\n        fk_fields = []\n        fk_queries = ''\n        fk_values = []\n        for fkey in self._ho_fkeys.values():\n            fk_prep_select = fkey._fkey_prep_select()\n            if fk_prep_select is not None:\n                fk_values += list(fkey.values()[0])\n                fk_fields += fk_prep_select[0]\n                fk_queries = [\"%s\" for _ in range(len(fk_values))]\n\n        return fields_names, set_fields, fk_fields, fk_queries, fk_values\n\n    @classmethod\n    def ho_description(cls):\n        \"\"\"Returns the description (comment) of the relation\n        \"\"\"\n        description = cls._ho_metadata['description']\n        if description:\n            description = description.strip()\n        return description or 'No description available'\n\n    def ho_cast(self, qrn):\n        \"\"\"Cast a relation into another relation.\n\n        TODO: check that qrn inherits self (or is inherited by self)?\n        \"\"\"\n        new = self._ho_model._import_class(qrn)(**self.__to_dict_val_comp())\n        new._ho_id_cast = id(self)\n        new._ho_join_to = self._ho_join_to\n        new._ho_set_operators = self._ho_set_operators\n        return new\n\n    def __set__op__(self, operator=None, right=None):\n        \"\"\"Si l'op\u00e9rateur du self est d\u00e9j\u00e0 d\u00e9fini, il faut aller modifier\n        l'op\u00e9rateur du right ???\n        On cr\u00e9e un nouvel objet sans contrainte et on a left et right et op\u00e9rateur\n        \"\"\"\n        def check_fk(new, jt_list):\n            \"\"\"Sets the _ho_join_to dictionary for the new relation.\n            \"\"\"\n            for fkey, rel in jt_list.items():\n                if rel is self:\n                    rel = new\n                new._ho_join_to[fkey] = rel\n        new = self(**self.__to_dict_val_comp())\n        new._ho_id_cast = self._ho_id_cast\n        if operator:\n            new._ho_set_operators.left = self\n            new._ho_set_operators.operator = operator\n        dct_join = self._ho_join_to\n        if right is not None:\n            new._ho_set_operators.right = right\n            dct_join.update(right._ho_join_to)\n        check_fk(new, dct_join)\n        return new\n\n    def __and__(self, right):\n        return self.__set__op__(\"and\", right)\n    def __iand__(self, right):\n        self = self &amp; right\n        return self\n\n    def __or__(self, right):\n        return self.__set__op__(\"or\", right)\n    def __ior__(self, right):\n        self = self | right\n        return self\n\n    def __sub__(self, right):\n        return self.__set__op__(\"and not\", right)\n    def __isub__(self, right):\n        self = self - right\n        return self\n\n    def __neg__(self):\n        new = self.__set__op__(self._ho_set_operators.operator, self._ho_set_operators.right)\n        new._ho_neg = not self._ho_neg\n        return new\n\n    def __xor__(self, right):\n        return (self | right) - (self &amp; right)\n    def __ixor__(self, right):\n        self = self ^ right\n        return self\n\n    def __contains__(self, right):\n        return (right - self).ho_count() == 0\n\n    def __eq__(self, right):\n        if id(self) == id(right):\n            return True\n        return self in right and right in self\n\n    def __enter__(self):\n        \"\"\"Context management entry\n\n        Returns self in a transaction context.\n\n        Example usage:\n        with relation as rel:\n            rel.ho_update(col=new_val)\n\n        Equivalent to (in a transaction context):\n        rel = relation.ho_select()\n        for elt in rel:\n            new_elt = relation(**elt)\n            new_elt.ho_update(col=new_val)\n        \"\"\"\n        self.ho_transaction._enter(self._ho_model)\n        return self\n\n    def __exit__(self, *__):\n        \"\"\"Context management exit\n\n        \"\"\"\n        self.ho_transaction._exit(self._ho_model)\n        return False\n\n    def __iter__(self):\n        query, values = self._ho_prep_select()\n        for elt in self.__execute(query, values):\n            yield dict(elt)\n\n    def __next__(self):\n        return next(self.ho_select())\n\n    # deprecated. To remove with release 1.0.0\n\n    @utils._ho_deprecated\n    def select(self, *args): # pragma: no cover\n        return self.ho_select(*args)\n\n    @utils._ho_deprecated\n    def insert(self, *args): # pragma: no cover\n        return self.ho_insert(*args)\n\n    @utils._ho_deprecated\n    def update(self, *args, update_all=False, **kwargs): # pragma: no cover\n        return self.ho_update(*args, update_all, **kwargs)\n\n    @utils._ho_deprecated\n    def delete(self, *args, delete_all=False): # pragma: no cover\n        return self.ho_delete(*args, delete_all)\n\n    @utils._ho_deprecated\n    def get(self, *args): # pragma: no cover\n        return self.ho_get(*args)\n\n    @utils._ho_deprecated\n    def unaccent(self, *fields_names): # pragma: no cover\n        return self.ho_unaccent(*fields_names)\n\n    @utils._ho_deprecated\n    def order_by(self, _order_): # pragma: no cover\n        return self.ho_order_by(_order_)\n\n    @utils._ho_deprecated\n    def limit(self, _limit_): # pragma: no cover\n        return self.ho_limit(_limit_)\n\n    @utils._ho_deprecated\n    def offset(self, _offset_): # pragma: no cover\n        return self.ho_offset(_offset_)\n\n    @utils._ho_deprecated\n    def _mogrify(self): # pragma: no cover\n        return self.ho_mogrify()\n\n    @utils._ho_deprecated\n    def count(self, *args): # pragma: no cover\n        return self.ho_count(*args)\n\n    @utils._ho_deprecated\n    def is_empty(self): # pragma: no cover\n        return self.ho_is_empty()\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation-attributes","title":"Attributes","text":""},{"location":"api/relation/#half_orm.relation.Relation.ho_id","title":"<code>ho_id</code>  <code>property</code>","text":"<p>Return the _ho_id_cast or the id of the relation.</p>"},{"location":"api/relation/#half_orm.relation.Relation.ho_only","title":"<code>ho_only</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the value of self._ho_only</p>"},{"location":"api/relation/#half_orm.relation.Relation-functions","title":"Functions","text":""},{"location":"api/relation/#half_orm.relation.Relation.__enter__","title":"<code>__enter__()</code>","text":"<p>Context management entry</p> <p>Returns self in a transaction context.</p> <p>Example usage: with relation as rel:     rel.ho_update(col=new_val)</p> <p>Equivalent to (in a transaction context): rel = relation.ho_select() for elt in rel:     new_elt = relation(**elt)     new_elt.ho_update(col=new_val)</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context management entry\n\n    Returns self in a transaction context.\n\n    Example usage:\n    with relation as rel:\n        rel.ho_update(col=new_val)\n\n    Equivalent to (in a transaction context):\n    rel = relation.ho_select()\n    for elt in rel:\n        new_elt = relation(**elt)\n        new_elt.ho_update(col=new_val)\n    \"\"\"\n    self.ho_transaction._enter(self._ho_model)\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__exit__","title":"<code>__exit__(*__)</code>","text":"<p>Context management exit</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __exit__(self, *__):\n    \"\"\"Context management exit\n\n    \"\"\"\n    self.ho_transaction._exit(self._ho_model)\n    return False\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__get_from","title":"<code>__get_from(orig_rel=None, deja_vu=None)</code>","text":"<p>Constructs the _ho_sql_query and gets the _ho_sql_values for self.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __get_from(self, orig_rel=None, deja_vu=None):\n    \"\"\"Constructs the _ho_sql_query and gets the _ho_sql_values for self.\"\"\"\n    if deja_vu is None:\n        orig_rel = self\n        self._ho_sql_query = [self._ho_sql_id()]\n        deja_vu = {self.ho_id:[(self, None)]}\n    for fkey, fk_rel in self._ho_join_to.items():\n        fk_rel._ho_query_type = orig_rel._ho_query_type\n        if fk_rel.ho_id not in deja_vu:\n            deja_vu[fk_rel.ho_id] = []\n        # elif (fk_rel, fkey) in deja_vu[fk_rel.ho_id] or fk_rel is orig_rel:\n        #     #sys.stderr.write(f\"d\u00e9j\u00e0 vu in from! {fk_rel._fqrn}\\n\")\n        #     continue\n        fk_rel.__get_from(orig_rel, deja_vu)\n        deja_vu[fk_rel.ho_id].append((fk_rel, fkey))\n        _, where, values = fk_rel.__where_args()\n        where = f\" and\\n {where}\"\n        orig_rel._ho_sql_query.insert(1, f'\\n  join {fk_rel._ho_sql_id()} on\\n   ')\n        orig_rel._ho_sql_query.insert(2, fkey._join_query(self))\n        orig_rel._ho_sql_query.append(where)\n        orig_rel._ho_sql_values += values\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__get_set_fields","title":"<code>__get_set_fields()</code>","text":"<p>Returns a list containing only the fields that are set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __get_set_fields(self):\n    \"\"\"Returns a list containing only the fields that are set.\"\"\"\n    return [field for field in self._ho_fields.values() if field.is_set()]\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__prep_query","title":"<code>__prep_query(query_template, *args)</code>","text":"<p>Prepare the SQL query to be executed.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __prep_query(self, query_template, *args):\n    \"\"\"Prepare the SQL query to be executed.\"\"\"\n    from half_orm.fkey import FKey\n\n    self._ho_sql_values = []\n    self._ho_query_type = 'select'\n    what, where, values = self.__where_args(*args)\n    where = f\"\\nwhere\\n    {where}\"\n    self.__get_from()\n    # remove duplicates\n    for idx, elt in reversed(list(enumerate(self._ho_sql_query))):\n        if elt.find('\\n  join ') == 0 and self._ho_sql_query.count(elt) &gt; 1:\n            self._ho_sql_query[idx] = '  and\\n'\n    # check that fkeys are fkeys\n    for fkey_name in self._ho_fkeys_attr:\n        fkey_cls = self.__dict__[fkey_name].__class__\n        if fkey_cls != FKey:\n            raise RuntimeError(\n                f'self.{fkey_name} is not a FKey (got a {fkey_cls.__name__} object instead).\\n'\n                f'- use: self.{fkey_name}.set({fkey_cls.__name__}(...))\\n'\n                f'- not: self.{fkey_name} = {fkey_cls.__name__}(...)'\n                )\n    return (\n        query_template.format(\n            what,\n            self._ho_only and \"only\" or \"\",\n            ' '.join(self._ho_sql_query), where),\n        values)\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__set__op__","title":"<code>__set__op__(operator=None, right=None)</code>","text":"<p>Si l'op\u00e9rateur du self est d\u00e9j\u00e0 d\u00e9fini, il faut aller modifier l'op\u00e9rateur du right ??? On cr\u00e9e un nouvel objet sans contrainte et on a left et right et op\u00e9rateur</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __set__op__(self, operator=None, right=None):\n    \"\"\"Si l'op\u00e9rateur du self est d\u00e9j\u00e0 d\u00e9fini, il faut aller modifier\n    l'op\u00e9rateur du right ???\n    On cr\u00e9e un nouvel objet sans contrainte et on a left et right et op\u00e9rateur\n    \"\"\"\n    def check_fk(new, jt_list):\n        \"\"\"Sets the _ho_join_to dictionary for the new relation.\n        \"\"\"\n        for fkey, rel in jt_list.items():\n            if rel is self:\n                rel = new\n            new._ho_join_to[fkey] = rel\n    new = self(**self.__to_dict_val_comp())\n    new._ho_id_cast = self._ho_id_cast\n    if operator:\n        new._ho_set_operators.left = self\n        new._ho_set_operators.operator = operator\n    dct_join = self._ho_join_to\n    if right is not None:\n        new._ho_set_operators.right = right\n        dct_join.update(right._ho_join_to)\n    check_fk(new, dct_join)\n    return new\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__setattr__","title":"<code>__setattr__(key, value)</code>","text":"<p>Sets an attribute as long as _ho_isfrozen is False</p> <p>The foreign keys properties are not detected by hasattr hence the line <code>_ = self.__dict__[key]</code> to double check if the attribute is really present.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __setattr__(self, key, value):\n    \"\"\"Sets an attribute as long as _ho_isfrozen is False\n\n    The foreign keys properties are not detected by hasattr\n    hence the line `_ = self.__dict__[key]` to double check if\n    the attribute is really present.\n    \"\"\"\n    if not hasattr(self, '_ho_isfrozen'):\n        object.__setattr__(self, '_ho_isfrozen', False)\n    if self._ho_isfrozen and not hasattr(self, key):\n        raise relation_errors.IsFrozenError(self.__class__, key)\n    if self.__dict__.get(key) and isinstance(self.__dict__[key], Field):\n        self.__dict__[key].set(value)\n        return\n    object.__setattr__(self, key, value)\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__to_dict_val_comp","title":"<code>__to_dict_val_comp()</code>","text":"<p>Returns a dictionary containing the values and comparators of the fields that are set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __to_dict_val_comp(self):\n    \"\"\"Returns a dictionary containing the values and comparators of the fields\n    that are set.\"\"\"\n    return {key:(field._comp(), field.value) for key, field in\n            self._ho_fields.items() if field.is_set()}\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__update_args","title":"<code>__update_args(**kwargs)</code>","text":"<p>Returns the what, where an values for the update query.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __update_args(self, **kwargs):\n    \"\"\"Returns the what, where an values for the update query.\"\"\"\n    what_fields = []\n    new_values = []\n    self._ho_query_type = 'update'\n    _, where, values = self.__where_args()\n    where = f\" where {where}\"\n    for field_name, new_value in kwargs.items():\n        what_fields.append(self._ho_fields[field_name].name)\n        new_values.append(new_value)\n    what = \", \".join([f'\"{elt}\" = %s' for elt in what_fields])\n    return what, where, new_values + values\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__walk_op","title":"<code>__walk_op(rel_id_, out=None, _fields_=None)</code>","text":"<p>Walk the set operators tree and return a list of SQL where representation of the query with a list of the fields of the query.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __walk_op(self, rel_id_, out=None, _fields_=None):\n    \"\"\"Walk the set operators tree and return a list of SQL where\n    representation of the query with a list of the fields of the query.\n    \"\"\"\n    if out is None:\n        out = []\n        _fields_ = []\n    if self._ho_set_operators.operator:\n        if self._ho_neg:\n            out.append(\"not (\")\n        out.append(\"(\")\n        left = self._ho_set_operators.left\n        left._ho_query_type = self._ho_query_type\n        left.__walk_op(rel_id_, out, _fields_)\n        if self._ho_set_operators.right is not None:\n            out.append(f\" {self._ho_set_operators.operator}\\n    \")\n            right = self._ho_set_operators.right\n            right._ho_query_type = self._ho_query_type\n            right.__walk_op(rel_id_, out, _fields_)\n        out.append(\")\")\n        if self._ho_neg:\n            out.append(\")\")\n    else:\n        out.append(self.__where_repr(rel_id_))\n        _fields_ += self.__get_set_fields()\n    return out, _fields_\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__what","title":"<code>__what()</code>","text":"<p>Returns the constrained fields and foreign keys.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __what(self):\n    \"\"\"Returns the constrained fields and foreign keys.\n    \"\"\"\n    set_fields = self.__get_set_fields()\n    fields_names = [\n        f'\"{field.name}\"' for field in self._ho_fields.values() if field.is_set()]\n    fk_fields = []\n    fk_queries = ''\n    fk_values = []\n    for fkey in self._ho_fkeys.values():\n        fk_prep_select = fkey._fkey_prep_select()\n        if fk_prep_select is not None:\n            fk_values += list(fkey.values()[0])\n            fk_fields += fk_prep_select[0]\n            fk_queries = [\"%s\" for _ in range(len(fk_values))]\n\n    return fields_names, set_fields, fk_fields, fk_queries, fk_values\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__where_args","title":"<code>__where_args(*args)</code>","text":"<p>Returns the what, where and values needed to construct the queries.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __where_args(self, *args):\n    \"\"\"Returns the what, where and values needed to construct the queries.\n    \"\"\"\n    rel_id_ = self.ho_id\n    what = f'r{rel_id_}.*'\n    if args:\n        what = ', '.join([f'r{rel_id_}.{arg}' for arg in args])\n    s_where, set_fields = self.__walk_op(rel_id_)\n    s_where = ''.join(s_where)\n    return what, s_where, set_fields\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_cast","title":"<code>ho_cast(qrn)</code>","text":"<p>Cast a relation into another relation.</p> <p>TODO: check that qrn inherits self (or is inherited by self)?</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_cast(self, qrn):\n    \"\"\"Cast a relation into another relation.\n\n    TODO: check that qrn inherits self (or is inherited by self)?\n    \"\"\"\n    new = self._ho_model._import_class(qrn)(**self.__to_dict_val_comp())\n    new._ho_id_cast = id(self)\n    new._ho_join_to = self._ho_join_to\n    new._ho_set_operators = self._ho_set_operators\n    return new\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_count","title":"<code>ho_count(*args)</code>","text":"<p>Returns the number of tuples matching the intention in the relation.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_count(self, *args):\n    \"\"\"Returns the number of tuples matching the intention in the relation.\n    \"\"\"\n    self._ho_query = \"select\"\n    query, values = self._ho_prep_select(*args)\n    query = f'select\\n  count(*) from ({query}) as ho_count'\n    return self.__execute(query, values).fetchone()['count']\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_delete","title":"<code>ho_delete(*args, delete_all=False)</code>","text":"<p>Removes a set of tuples from the relation. To empty the relation, delete_all must be set to True.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_delete(self, *args, delete_all=False):\n    \"\"\"Removes a set of tuples from the relation.\n    To empty the relation, delete_all must be set to True.\n    \"\"\"\n    _ = args and args != ('*',) and self._ho_check_colums(*args)\n    if not (self.ho_is_set() or delete_all):\n        raise RuntimeError(\n            f'Attempt to delete all rows from {self.__class__.__name__}'\n            ' without delete_all being set to True!')\n    query_template = \"delete from {} {}\"\n    _, values = self.__prep_query(query_template)\n    self._ho_query_type = 'delete'\n    _, where, _ = self.__where_args()\n    where, values = self.__fkey_where(where, values)\n    if where:\n        where = f\" where {where}\"\n    query = f\"delete from {self._qrn} {where}\"\n    if args:\n        query = self._ho_add_returning(query, *args)\n    with self.__execute(query, tuple(values)) as cursor:\n        if args:\n            return [dict(elt) for elt in cursor.fetchall()]\n    return None\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_description","title":"<code>ho_description()</code>  <code>classmethod</code>","text":"<p>Returns the description (comment) of the relation</p> Source code in <code>half_orm/relation.py</code> <pre><code>@classmethod\ndef ho_description(cls):\n    \"\"\"Returns the description (comment) of the relation\n    \"\"\"\n    description = cls._ho_metadata['description']\n    if description:\n        description = description.strip()\n    return description or 'No description available'\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_dict","title":"<code>ho_dict()</code>","text":"<p>Returns a dictionary containing only the values of the fields that are set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_dict(self):\n    \"\"\"Returns a dictionary containing only the values of the fields\n    that are set.\"\"\"\n    return {key:field.value for key, field in self._ho_fields.items() if field.is_set()}\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_distinct","title":"<code>ho_distinct(dist=True)</code>","text":"<p>Set distinct in SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_distinct(self, dist=True):\n    \"\"\"Set distinct in SQL select request.\"\"\"\n    distinct = 'distinct'\n    if dist not in {True, False}:\n        raise ValueError('ho_distinct argument must be either True or False!')\n    if dist in {False, None}:\n        distinct = ''\n    self._ho_select_params['distinct'] = distinct\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_freeze","title":"<code>ho_freeze()</code>","text":"<p>set _ho_isfrozen to True.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_freeze(self):\n    \"set _ho_isfrozen to True.\"\n    self._ho_isfrozen = True\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_get","title":"<code>ho_get(*args)</code>","text":"<p>The get method allows you to fetch a singleton from the database. It garantees that the constraint references one and only one tuple.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>list of fields names.            If ommitted, all the values of the row retreived from the database            are set for the self object.            Otherwise, only the values listed in the <code>args</code> parameter are set.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>Relation</code> <code>Relation</code> <p>the object retreived from the database.</p> <p>Raises:</p> Type Description <code>ExpectedOneError</code> <p>an exception is raised if no or more than one element is found.</p> Example <p>gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get() type(gaston) is Person True gaston.id (int4) NOT NULL (id = 1772) str(gaston.id) '1772' gaston.id.value 1772</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_get(self, *args: List[str]) -&gt; 'Relation':\n    \"\"\"The get method allows you to fetch a singleton from the database.\n    It garantees that the constraint references one and only one tuple.\n\n    Args:\n        args (List[str]): list of fields names.\\\n        If ommitted, all the values of the row retreived from the database\\\n        are set for the self object.\\\n        Otherwise, only the values listed in the `args` parameter are set.\n\n    Returns:\n        Relation: the object retreived from the database.\n\n    Raises:\n        ExpectedOneError: an exception is raised if no or more than one element is found.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n        &gt;&gt;&gt; type(gaston) is Person\n        True\n        &gt;&gt;&gt; gaston.id\n        (int4) NOT NULL (id = 1772)\n        &gt;&gt;&gt; str(gaston.id)\n        '1772'\n        &gt;&gt;&gt; gaston.id.value\n        1772\n    \"\"\"\n    self._ho_check_colums(*args)\n    self.ho_limit(2)\n    _count = self.ho_count()\n    if _count != 1:\n        raise relation_errors.ExpectedOneError(self, _count)\n    self._ho_is_singleton = True\n    ret = self(**(next(self.ho_select(*args))))\n    ret._ho_is_singleton = True\n    return ret\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_insert","title":"<code>ho_insert(*args)</code>","text":"<p>Insert a new tuple into the Relation.</p> <p>Returns:</p> Type Description <code>[dict]</code> <p>[dict]: A singleton containing the data inserted.</p> Example <p>gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert() print(gaston)</p> Note <p>It is not possible to insert more than one row with the insert method</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_insert(self, *args) -&gt; '[dict]':\n    \"\"\"Insert a new tuple into the Relation.\n\n    Returns:\n        [dict]: A singleton containing the data inserted.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n        &gt;&gt;&gt; print(gaston)\n        {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n    Note:\n        It is not possible to insert more than one row with the insert method\n    \"\"\"\n    _ = args and args != ('*',) and self._ho_check_colums(*args)\n    query_template = \"insert into {} ({}) values ({})\"\n    self._ho_query_type = 'insert'\n    fields_names, values, fk_fields, fk_query, fk_values = self.__what()\n    what_to_insert = [\"%s\" for _ in range(len(values))]\n    if fk_fields:\n        fields_names += fk_fields\n        what_to_insert += fk_query\n        values += fk_values\n    query = query_template.format(self._qrn, \", \".join(fields_names), \", \".join(what_to_insert))\n    returning = args or ['*']\n    if returning:\n        query = self._ho_add_returning(query, *returning)\n    with self.__execute(query, tuple(values)) as cursor:\n        res = [dict(elt) for elt in cursor.fetchall()] or [{}]\n        return res[0]\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_is_empty","title":"<code>ho_is_empty()</code>","text":"<p>Returns True if the relation is empty, False otherwise.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_empty(self):\n    \"\"\"Returns True if the relation is empty, False otherwise.\n    \"\"\"\n    self.ho_limit(1)\n    return self.ho_count() == 0\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_is_set","title":"<code>ho_is_set()</code>","text":"<p>Return True if one field at least is set or if self has been constrained by at least one of its foreign keys or self is the result of a combination of Relations (using set operators).</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_set(self):\n    \"\"\"Return True if one field at least is set or if self has been\n    constrained by at least one of its foreign keys or self is the\n    result of a combination of Relations (using set operators).\n    \"\"\"\n    joined_to = False\n    for _, jt_ in self._ho_join_to.items():\n        jt_id = id(jt_)\n        if jt_id in self._ho_fk_loop:\n            raise RuntimeError(\"Can't set Fkey on the same object\")\n        self._ho_fk_loop.add(jt_id)\n        joined_to |= jt_.ho_is_set()\n    self._ho_fk_loop = set()\n    return (joined_to or bool(self._ho_set_operators.operator) or bool(self._ho_neg) or\n            bool({field for field in self._ho_fields.values() if field.is_set()}))\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_limit","title":"<code>ho_limit(_limit_)</code>","text":"<p>Set limit for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_limit(self, _limit_):\n    \"\"\"Set limit for the next SQL select request.\"\"\"\n    if _limit_:\n        self._ho_select_params['limit'] = int(_limit_)\n    elif 'limit' in self._ho_select_params:\n        self._ho_select_params.pop('limit')\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_mogrify","title":"<code>ho_mogrify()</code>","text":"<p>Prints the select query.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_mogrify(self):\n    \"\"\"Prints the select query.\"\"\"\n    self._ho_mogrify = True\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_offset","title":"<code>ho_offset(_offset_)</code>","text":"<p>Set the offset for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_offset(self, _offset_):\n    \"\"\"Set the offset for the next SQL select request.\"\"\"\n    self._ho_select_params['offset'] = int(_offset_)\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_order_by","title":"<code>ho_order_by(_order_)</code>","text":"<p>Set SQL order by according to the \"order\" string passed</p> <p>@order string example : \"field1, field2 desc, field3, field4 desc\"</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_order_by(self, _order_):\n    \"\"\"Set SQL order by according to the \"order\" string passed\n\n    @order string example :\n    \"field1, field2 desc, field3, field4 desc\"\n    \"\"\"\n    self._ho_select_params['order_by'] = _order_\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_select","title":"<code>ho_select(*args)</code>","text":"<p>Gets the set of values correponding to the constraint attached to the object. This method is a generator.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>the fields names of the returned attributes. If omitted, all the fields are returned.</p> <code>()</code> <p>Yields:</p> Type Description <p>the result of the query as a dictionary.</p> Example <p>for person in Person(last_name=('like', 'La%')).ho_select('id'):     print(person)</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_select(self, *args):\n    \"\"\"Gets the set of values correponding to the constraint attached to the object.\n    This method is a generator.\n\n    Arguments:\n        *args: the fields names of the returned attributes. If omitted,\n            all the fields are returned.\n\n    Yields:\n        the result of the query as a dictionary.\n\n    Example:\n        &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n        &gt;&gt;&gt;     print(person)\n        {'id': 1772}\n    \"\"\"\n    self._ho_check_colums(*args)\n    query, values = self._ho_prep_select(*args)\n    with self.__execute(query, values) as cursor:\n        for elt in cursor:\n            yield dict(elt)\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_unaccent","title":"<code>ho_unaccent(*fields_names)</code>","text":"<p>Sets unaccent for each field listed in fields_names</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_unaccent(self, *fields_names):\n    \"Sets unaccent for each field listed in fields_names\"\n    for field_name in fields_names:\n        if not isinstance(self.__dict__[field_name], Field):\n            raise ValueError(f'{field_name} is not a Field!')\n        self.__dict__[field_name].unaccent = True\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_unfreeze","title":"<code>ho_unfreeze()</code>","text":"<p>Allow to add attributs to a relation</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_unfreeze(self):\n    \"Allow to add attributs to a relation\"\n    self._ho_isfrozen = False\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_update","title":"<code>ho_update(*args, update_all=False, **kwargs)</code>","text":"<p>kwargs represents the values to be updated {[field name:value]} The object self must be set unless update_all is True. The constraints of self are updated with kwargs.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_update(self, *args, update_all=False, **kwargs):\n    \"\"\"\n    kwargs represents the values to be updated {[field name:value]}\n    The object self must be set unless update_all is True.\n    The constraints of self are updated with kwargs.\n    \"\"\"\n    if not (self.ho_is_set() or update_all):\n        raise RuntimeError(\n            f'Attempt to update all rows of {self.__class__.__name__}'\n            ' without update_all being set to True!')\n\n    _ = args and args != ('*',) and self._ho_check_colums(*args)\n    self._ho_check_colums(*(kwargs.keys()))\n    update_args = {key: value for key, value in kwargs.items() if value is not None}\n    if not update_args:\n        return None # no new value update. Should we raise an error here?\n\n    query_template = \"update {} set {} {}\"\n    what, where, values = self.__update_args(**update_args)\n    where, values = self.__fkey_where(where, values)\n    query = query_template.format(self._qrn, what, where)\n    if args:\n        query = self._ho_add_returning(query, *args)\n    with self.__execute(query, tuple(values)) as cursor:\n        for field_name, value in update_args.items():\n            self._ho_fields[field_name].set(value)\n        if args:\n            return [dict(elt) for elt in cursor.fetchall()]\n    return None\n</code></pre>"},{"location":"api/relation/#half_orm.relation-functions","title":"Functions","text":""},{"location":"api/relation/#half_orm.relation.singleton","title":"<code>singleton(fct)</code>","text":"<p>Decorator. Enforces the relation to define a singleton.</p> <p>_ho_is_singleton is set by Relation.get. _ho_is_singleton is unset as soon as a Field is set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def singleton(fct):\n    \"\"\"Decorator. Enforces the relation to define a singleton.\n\n    _ho_is_singleton is set by Relation.get.\n    _ho_is_singleton is unset as soon as a Field is set.\n    \"\"\"\n    @wraps(fct)\n    def wrapper(self, *args, **kwargs):\n        if self._ho_is_singleton:\n            return fct(self, *args, **kwargs)\n        try:\n            self = self.ho_get()\n            return fct(self, *args, **kwargs)\n        except relation_errors.ExpectedOneError as err:\n            raise relation_errors.NotASingletonError(err)\n    wrapper.__is_singleton = True\n    wrapper.__orig_args = inspect.getfullargspec(fct)\n    return wrapper\n</code></pre>"},{"location":"api/relation/#half_orm.relation.transaction","title":"<code>transaction(fct)</code>","text":"<p>Decorator. Enforces every SQL insert, update or delete operation called within a Relation method to be executed in a transaction.</p> Usage <p>from relation import transaction class Person(model.get_relation_class(actor.person)):     [...]     @transaction     def insert_many(self, **data):         for d_pers in **data:             self(**d_pers).ho_insert()     [...]</p> <p>Pers().insert_many([{...}, {...}])</p> Source code in <code>half_orm/relation.py</code> <pre><code>def transaction(fct):\n    \"\"\"Decorator. Enforces every SQL insert, update or delete operation called within a\n    Relation method to be executed in a transaction.\n\n    Usage:\n        from relation import transaction\n        class Person(model.get_relation_class(actor.person)):\n            [...]\n            @transaction\n            def insert_many(self, **data):\n                for d_pers in **data:\n                    self(**d_pers).ho_insert()\n            [...]\n\n        Pers().insert_many([{...}, {...}])\n\n    \"\"\"\n    def wrapper(self, *args, **kwargs):\n        with Transaction(self._ho_model):\n            return fct(self, *args, **kwargs)\n    return wrapper\n</code></pre>"},{"location":"api/transaction/","title":"Transaction","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/transaction/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/transaction/#reference","title":"Reference","text":""},{"location":"api/transaction/#half_orm.transaction","title":"<code>transaction</code>","text":"<p>This module provides the Transaction class.</p>"},{"location":"api/transaction/#half_orm.transaction-classes","title":"Classes","text":""},{"location":"api/transaction/#half_orm.transaction.Transaction","title":"<code>Transaction</code>","text":"Source code in <code>half_orm/transaction.py</code> <pre><code>class Transaction:\n    \"\"\"\n    \"\"\"\n\n    __transactions = {}\n    def __call__(self, model):\n        self.__id = id(model)\n        self.__transaction = None\n        if self.__id not in self.__class__.__transactions:\n            self.__class__.__transactions[self.__id] = {}\n            self.__transaction = self.__class__.__transactions[self.__id]\n            self.__transaction['level'] = 0\n            self.__transaction['model'] = model\n        else:\n            self.__transaction = self.__transactions[self.__id]\n\n    __init__ = __call__\n\n    def __enter__(self):\n        if self.__transaction['model']._connection.autocommit:\n            self.__transaction['model']._connection.autocommit = False\n        self.__transaction['level'] += 1\n\n    def __exit__(self, *_):\n        self.__transaction['level'] -= 1\n        if self.__transaction['level'] == 0:\n            try:\n                self.__transaction['model']._connection.commit()\n                self.__transaction['model']._connection.autocommit = True\n            except Exception as exc:\n                self.__transaction['model']._connection.rollback()\n\n    @property\n    def level(self):\n        return self.__transaction.get('level')\n\n    def is_set(self):\n        return self.__transaction.get('level', 0) &gt; 0\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<p>Section Status</p> <p>Architecture documentation is for advanced users and contributors.</p>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<p>[Core architectural principles]</p>"},{"location":"architecture/#components","title":"Components","text":"<p>[System components and their relationships]</p>"},{"location":"architecture/factory/","title":"Factory Pattern","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/factory/#overview","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/factory/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"architecture/metadata/","title":"PostgreSQL Metadata","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/metadata/#overview","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/metadata/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"architecture/overview/","title":"Overview","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/overview/#overview_1","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/overview/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"architecture/query-processing/","title":"Query Processing","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/query-processing/#overview","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/query-processing/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"examples/","title":"Examples","text":"<p>Section Status</p> <p>Examples section needs real-world applications demonstrating halfORM usage.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":"<p>[List of all examples with descriptions]</p>"},{"location":"examples/#example-database","title":"Example Database","text":"<p>[Common database schema used in examples]</p>"},{"location":"examples/blog/","title":"Simple Blog","text":"<p>Example Status</p> <p>This example needs complete, runnable code with detailed explanations.</p>"},{"location":"examples/blog/#overview","title":"Overview","text":"<p>[What this example demonstrates]</p>"},{"location":"examples/blog/#code","title":"Code","text":"<p>[Complete, runnable example code]</p>"},{"location":"examples/blog/#explanation","title":"Explanation","text":"<p>[Step-by-step explanation of the code]</p>"},{"location":"examples/ecommerce/","title":"E-commerce","text":"<p>Example Status</p> <p>This example needs complete, runnable code with detailed explanations.</p>"},{"location":"examples/ecommerce/#overview","title":"Overview","text":"<p>[What this example demonstrates]</p>"},{"location":"examples/ecommerce/#code","title":"Code","text":"<p>[Complete, runnable example code]</p>"},{"location":"examples/ecommerce/#explanation","title":"Explanation","text":"<p>[Step-by-step explanation of the code]</p>"},{"location":"examples/web-apps/","title":"Web Applications","text":"<p>Example Status</p> <p>This example needs complete, runnable code with detailed explanations.</p>"},{"location":"examples/web-apps/#overview","title":"Overview","text":"<p>[What this example demonstrates]</p>"},{"location":"examples/web-apps/#code","title":"Code","text":"<p>[Complete, runnable example code]</p>"},{"location":"examples/web-apps/#explanation","title":"Explanation","text":"<p>[Step-by-step explanation of the code]</p>"},{"location":"guides/","title":"Guides","text":"<p>Section Status</p> <p>Guide topics are defined. Each guide needs detailed content.</p>"},{"location":"guides/#available-guides","title":"Available Guides","text":"<p>[List and description of all guides]</p>"},{"location":"guides/configuration/","title":"Configuration","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/configuration/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/configuration/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/error-handling/","title":"Error Handling","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/error-handling/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/error-handling/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/migration/","title":"Migration from other ORMs","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/migration/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/migration/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/performance/","title":"Performance Optimization","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/performance/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/performance/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/testing/","title":"Testing","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/testing/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/testing/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"tutorial/","title":"halfORM Tutorial","text":"<p>Welcome to the comprehensive halfORM tutorial! This step-by-step guide will take you from installation to advanced usage patterns.</p> <p>Before You Start</p> <p>This tutorial assumes basic familiarity with:</p> <ul> <li>Python (classes, decorators, basic OOP)</li> <li>SQL (SELECT, INSERT, UPDATE, DELETE, basic joins)</li> <li>PostgreSQL (connecting to a database, basic administration)</li> </ul> <p>If you're completely new to halfORM, start with the Quick Start Guide first!</p>"},{"location":"tutorial/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this tutorial, you'll be able to:</p> <ul> <li>\u2705 Install and configure halfORM for your projects</li> <li>\u2705 Connect to databases and work with existing schemas</li> <li>\u2705 Perform CRUD operations with intuitive Python syntax</li> <li>\u2705 Navigate relationships between tables efficiently</li> <li>\u2705 Create custom relation classes with business logic</li> <li>\u2705 Write complex queries with halfORM's powerful syntax</li> <li>\u2705 Handle transactions safely for complex operations</li> <li>\u2705 Debug and optimize your database interactions</li> </ul>"},{"location":"tutorial/#tutorial-structure","title":"Tutorial Structure","text":""},{"location":"tutorial/#part-1-getting-started","title":"Part 1: Getting Started","text":"Chapter Topic Duration Description 1. Installation Setup &amp; Config 10 min Install halfORM and configure database connections 2. First Steps Basic Usage 15 min Connect to databases, explore tables, basic CRUD"},{"location":"tutorial/#part-2-core-concepts","title":"Part 2: Core Concepts","text":"Chapter Topic Duration Description 3. Models &amp; Relations Classes &amp; Schemas 20 min Understanding relation classes, custom classes with <code>@register</code> 4. Foreign Keys Relationships 25 min Navigation, Fkeys configuration, relationship patterns"},{"location":"tutorial/#part-3-advanced-usage","title":"Part 3: Advanced Usage","text":"Chapter Topic Duration Description 5. Queries Advanced Querying 30 min Complex filters, joins, aggregations, performance 6. Transactions Data Integrity 20 min Transaction decorators, error handling, rollbacks <p>Total estimated time: ~2 hours</p>"},{"location":"tutorial/#tutorial-database","title":"Tutorial Database","text":"<p>Throughout this tutorial, we'll use a blog application schema that includes:</p> <pre><code>-- Authors table\nCREATE TABLE blog.author (\n    id SERIAL PRIMARY KEY,\n    first_name VARCHAR(100) NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    bio TEXT,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Posts table  \nCREATE TABLE blog.post (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    content TEXT,\n    author_id INTEGER REFERENCES blog.author(id) ON DELETE CASCADE,\n    published_at TIMESTAMP,\n    is_published BOOLEAN DEFAULT FALSE,\n    view_count INTEGER DEFAULT 0,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Comments table\nCREATE TABLE blog.comment (\n    id SERIAL PRIMARY KEY,\n    content TEXT NOT NULL,\n    author_id INTEGER REFERENCES blog.author(id) ON DELETE CASCADE,\n    post_id INTEGER REFERENCES blog.post(id) ON DELETE CASCADE,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n</code></pre>"},{"location":"tutorial/#tutorial-database-setup","title":"Tutorial Database Setup","text":"<p>We provide a complete setup script in Chapter 1: Installation that creates:</p> <ul> <li>Sample schema with the tables above</li> <li>Test data for realistic examples</li> <li>Indexes for performance</li> <li>Views for advanced examples</li> </ul>"},{"location":"tutorial/#learning-path-recommendations","title":"Learning Path Recommendations","text":""},{"location":"tutorial/#im-new-to-orms","title":"\ud83d\ude80 I'm new to ORMs","text":"<p>Start with Chapter 1 and follow sequentially. Take time with each concept before moving on.</p>"},{"location":"tutorial/#i-know-other-orms-django-sqlalchemy","title":"\ud83d\udd25 I know other ORMs (Django, SQLAlchemy)","text":"<p>You can skim Chapters 1-2 and focus on Chapters 3-4 to understand halfORM's unique approach.</p>"},{"location":"tutorial/#i-just-need-specific-topics","title":"\u26a1 I just need specific topics","text":"<p>Jump directly to the relevant chapter - each chapter includes necessary context.</p>"},{"location":"tutorial/#getting-help","title":"Getting Help","text":"<p>Throughout the tutorial:</p> <ul> <li>\ud83d\udca1 Tips highlight best practices</li> <li>\u26a0\ufe0f Warnings point out common pitfalls  </li> <li>\ud83d\udd0d Examples show real-world usage</li> <li>\ud83c\udfc6 Challenges let you practice concepts</li> </ul> <p>If you get stuck:</p> <ul> <li>Check the FAQ</li> <li>Browse Examples for patterns</li> <li>Ask in GitHub Discussions</li> </ul>"},{"location":"tutorial/#tutorial-philosophy","title":"Tutorial Philosophy","text":"<p>This tutorial follows halfORM's core principles:</p> <ol> <li>Database-First: We work with existing schemas, not code-generated ones</li> <li>SQL Transparency: You'll see exactly what SQL is generated</li> <li>PostgreSQL Native: We leverage PostgreSQL's unique features</li> <li>Practical Focus: Every example is based on real-world scenarios</li> </ol> <p>Ready to start? Let's begin with Chapter 1: Installation!</p> <p>Tutorial Feedback</p> <p>This tutorial is actively maintained. If you find errors, have suggestions, or want to contribute examples, please open an issue or start a discussion.</p>"},{"location":"tutorial/first-steps/","title":"First Steps","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/first-steps/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/first-steps/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/first-steps/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"},{"location":"tutorial/foreign-keys/","title":"Foreign Keys","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/foreign-keys/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/foreign-keys/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/foreign-keys/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"},{"location":"tutorial/installation/","title":"Installation","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/installation/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/installation/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/installation/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"},{"location":"tutorial/models-relations/","title":"Models and Relations","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/models-relations/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/models-relations/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/models-relations/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"},{"location":"tutorial/queries/","title":"Queries","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/queries/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/queries/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/queries/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"},{"location":"tutorial/transactions/","title":"Transactions","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/transactions/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/transactions/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/transactions/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"}]}