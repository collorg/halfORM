{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"halfORM Documentation","text":"<p>Documentation Version</p> <p>This documentation covers halfORM 0.16.x (latest stable release). For older versions, see the GitHub releases.</p> <p> </p> <p>The PostgreSQL-native ORM with unified tooling</p> <p>halfORM lets you keep your database schema in SQL where it belongs, while giving you the comfort of Python for data manipulation. With the new unified CLI, manage everything from database inspection to full-stack development through a single command.</p>"},{"location":"#overview","title":"Overview","text":"<p>halfORM is a lightweight, database-first Object-Relational Mapper designed specifically for PostgreSQL. Unlike traditional ORMs that impose their own schema management, halfORM adapts to your existing database structure, making it perfect for teams that prefer SQL-first development.</p> <p>Why halfORM?</p> <ul> <li>\ud83c\udfaf Database-First: Your PostgreSQL schema is the source of truth</li> <li>\ud83d\udd0d SQL Transparency: See exactly what queries are generated</li> <li>\u26a1 Zero Setup: Connect to existing databases instantly</li> <li>\ud83d\ude80 PostgreSQL Native: Leverage advanced PostgreSQL features</li> <li>\ud83d\udee0\ufe0f Unified CLI: One command for all halfORM functionality</li> </ul>"},{"location":"#whats-new-in-016","title":"What's New in 0.16","text":""},{"location":"#unified-command-line-interface","title":"\ud83c\udf89 Unified Command-Line Interface","text":"<p>All halfORM functionality is now accessible through a single <code>half_orm</code> command:</p> <pre><code># Core database inspection\nhalf_orm inspect my_database\nhalf_orm inspect my_database public.users\n\n# Development tools (with half-orm-dev extension)\nhalf_orm dev new my_project\nhalf_orm dev generate model\n\n# API generation (with half-orm-litestar-api extension)\nhalf_orm litestar generate\nhalf_orm litestar serve\n\n# List all available extensions\nhalf_orm --list-extensions\n</code></pre>"},{"location":"#extensible-architecture","title":"\ud83d\udd0c Extensible Architecture","text":"<p>Extensions are automatically discovered and integrated:</p> <pre><code># Install extensions\npip install half-orm-dev half-orm-litestar-api\n\n# All commands become available immediately\nhalf_orm --help  # Shows all available commands\n</code></pre>"},{"location":"#enhanced-database-inspection","title":"\ud83d\udd0d Enhanced Database Inspection","text":"<pre><code># List all database relations\nhalf_orm inspect blog_db\n#\ud83d\udcc2 Schema: public\n#  \ud83d\udccb posts\n#  \ud83d\udccb authors\n#  \ud83d\udccb comments\n#\n#\ud83d\udcc2 Schema: analytics  \n#  \ud83d\udccb user_stats\n#  \ud83d\udccb daily_reports\n\n# Detailed relation inspection\nhalf_orm inspect blog_db public.posts\n# Shows table structure, constraints, and relationships\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#instant-database-access","title":"\ud83d\udd25 Instant Database Access","text":"<pre><code>from half_orm.model import Model\n\n# Connect to your existing database\nblog = Model('blog_db')\n\n# Work with your tables immediately\nPost = blog.get_relation_class('blog.post')\nAuthor = blog.get_relation_class('blog.author')\n</code></pre>"},{"location":"#custom-relation-classes","title":"\ud83c\udfa8 Custom Relation Classes","text":"<pre><code>from half_orm.model import register\nfrom half_orm.relation import singleton\n\n@register\nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {\n        'author_fk': 'post_author_id_fkey'\n    }\n\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_blog_post_author_id'\n    }\n\n    @singleton\n    def create_post(self, title, content):\n        return self.posts_rfk(title=title, content=content).ho_insert()\n\n# Foreign keys now return your custom classes!\npost = Post(title='Welcome')\nauthor = post.author_fk()  # Returns Author instance\nauthor.create_post(\"New Post\", \"Content\")  # Custom method available\n</code></pre>"},{"location":"#intuitive-querying","title":"\ud83d\udd0d Intuitive Querying","text":"<pre><code># The object IS the filter - no .filter() needed\nyoung_people = Person(birth_date=('&gt;', '1990-01-01'))\ngmail_users = Person(email=('ilike', '%@gmail.com'))\n\n# Navigate relationships while filtering\nalice_posts = Author(name=('ilike', 'alice%')).posts_rfk(is_published=True)\n\n# Chain operations naturally\nrecent_posts = (Post(is_published=True)\n    .ho_order_by('created_at desc')\n    .ho_limit(10))\n</code></pre>"},{"location":"#postgresql-native-features","title":"\ud83d\udd27 PostgreSQL Native Features","text":"<pre><code># Use views, functions, and procedures\nUserStats = blog.get_relation_class('analytics.user_stats')  # Database view\nresults = blog.execute_function('calculate_metrics', user_id=123)\n\n# Advanced PostgreSQL data types work seamlessly\nJsonData = blog.get_relation_class('app.json_table')\ndata = JsonData(metadata='{\"type\": \"user\", \"premium\": true}')  # JSONB support\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running in under 5 minutes:</p> <ol> <li> <p>Install halfORM <pre><code>pip install half_orm\n</code></pre></p> </li> <li> <p>Test your installation <pre><code>half_orm version\n# halfORM Core: 0.16.0\n# No extensions installed\n</code></pre></p> </li> <li> <p>Configure connection <pre><code>mkdir ~/.half_orm\necho \"[database]\nname = my_database\nuser = username\npassword = password\nhost = localhost\" &gt; ~/.half_orm/my_database\n</code></pre></p> </li> <li> <p>Explore your database <pre><code>half_orm inspect my_database\n</code></pre></p> </li> <li> <p>Start coding <pre><code>from half_orm.model import Model\n\ndb = Model('my_database')\nPerson = db.get_relation_class('public.person')\n\n# Create\nperson = Person(name='Alice', email='alice@example.com')\nresult = person.ho_insert()\n\n# Query\nfor person in Person(email=('ilike', '%@gmail.com')):\n    print(f\"Found: {person['name']}\")\n</code></pre></p> </li> </ol> <p>\ud83d\udc49 Full Quick Start Guide \u2192</p>"},{"location":"#halform-ecosystem","title":"halfORM Ecosystem","text":""},{"location":"#development-tools","title":"\ud83d\udee0\ufe0f Development Tools","text":"<pre><code>pip install half-orm-dev\nhalf_orm dev new my_project     # Create new project\nhalf_orm dev generate model     # Generate model classes\nhalf_orm dev serve              # Development server\n</code></pre>"},{"location":"#api-generation","title":"\ud83c\udf10 API Generation","text":"<pre><code>pip install half-orm-litestar-api\nhalf_orm litestar generate      # Generate REST API\nhalf_orm litestar serve         # Start API server\n</code></pre>"},{"location":"#admin-interface","title":"\ud83d\udcca Admin Interface","text":"<pre><code>pip install half-orm-admin\nhalf_orm admin setup            # Setup admin interface\nhalf_orm admin serve            # Start admin server\n</code></pre> <p>\ud83d\udd0c Browse All Extensions \u2192</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li> <p>\ud83d\ude80 Quick Start</p> <p>Get up and running with halfORM in minutes. Connect to your database and start working with your data immediately.</p> <p>Get Started \u2192</p> </li> <li> <p>\ud83e\udde9 Fundamentals</p> <p>Core concepts that underpin halfORM's design and behavior. Essential reading for understanding the philosophy and patterns.</p> <p>Master the Basics \u2192</p> </li> <li> <p>\ud83d\udcda Tutorial</p> <p>Step-by-step guide covering all halfORM concepts from basic CRUD operations to advanced relationship navigation.</p> <p>Learn halfORM \u2192</p> </li> <li> <p>\ud83d\udccb API Reference</p> <p>Complete documentation of all halfORM classes, methods, and functions with detailed examples.</p> <p>API Docs \u2192</p> </li> <li> <p>\ud83d\udca1 Examples</p> <p>Real-world examples and patterns for common use cases like web applications, data analysis, and more.</p> <p>View Examples \u2192</p> </li> <li> <p>\ud83d\udcd6 Guides</p> <p>In-depth guides on configuration, performance optimization, testing, and migrating from other ORMs.</p> <p>Browse Guides \u2192</p> </li> <li> <p>\ud83c\udfd7\ufe0f Architecture</p> <p>Understanding halfORM's internals, design principles, and how it works under the hood.</p> <p>Deep Dive \u2192</p> </li> <li> <p>\ud83d\udd0c Ecosystem</p> <p>Extensions, development tools, and the broader halfORM ecosystem for full-stack development.</p> <p>Explore Ecosystem \u2192</p> </li> </ul>"},{"location":"#why-choose-halform","title":"Why Choose halfORM?","text":""},{"location":"#perfect-for","title":"\u2705 Perfect For","text":"<ul> <li>PostgreSQL-centric applications - Leverage PostgreSQL's full power</li> <li>Existing database projects - Work with established schemas</li> <li>SQL-comfortable teams - Keep complex logic in the database</li> <li>Rapid prototyping - Get started instantly with unified tooling</li> <li>Microservices - Lightweight with no framework baggage</li> <li>Full-stack development - CLI extensions for complete workflows</li> </ul>"},{"location":"#consider-alternatives-if","title":"\ud83e\udd14 Consider Alternatives If","text":"<ul> <li>Multi-database support needed - halfORM is PostgreSQL-only</li> <li>Django ecosystem - Django ORM may integrate better</li> <li>Code-first approach preferred - You want to define models in Python</li> <li>Heavy ORM features required - Need lazy loading, identity maps, etc.</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Repository - Source code and issue tracking</li> <li>Discussions - Community Q&amp;A and ideas</li> <li>PyPI Package - Official releases</li> </ul>"},{"location":"#version-history","title":"Version History","text":""},{"location":"#version-0160","title":"Version 0.16.0 \ud83c\udf89","text":"<p>Latest Release - New CLI Architecture</p> <p>Major architectural update with unified command-line interface and extension system.</p> <ul> <li>\ud83d\udee0\ufe0f Unified CLI: All halfORM functionality through <code>half_orm</code> command</li> <li>\ud83d\udd0c Extension System: Automatic discovery and integration of extensions</li> <li>\ud83d\udd0d Enhanced Inspection: Improved database exploration with <code>half_orm inspect</code></li> <li>\ud83d\udce6 Modular Architecture: Core functionality separated from development tools</li> <li>\ud83c\udfa8 Better Developer Experience: Consistent command patterns across all extensions</li> </ul> <pre><code># New unified interface\nhalf_orm inspect my_database\nhalf_orm dev new my_project        # Requires half-orm-dev\nhalf_orm litestar generate         # Requires half-orm-litestar-api\nhalf_orm --list-extensions         # See all available tools\n</code></pre>"},{"location":"#version-0150","title":"Version 0.15.0 \ud83c\udf89","text":"<p>Previous Release - Custom Relation Classes</p> <p>Major update with new custom relation classes and breaking changes.</p> <ul> <li>\ud83c\udfa8 New <code>@register</code> decorator for custom relation classes with business logic</li> <li>\ud83d\udd17 Enhanced foreign key navigation with custom class resolution  </li> <li>\ud83d\udcda Complete documentation rewrite with improved structure</li> <li>\u26a0\ufe0f Breaking change: HOP packager moved to separate <code>halfORM_dev</code> package</li> </ul>"},{"location":"#migration-from-015x","title":"Migration from 0.15.x","text":"<p>Easy Migration</p> <p>halfORM 0.16 is backward compatible with 0.15.x code. Only CLI usage changes:</p> <pre><code># Old approach (still works)\npython -m half_orm inspect my_database\n\n# New unified approach\nhalf_orm inspect my_database\n\n# Development tools now require separate package\npip install half-orm-dev\nhalf_orm dev new my_project  # Replaces old 'hop' command\n</code></pre> <p>Ready to start?</p> <p>Jump into the Quick Start Guide or explore the Tutorial for a comprehensive introduction to halfORM.</p> <p>Made with \u2764\ufe0f for PostgreSQL and Python developers</p>"},{"location":"fundamentals/","title":"halfORM Fundamentals","text":"<p>This page covers the core concepts that underpin halfORM's design and behavior. Understanding these fundamentals is essential for working effectively with halfORM across all use cases.</p> <p>When to Read This</p> <ul> <li>Before diving into complex queries or relationships</li> <li>When you need to understand halfORM's philosophy</li> <li>As a reference for core concepts mentioned throughout the documentation</li> <li>Required reading before Queries and Foreign Keys</li> </ul>"},{"location":"fundamentals/#core-philosophy","title":"Core Philosophy","text":""},{"location":"fundamentals/#database-first-approach","title":"Database-First Approach","text":"<p>halfORM takes a database-first approach where your PostgreSQL schema is the source of truth:</p> <pre><code>-- \u2705 halfORM approach: Schema exists, code adapts\n-- 1. Design schema in SQL\nCREATE DATABASE blog_tutorial;\nCREATE TABLE blog.author (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL\n);\n</code></pre> <p>And then:</p> <pre><code># 2. Connect and use immediately\nfrom half_orm.model import Model\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')  # Adapts to your schema\n</code></pre> <p>Benefits: - No schema migrations to manage - Leverage full PostgreSQL feature set - Easy integration with existing databases - Database evolution independent of code</p>"},{"location":"fundamentals/#sql-transparency","title":"SQL Transparency","text":"<p>halfORM generates SQL that you can inspect and understand:</p> <pre><code>query = Author(is_active=True).ho_order_by('name')\n\n# See exactly what SQL will be executed\nquery.ho_mogrify()  # Sets the object to print the SQL when executed (debugging purpose)\n\n# Execute when ready\nresults = list(query)\n# Output: SELECT * FROM \"blog\".\"author\" WHERE \"is_active\" = TRUE ORDER BY \"name\"\n</code></pre> <p>Benefits: - No hidden query magic - Learning opportunity</p>"},{"location":"fundamentals/#query-execution-model","title":"Query Execution Model","text":""},{"location":"fundamentals/#declarative-programming","title":"Declarative Programming","text":"<p>halfORM follows a declarative programming model where you build query intentions first, then execute them when needed:</p> <pre><code>from half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\n\n# \ud83c\udfaf Declaration phase - no SQL executed yet\nauthors = Author(is_active=True)\ngmail_authors = Author(email=('ilike', '%@gmail.com'))\nordered_authors = authors.ho_order_by('last_name')\n\n# \u26a1 Execution phase - SQL runs now\nfor author in ordered_authors:  # Query executes here\n    print(author['first_name'])\n\n# Alternative execution methods\nauthor_list = list(ordered_authors)  # Executes here\nauthor_count = ordered_authors.ho_count()  # Executes here\n</code></pre>"},{"location":"fundamentals/#lazy-evaluation","title":"Lazy Evaluation","text":"<p>Queries are lazy - they only execute when you actually need the data:</p> <pre><code># These build intentions (no SQL executed)\nauthors = Author(is_active=True)\nposts = Post(is_published=True).ho_order_by('published_at DESC')\ncomments = Comment(is_approved=True)\n\n# These execute SQL\nlist(authors)           # SELECT executed\nfor post in posts:      # SELECT executed\n    pass\nposts.ho_count()        # COUNT executed\nposts.ho_is_empty()     # EXISTS executed\nnext(posts.ho_limit(1)) # SELECT LIMIT 1 executed\n</code></pre>"},{"location":"fundamentals/#method-categories-builders-vs-executors","title":"Method Categories: Builders vs Executors","text":"<p>halfORM methods fall into two distinct categories:</p>"},{"location":"fundamentals/#query-builders-lazy-return-new-relation-objects","title":"\ud83d\udd27 Query Builders (Lazy - Return new relation objects)","text":"<pre><code># These methods build query intentions without executing SQL\nauthors = Author(is_active=True)           # Filter\nordered = authors.ho_order_by('name')      # Order\nlimited = ordered.ho_limit(10)             # Limit\nfiltered = limited.ho_offset(5)            # Offset\n\n# Chain them together\nquery = (Author(is_active=True)\n         .ho_order_by('name')\n         .ho_limit(10)\n         .ho_offset(5))  # Still no SQL executed!\n</code></pre>"},{"location":"fundamentals/#query-executors-eager-execute-sql-immediately","title":"\u26a1 Query Executors (Eager - Execute SQL immediately)","text":"<pre><code># These methods execute SQL and return results\nresults = query.ho_select('name', 'email')  # Returns generator - SQL executes NOW\ncount = query.ho_count()                    # Returns int - SQL executes NOW  \nauthor = query.ho_get()                     # Returns dict - SQL executes NOW\nexists = query.ho_is_empty()                # Returns bool - SQL executes NOW\n\n# \u274c IMPORTANT: Once executed, you cannot chain more builders!\nresults = Author().ho_select('name')        # This is a generator\n# results.ho_order_by('name')  # \u274c ERROR! Can't modify a generator\n</code></pre>"},{"location":"fundamentals/#the-right-pattern","title":"\ud83d\udd04 The Right Pattern","text":"<pre><code># \u2705 Build first, execute last\nquery = (Author(is_active=True)\n         .ho_order_by('name DESC')\n         .ho_limit(10))\n\n# Then execute\nfor author in query.ho_select('name', 'email'):  # SQL executes here\n    print(f\"{author['name']}: {author['email']}\")\n</code></pre>"},{"location":"fundamentals/#the-ho_get-anti-pattern","title":"The ho_get() Anti-Pattern","text":"<p>A common halfORM anti-pattern is calling <code>ho_get()</code> too early:</p> <pre><code># \u274c Anti-pattern - breaks the declarative flow\nalice = Author(email='alice@example.com').ho_get()  # Forces execution\nalice_posts = alice.posts_rfk()  # Now we're working with a singleton\n\n# \u2705 Better - keep building intentions\nalice = Author(email='alice@example.com')  # Just an intention\nalice_posts = alice.posts_rfk(is_published=True)  # Still building\npopular_posts = alice_posts.ho_order_by('view_count DESC')  # Still building\n\n# Execute when ready\nfor post in popular_posts:  # Query executes here\n    print(post['title'])\n</code></pre>"},{"location":"fundamentals/#object-as-filter-pattern","title":"Object-as-Filter Pattern","text":""},{"location":"fundamentals/#the-core-concept","title":"The Core Concept","text":"<p>In halfORM, the object IS the filter. When you create a relation instance with parameters, you're defining a subset of rows:</p> <pre><code># These are all \"filters\" - they represent subsets of data\nall_authors = Author()                           # All authors\nactive_authors = Author(is_active=True)          # Only active authors\ngmail_authors = Author(email=('ilike', '%@gmail.com'))  # Only Gmail users\nyoung_authors = Author(birth_date=('&gt;', '1990-01-01'))  # Born after 1990\n</code></pre>"},{"location":"fundamentals/#constraint-syntax","title":"Constraint Syntax","text":"<p>halfORM supports two forms of constraints:</p>"},{"location":"fundamentals/#1-single-value-exact-match","title":"1. Single Value (Exact Match)","text":"<pre><code># These create equality constraints\nAuthor(first_name='John')     # WHERE first_name = 'John'\nAuthor(is_active=True)        # WHERE is_active = TRUE\nPost(view_count=25)           # WHERE view_count = 25\n</code></pre>"},{"location":"fundamentals/#2-tuple-operator-value","title":"2. Tuple (Operator, Value)","text":"<pre><code># These create custom comparison constraints\nPost(view_count=('&gt;', 100))         # WHERE view_count &gt; 100\nAuthor(first_name=('ilike', 'j%'))  # WHERE first_name ILIKE 'j%'\n\n# Range queries using set operations\neighties_born = Author(birth_date=('&gt;=', '1980-01-01')) &amp; Author(birth_date=('&lt;=', '1990-01-01'))\n# WHERE birth_date &gt;= '1980-01-01' AND birth_date &lt;= '1990-01-01'\n</code></pre>"},{"location":"fundamentals/#common-operators","title":"Common Operators","text":"Operator SQL Equivalent Example Description <code>=</code> (default) <code>=</code> <code>Author(first_name='John')</code> Exact equality <code>('&gt;', value)</code> <code>&gt;</code> <code>Post(view_count=('&gt;', 100))</code> Greater than <code>('&lt;', value)</code> <code>&lt;</code> <code>Author(birth_date=('&lt;', '1990-01-01'))</code> Less than <code>('&gt;=', value)</code> <code>&gt;=</code> <code>Post(view_count=('&gt;=', 50))</code> Greater than or equal <code>('&lt;=', value)</code> <code>&lt;=</code> <code>Author(birth_date=('&lt;=', '2000-01-01'))</code> Less than or equal <code>('!=', value)</code> <code>!=</code> <code>Author(is_active=('!=', False))</code> Not equal <code>('like', pattern)</code> <code>LIKE</code> <code>Author(first_name=('like', 'John%'))</code> Case-sensitive pattern <code>('ilike', pattern)</code> <code>ILIKE</code> <code>Author(email=('ilike', '%@gmail.com'))</code> Case-insensitive pattern <code>('in', list)</code> <code>IN</code> <code>Author(id=('in', [1, 2, 3]))</code> Value in list <p>Tip</p> <p>See the official PostgreSQL documentation for comparison operators or pattern matching operators (like or POSIX regular expression).</p>"},{"location":"fundamentals/#range-queries-with-set-operations","title":"Range Queries with Set Operations","text":"<p>Since halfORM uses set operations for range queries, combine multiple conditions with <code>&amp;</code>:</p> <pre><code># Birth date range: born in the 1980s\neighties_born = Author(birth_date=('&gt;=', '1980-01-01')) &amp; Author(birth_date=('&lt;', '1989-12-31'))\n\n# Date range: posts from 2024\nposts_2024 = Post(published_at=('&gt;=', '2024-01-01')) &amp; Post(published_at=('&lt;=', '2024-12-31'))\n\n# View count range: moderate popularity\nmoderate_posts = Post(view_count=('&gt;=', 10)) &amp; Post(view_count=('&lt;=', 100))\n\n# ID range: specific subset of authors\nauthor_subset = Author(id=('&gt;=', 10)) &amp; Author(id=('&lt;=', 50))\n</code></pre>"},{"location":"fundamentals/#null-vs-none-a-crucial-distinction","title":"NULL vs None: A Crucial Distinction","text":"<p>halfORM makes an important distinction between <code>None</code> (Python) and <code>NULL</code> (SQL) that can be confusing but is essential for correct usage:</p>"},{"location":"fundamentals/#python-none-vs-sql-null","title":"Python None vs SQL NULL","text":"<pre><code>from half_orm.model import Model\nfrom half_orm.null import NULL  # \u26a0\ufe0f Crucial import!\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\n\n# \u274c COMMON MISTAKE: Using None to represent NULL\nperson_none = Author(bio=None)  # \u2716\ufe0f Has NO EFFECT!\nprint(person_none.ho_is_set())  # \u2192 False (no filter applied)\n\n# \u2705 CORRECT: Using NULL for SQL NULL values  \nperson_null = Author(bio=NULL)  # \u2705 Filters people with bio = NULL\nprint(person_null.ho_is_set())  # \u2192 True (filter applied)\n</code></pre>"},{"location":"fundamentals/#different-behaviors","title":"Different Behaviors","text":""},{"location":"fundamentals/#1-none-disables-the-field","title":"1. None disables the field","text":"<pre><code># None = \"ignore this field\"\nauthor = Author(first_name='Alice', bio=None)\n# Equivalent to:\nauthor = Author(first_name='Alice')  # bio completely ignored\n</code></pre>"},{"location":"fundamentals/#2-null-activates-an-sql-filter","title":"2. NULL activates an SQL filter","text":"<pre><code># NULL = \"filter by NULL in SQL\"\nauthors_without_bio = Author(bio=NULL)\n# Generates: SELECT * FROM author WHERE bio IS NULL\n\nauthors_with_bio = Author(bio=('is not', NULL))  \n# Generates: SELECT * FROM author WHERE bio IS NOT NULL\n</code></pre>"},{"location":"fundamentals/#practical-examples","title":"Practical Examples","text":"<pre><code>from half_orm.null import NULL\n\n# \u2705 Find authors without biography\nauthors_no_bio = Author(bio=NULL)\n# SQL: WHERE bio IS NULL\n\n# \u2705 Find authors with a biography\nauthors_with_bio = Author(bio=('is not', NULL))\n# SQL: WHERE bio IS NOT NULL\n\n# \u2705 Create an author without biography\nnew_author = Author(\n    first_name='Bob',\n    last_name='Smith', \n    email='bob@example.com',\n    bio=NULL  # Inserts NULL in database\n).ho_insert()\n\n# \u274c Incorrect attempt\nincomplete_query = Author(bio=None)  # Has no filtering effect!\n</code></pre>"},{"location":"fundamentals/#comparators-with-null","title":"Comparators with NULL","text":"<p>Only <code>is</code> and <code>is not</code> are allowed with <code>NULL</code>:</p> <pre><code># \u2705 Valid comparators with NULL\nAuthor(bio=NULL)              # Automatically translated to ('is', NULL)\nAuthor(bio=('is', NULL))      # Explicit\nAuthor(bio=('is not', NULL))  # Negation\n\n# \u274c Invalid comparators with NULL\nAuthor(bio=('=', NULL))       # \u2716\ufe0f ValueError!\nAuthor(bio=('like', NULL))    # \u2716\ufe0f ValueError!\n</code></pre>"},{"location":"fundamentals/#common-use-cases","title":"Common Use Cases","text":""},{"location":"fundamentals/#filtering-incomplete-data","title":"Filtering incomplete data","text":"<pre><code># Authors with complete profiles (all fields filled)\ncomplete_profiles = Author(\n    bio=('is not', NULL),\n    birth_date=('is not', NULL)\n)\n\n# Posts without excerpt (need to be completed)\nposts_need_excerpt = Post(\n    excerpt=NULL,\n    is_published=True\n)\n</code></pre>"},{"location":"fundamentals/#inserting-with-null-values","title":"Inserting with NULL values","text":"<pre><code># Create a draft post (some fields NULL)\ndraft_post = Post(\n    title='Draft',\n    content='Work in progress...',\n    published_at=NULL,  # Not yet published\n    excerpt=NULL        # No excerpt yet\n).ho_insert()\n</code></pre>"},{"location":"fundamentals/#updating-with-null","title":"Updating with NULL","text":"<pre><code># Unpublish a post (set published_at to NULL)\npost = Post(id=42)\npost.ho_update(\n    is_published=False,\n    published_at=NULL  # Reset to NULL\n)\n</code></pre>"},{"location":"fundamentals/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always import NULL when working with NULL values:    <pre><code>from half_orm.null import NULL\n</code></pre></p> </li> <li> <p>Use None to disable constraints:    <pre><code># Search all authors (ignore email field)\nall_authors = Author(email=None)  # email ignored\n</code></pre></p> </li> <li> <p>Use NULL for SQL NULL values:    <pre><code># Search authors without email\nauthors_no_email = Author(email=NULL)  # email IS NULL\n</code></pre></p> </li> <li> <p>Understand the intent:</p> </li> <li><code>field=None</code> \u2192 \"I don't want to filter on this field\"</li> <li><code>field=NULL</code> \u2192 \"I want to filter rows where this field is NULL\"</li> </ol>"},{"location":"fundamentals/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":"<pre><code># \u274c Error: Using None instead of NULL\ndef find_incomplete_authors():\n    return Author(bio=None)  # \u2716\ufe0f Returns ALL authors!\n\n# \u2705 Correct: Using NULL for missing values  \ndef find_incomplete_authors():\n    return Author(bio=NULL)  # \u2705 Returns authors without bio\n\n# \u274c Error: Mixing None and NULL intentions\nperson = Author(\n    first_name='Alice',\n    bio=None,        # \u2716\ufe0f Ignored\n    email=NULL       # \u2705 Filters email IS NULL\n)\n# This query searches for Alice with email NULL, ignores bio\n\n# \u2705 Correct: Be consistent with intention\nperson = Author(\n    first_name='Alice',\n    bio=NULL,        # \u2705 bio IS NULL  \n    email=NULL       # \u2705 email IS NULL\n)\n</code></pre> <p>Common Trap</p> <p><code>Author(bio=None)</code> does NOT filter authors without biography! </p> <p>To filter NULL values, always use <code>Author(bio=NULL)</code>.</p> <p>Memory Aid</p> <ul> <li>None = Python = \"ignore this field in the query\"</li> <li>NULL = SQL = \"filter NULL values in database\"</li> </ul> <p>This distinction reflects halfORM's database-first philosophy: SQL concepts (like NULL) are preserved and distinct from Python concepts (like None).</p>"},{"location":"fundamentals/#relations-as-python-sets","title":"Relations as Python Sets","text":""},{"location":"fundamentals/#set-theory-in-halform","title":"Set Theory in halfORM","text":"<p>halfORM Relations behave like mathematical sets, supporting all standard set operations:</p> <pre><code>Author = blog.get_relation_class('blog.author')\n\n# Define some author sets\nall_authors = Author()\nactive_authors = Author(is_active=True)\ngmail_authors = Author(email=('ilike', '%@gmail.com'))\nold_authors = Author(birth_date=('&lt;', '1980-01-01'))\n</code></pre>"},{"location":"fundamentals/#set-operations","title":"Set Operations","text":"<pre><code># Union (OR) - authors that are active OR use gmail\nactive_or_gmail = active_authors | gmail_authors\n\n# Intersection (AND) - authors that are active AND use gmail  \nactive_gmail = active_authors &amp; gmail_authors\n\n# Difference - active authors who don't use gmail\nactive_not_gmail = active_authors - gmail_authors\n\n# Complement - non-active authors\ninactive_authors = -active_authors\n\n# Symmetric difference - authors that are either active OR use gmail, but not both\neither_but_not_both = active_authors ^ gmail_authors\n</code></pre>"},{"location":"fundamentals/#set-membership-and-equality","title":"Set Membership and Equality","text":"<pre><code># Membership testing\nyoung_authors = Author(birth_date=('&gt;', '1990-01-01'))\nalice = Author(email='alice@example.com').ho_get()\nif alice in young_authors:\n    print(\"Alice is young\")\n\n# Set equality and comparison  \ntech_authors = Author(bio=('ilike', '%tech%'))\nif active_authors == tech_authors:\n    print(\"All active authors are tech-focused\")\n\n# Subset testing\nif young_authors &lt;= all_authors:  # young_authors \u2286 all_authors\n    print(\"Young authors are a subset of all authors\")\n</code></pre>"},{"location":"fundamentals/#schema-requirements","title":"Schema Requirements","text":""},{"location":"fundamentals/#explicit-schema-names","title":"Explicit Schema Names","text":"<p>halfORM always requires the full <code>schema.table</code> format, even for tables in PostgreSQL's default <code>public</code> schema:</p> <pre><code># \u2705 Correct - always include schema name\nAuthor = blog.get_relation_class('blog.author')\nProduct = blog.get_relation_class('inventory.products')\nUser = blog.get_relation_class('public.users')  # Even for public schema\n\n# \u274c Wrong - will raise MissingSchemaInName error\nAuthor = blog.get_relation_class('author')\nUser = blog.get_relation_class('users')\n</code></pre> <p>Why explicit schemas? - Prevents ambiguity when tables exist in multiple schemas - Makes code more maintainable and clear - Enforces best practices for database organization</p>"},{"location":"fundamentals/#postgresql-metadata-integration","title":"PostgreSQL Metadata Integration","text":"<p>halfORM leverages PostgreSQL's rich metadata system:</p> <pre><code># Comments become part of the relation documentation\nAuthor = blog.get_relation_class('blog.author')\nprint(Author())  # Shows table and column comments\n\n# Constraints are automatically detected\nprint(Author()._ho_pkey)  # Primary key columns\nprint(Author()._ho_ukeys)  # Unique constraints\nprint(Author()._ho_fkeys)  # Foreign key relationships\n</code></pre>"},{"location":"fundamentals/#method-naming-convention","title":"Method Naming Convention","text":""},{"location":"fundamentals/#the-ho_-prefix","title":"The ho_ Prefix","text":"<p>All halfORM-Relation specific methods use the <code>ho_</code> prefix to avoid conflicts with business methods:</p> <pre><code># halfORM methods (always prefixed)\nauthor.ho_get()         # Get single record\nauthor.ho_insert()      # Insert record\nauthor.ho_update()      # Update record\nauthor.ho_delete()      # Delete record\nauthor.ho_count()       # Count records\nauthor.ho_select()      # Select with column specification\nauthor.ho_order_by()    # Add ordering\nauthor.ho_limit()       # Add limit\nauthor.ho_offset()      # Add offset\nauthor.ho_is_empty()    # Check if result set is empty\n\nclass Author(blog.get_relation_class('blog.author')):\n    def count(self):\n        # ...\n    def select(self):\n        # ...\n</code></pre> <p>Benefits: - No conflicts with method names - Clear distinction between halfORM operations and business logic - Consistent API across all relation classes</p>"},{"location":"fundamentals/#database-first-strategy","title":"Database-First Strategy","text":""},{"location":"fundamentals/#when-to-use-sql-views","title":"When to Use SQL Views","text":"<p>When halfORM queries become too complex, consider creating database views:</p> <pre><code>-- Instead of complex halfORM queries, create a view\nCREATE VIEW blog.author_stats AS\nSELECT \n    a.*,\n    COUNT(p.id) as post_count,\n    COUNT(c.id) as comment_count,\n    AVG(p.view_count) as avg_post_views\nFROM blog.author a\nLEFT JOIN blog.post p ON a.id = p.author_id  \nLEFT JOIN blog.comment c ON a.id = c.author_id\nGROUP BY a.id;\n</code></pre> <pre><code># Then use the view in halfORM\nAuthorStats = blog.get_relation_class('blog.author_stats')\n\n# Simple and efficient\ntop_authors = (AuthorStats(post_count=('&gt;', 5))\n               .ho_order_by('avg_post_views DESC')\n               .ho_limit(10))\n</code></pre>"},{"location":"fundamentals/#when-to-use-sql-functions","title":"When to Use SQL Functions","text":"<p>For complex calculations, use PostgreSQL functions:</p> <pre><code>-- Create a function for complex business logic\nCREATE OR REPLACE FUNCTION blog.get_trending_posts(days_back INTEGER)\nRETURNS TABLE(post_id INTEGER, score NUMERIC) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT \n        p.id,\n        (p.view_count::NUMERIC / EXTRACT(days FROM NOW() - p.published_at)) as score\n    FROM blog.post p\n    WHERE p.published_at &gt; NOW() - INTERVAL '%s days', days_back\n    AND p.is_published = TRUE\n    ORDER BY score DESC;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre> <pre><code># Use the function from halfORM\ntrending = blog.execute_function('blog.get_trending_posts', 30)\nfor post_data in trending:\n    print(f\"Post {post_data['post_id']}: score {post_data['score']}\")\n</code></pre>"},{"location":"fundamentals/#performance-principles","title":"Performance Principles","text":""},{"location":"fundamentals/#lazy-loading-by-default","title":"Lazy Loading by Default","text":"<p>halfORM doesn't automatically load related data, giving you control over performance:</p> <pre><code># This doesn't load posts\nauthor = Author(email='alice@example.com')\n\n# This creates a new query for posts\nposts = author.posts_rfk()\n\n# This executes the posts query\npost_count = posts.ho_count()\n</code></pre>"},{"location":"fundamentals/#efficient-field-selection","title":"Efficient Field Selection","text":"<p>Only select the fields you need:</p> <pre><code># \u274c Loads all columns (can be wasteful for large tables)\nfor author in Author():\n    print(author['name'])\n\n# \u2705 Loads only needed columns\nfor author in Author().ho_select('first_name', 'last_name'):\n    print(f\"{author['first_name']} {author['last_name']}\")\n</code></pre>"},{"location":"fundamentals/#count-vs-loading","title":"Count vs Loading","text":"<p>Use count operations instead of loading data when you just need numbers:</p> <pre><code># \u2705 Efficient - just counts\nif Post(is_published=False).ho_count() &gt; 0:\n    print(\"Drafts exist\")\n\n# \u274c Inefficient - loads all draft posts\nif len(list(Post(is_published=False))) &gt; 0:\n    print(\"Drafts exist\")\n</code></pre> <p>Counts for very large tables</p> <p>Counts can be slow in PostgreSQL with very large tables</p>"},{"location":"fundamentals/#summary","title":"Summary","text":"<p>These fundamentals form the foundation of all halfORM operations:</p> <ol> <li>Database-First: Schema in SQL, code adapts</li> <li>SQL Transparency: See and understand generated queries</li> <li>Declarative Queries: Build intentions, execute when needed</li> <li>Object-as-Filter: Instances represent data subsets</li> <li>Set Operations: Relations behave like mathematical sets</li> <li>Explicit Schemas: Always use <code>schema.table</code> format</li> <li>ho_ Prefix: Clear method naming convention</li> <li>Lazy Evaluation: Queries execute only when needed</li> </ol> <p>Understanding these concepts will make all other halfORM features more intuitive and help you write more efficient, maintainable code.</p> <p>Next Steps</p> <p>Now that you understand the fundamentals, explore:</p> <ul> <li>Queries - Advanced filtering and query patterns</li> <li>Foreign Keys - Relationship navigation</li> <li>Models &amp; Relations - Custom classes and business logic</li> </ul>"},{"location":"quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with halfORM in under 5 minutes. This guide will take you from installation to your first successful database operation.</p> <p>Prerequisites</p> <ul> <li>Python 3.7 or higher</li> <li>PostgreSQL 9.6 or higher</li> <li>Basic familiarity with Python and SQL</li> </ul>"},{"location":"quick-start/#step-1-installation","title":"Step 1: Installation","text":"<p>Install halfORM using pip:</p> <pre><code>pip install half_orm\n</code></pre> <p>Verify installation with the new unified CLI:</p> <pre><code>half_orm version\n</code></pre> <p>Expected output: <pre><code>halfORM Core: 0.16.0\nExtensions: none\n</code></pre></p> <p>Virtual Environment Recommended</p> <p>For project isolation: <pre><code>python -m venv halfORM-env\nsource halfORM-env/bin/activate  # Linux/Mac\n# or halfORM-env\\Scripts\\activate  # Windows\npip install half_orm\n</code></pre></p>"},{"location":"quick-start/#step-2-database-setup","title":"Step 2: Database Setup","text":"<p>For this guide, we'll create a simple blog database. If you already have a PostgreSQL database, skip to Step 3.</p>"},{"location":"quick-start/#create-example-database","title":"Create Example Database","text":"<pre><code>-- Connect to PostgreSQL\nCREATE DATABASE halfORM_quickstart;\n\n-- Connect to the new database\n\\c halfORM_quickstart\n\n-- Create schema\nCREATE SCHEMA blog;\n\n-- Create tables\nCREATE TABLE blog.author (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE blog.post (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    content TEXT,\n    author_id INTEGER REFERENCES blog.author(id),\n    published_at TIMESTAMP DEFAULT NOW(),\n    is_published BOOLEAN DEFAULT FALSE\n);\n\n-- Add sample data\nINSERT INTO blog.author (name, email) VALUES \n    ('Alice Johnson', 'alice@example.com'),\n    ('Bob Smith', 'bob@example.com');\n\nINSERT INTO blog.post (title, content, author_id, is_published) VALUES \n    ('Welcome to halfORM', 'This is our first post!', 1, true),\n    ('Database-First Development', 'Schema-first approach...', 1, true),\n    ('Draft Post', 'Work in progress.', 2, false);\n\n-- Create a simple view\nCREATE VIEW blog.author_stats AS\nSELECT \n    a.id,\n    a.name,\n    a.email,\n    COUNT(p.id) as post_count\nFROM blog.author a\nLEFT JOIN blog.post p ON a.id = p.author_id\nGROUP BY a.id, a.name, a.email;\n</code></pre>"},{"location":"quick-start/#step-3-explore-your-database","title":"Step 3: Explore Your Database","text":"<p>Use the new unified CLI to explore your database:</p> <pre><code># Inspect database structure\nhalf_orm inspect halfORM_quickstart\n\n# Detailed table inspection\nhalf_orm inspect halfORM_quickstart blog.author\nhalf_orm inspect halfORM_quickstart blog.post\n</code></pre> <p>Expected output: <pre><code>\ud83d\udcc2 Schema: blog\n  \ud83d\udccb author\n  \ud83d\udc41\ufe0f author_stats\n  \ud83d\udccb post\n\nTotal: 3 relations\n   \ud83d\udccb: 2 tables\n   \ud83d\udc41\ufe0f: 1 view\n</code></pre></p>"},{"location":"quick-start/#step-4-configuration-optional","title":"Step 4: Configuration (Optional)","text":"<p>For local development with peer authentication, no configuration is needed. For specific connections:</p> <pre><code># Create config directory\nmkdir ~/.half_orm\n\n# Create connection file\ncat &gt; ~/.half_orm/halfORM_quickstart &lt;&lt; EOF\n[database]\nname = halfORM_quickstart\nuser = your_username\npassword = your_password\nhost = localhost\nport = 5432\nEOF\n</code></pre>"},{"location":"quick-start/#step-5-first-connection","title":"Step 5: First Connection","text":"<pre><code>from half_orm.model import Model\n\n# Connect to database\nblog = Model('halfORM_quickstart')\n\n# Show database structure\nprint(blog)\n</code></pre> <p>Expected output: <pre><code>\ud83d\udccb Available relations:\nr \"blog\".\"author\"\nr \"blog\".\"post\"\nv \"blog\".\"author_stats\"\n</code></pre></p>"},{"location":"quick-start/#step-6-create-your-first-classes","title":"Step 6: Create Your First Classes","text":"<pre><code>from half_orm.model import Model\n\nblog = Model('halfORM_quickstart')\n\n# Create relation classes\nAuthor = blog.get_relation_class('blog.author')\nPost = blog.get_relation_class('blog.post')\nAuthorStats = blog.get_relation_class('blog.author_stats')  # View\n\n# Explore structure\nprint(Author())  # Shows complete table info\n</code></pre> <p>This displays columns, types, constraints, and foreign keys.</p>"},{"location":"quick-start/#step-7-basic-operations","title":"Step 7: Basic Operations","text":""},{"location":"quick-start/#create","title":"Create","text":"<pre><code># Create new author\nnew_author = Author(\n    name='Charlie Brown',\n    email='charlie@example.com'\n)\n\nif new_author.ho_is_empty():\n    result = new_author.ho_insert()\n    print(f\"Created: {result}\")\n</code></pre>"},{"location":"quick-start/#read","title":"Read","text":"<pre><code># Read all authors\nfor author in Author().ho_select('name', 'email'):\n    print(f\"{author['name']} ({author['email']})\")\n\n# Find specific author\nalice = Author(name='Alice Johnson').ho_get()\nprint(f\"Found: {alice.name}\")\n</code></pre>"},{"location":"quick-start/#update","title":"Update","text":"<pre><code># Update author\nAuthor(name='Charlie Brown').ho_update(\n    email='charlie.brown@newdomain.com'\n)\n</code></pre>"},{"location":"quick-start/#delete","title":"Delete","text":"<pre><code># Delete author\nAuthor(name='Charlie Brown').ho_delete()\n</code></pre>"},{"location":"quick-start/#step-8-working-with-relationships","title":"Step 8: Working with Relationships","text":"<p><pre><code>from half_orm.model import register\n\n# Define custom classes with clean foreign key aliases\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts': '_reverse_fkey_halfORM_quickstart_blog_post_author_id'\n    }\n\n@register\nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {\n        'author': 'post_author_id_fkey'\n    }\n\n# Navigate relationships with clean syntax\nalice = Author(name='Alice Johnson').ho_get()\nalice_posts = alice.posts()\nprint(f\"Alice has {alice_posts.ho_count()} posts\")\n\n# Get author from post - work with the relation\npost = Post(id=1)\nfor author in post.author():\n    print(f\"Author: {author['name']}\")\n</code></pre> <pre><code>!!! tip \"Why @register?\"\n    `@register` makes your custom classes the default everywhere. Foreign key navigation automatically returns YOUR classes with clean `Fkeys` aliases instead of long constraint names.\n\n## Step 9: Query and Filter\n\n```python\n# Basic filtering\npublished_posts = Post(is_published=True)\n\n# Pattern matching\ngmail_authors = Author(email=('ilike', '%@gmail.com'))\n\n# Comparison operators\nrecent_posts = Post(published_at=('&gt;', '2024-01-01'))\n\n# Chaining operations\nquery = (Post(is_published=True)\n         .ho_order_by('published_at DESC')\n         .ho_limit(5))\n\nfor post in query.ho_select('title', 'published_at'):\n    print(f\"{post['title']} - {post['published_at']}\")\n\n# Working with views\nfor stats in AuthorStats().ho_select('name', 'post_count'):\n    print(f\"{stats['name']}: {stats['post_count']} posts\")\n</code></pre></p>"},{"location":"quick-start/#key-concepts","title":"Key Concepts","text":""},{"location":"quick-start/#null-vs-none","title":"NULL vs None","text":"<pre><code>from half_orm.null import NULL\n\n# \u274c Wrong - ignores field\nAuthor(email=None)\n\n# \u2705 Correct - filters NULL values\nAuthor(email=NULL)\n</code></pre>"},{"location":"quick-start/#builder-vs-executor-pattern","title":"Builder vs Executor Pattern","text":"<pre><code># \u2705 Build query first\nquery = Post(is_published=True).ho_order_by('title')\n\n# \u2705 Then execute\nresults = query.ho_select('title')\n\n# \u274c Cannot chain after execution\n# results.ho_order_by('date')  # Error!\n</code></pre>"},{"location":"quick-start/#extensions-test-example","title":"Extensions (Test Example)","text":"<p>halfORM 0.16 introduces an extensible architecture. Try it with the test extension:</p> <pre><code># Install test extension\npip install git+https://github.com/collorg/half-orm-test-extension\n\n# List available extensions\nhalf_orm --list-extensions\n\n# Use the test extension\nhalf_orm test-extension greet\nhalf_orm test-extension status\n</code></pre> <p>Expected output: <pre><code>Available extensions:\n  \u2022 test-extension v0.1.0\n    Simple test extension for halfORM ecosystem\n    Commands: greet, status\n\n\ud83d\udd0d halfORM Test Extension Status\n===================================\nExtension name: test-extension\nVersion: 0.1.0\nDescription: Simple test extension for halfORM ecosystem\n\nHello, halfORM!\n</code></pre></p>"},{"location":"quick-start/#coming-soon","title":"Coming Soon","text":"<pre><code># Development tools (in development)\npip install half-orm-dev\nhalf_orm dev new my_project\n\n# API generation (planned)\npip install half-orm-litestar-api\nhalf_orm litestar-api generate\n</code></pre>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<p>\u2705 You're ready! You can now: - Connect to any PostgreSQL database - Perform CRUD operations - Navigate relationships - Build filtered queries</p>"},{"location":"quick-start/#continue-learning","title":"Continue Learning:","text":"<ul> <li>Tutorial - Complete step-by-step guide</li> <li>Fundamentals - Core concepts deep dive</li> <li>Examples - Real-world patterns</li> </ul>"},{"location":"quick-start/#common-next-questions","title":"Common Next Questions:","text":"<ul> <li>Custom classes? \u2192 Models &amp; Relations</li> <li>Complex queries? \u2192 Queries</li> <li>Transactions? \u2192 Transactions</li> </ul>"},{"location":"quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quick-start/#connection-issues","title":"Connection Issues","text":"<pre><code># Test connection\nfrom half_orm.model import Model\ntry:\n    db = Model('your_database')\n    print(\"\u2705 Connected!\")\nexcept Exception as e:\n    print(f\"\u274c Error: {e}\")\n</code></pre>"},{"location":"quick-start/#common-fixes","title":"Common Fixes","text":"<ul> <li>Check PostgreSQL is running</li> <li>Verify database name and credentials</li> <li>Ensure user has necessary permissions</li> </ul> <p>Need Help?</p> <ul> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ul> <p>You're now ready to build PostgreSQL applications with halfORM! \ud83d\ude80 ```</p>"},{"location":"api/","title":"API Reference","text":"<p>Section Status</p> <p>API reference structure is ready. Automated docstring extraction is configured.</p>"},{"location":"api/#modules","title":"Modules","text":"<p>[Overview of all modules]</p>"},{"location":"api/#quick-reference","title":"Quick Reference","text":"<p>[Common methods and patterns]</p>"},{"location":"api/errors/","title":"Errors","text":"<p>API Status</p> <p>Error documentation needs comprehensive coverage of all exception types.</p>"},{"location":"api/errors/#error-categories","title":"Error Categories","text":"<p>[Overview of error types]</p>"},{"location":"api/errors/#exception-reference","title":"Exception Reference","text":""},{"location":"api/errors/#half_orm.relation_errors","title":"<code>relation_errors</code>","text":"<p>This module provides the errors for the relation module.</p>"},{"location":"api/errors/#half_orm.relation_errors-classes","title":"Classes","text":""},{"location":"api/errors/#half_orm.relation_errors.DuplicateAttributeError","title":"<code>DuplicateAttributeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Attempt to setattr to an already existing attribute.</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class DuplicateAttributeError(Exception):\n    \"\"\"Attempt to setattr to an already existing attribute.\"\"\"\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.ExpectedOneError","title":"<code>ExpectedOneError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>This exception is raised when get count differs from 1.</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class ExpectedOneError(Exception):\n    \"\"\"This exception is raised when get count differs from 1.\"\"\"\n    def __init__(self, relation, count):\n        self.rel = relation\n        self.count = count\n        self.plural = '' if count == 0 else 's'\n        Exception.__init__(self, f'Expected 1, got {self.count} tuple{self.plural}')\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.IsFrozenError","title":"<code>IsFrozenError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Class is frozen</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class IsFrozenError(Exception):\n    \"\"\"Class is frozen\"\"\"\n    def __init__(self, cls, msg):\n        super().__init__(\n            f\"ERROR! The class {cls} is forzen.\\n\"\n            f\"Use ho_unfreeze to add the '{msg}' attribute to it.\")\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.NotASingletonError","title":"<code>NotASingletonError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The constraint do not define a singleton.</p> <p>Raised from ExpectedOneError (err).</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class NotASingletonError(Exception):\n    \"\"\"The constraint do not define a singleton.\n\n    Raised from ExpectedOneError (err).\n    \"\"\"\n    def __init__(self, err):\n        Exception.__init__(self, f'Not a singleton. Got {err.count} tuple{err.plural}')\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.UnknownAttributeError","title":"<code>UnknownAttributeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Unknown attribute error</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class UnknownAttributeError(Exception):\n    \"\"\"Unknown attribute error\"\"\"\n    def __init__(self, msg):\n        super().__init__(f\"ERROR! Unknown attribute: {msg}.\")\n</code></pre>"},{"location":"api/errors/#half_orm.relation_errors.WrongFkeyError","title":"<code>WrongFkeyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when Fkeys contains a wrong name</p> Source code in <code>half_orm/relation_errors.py</code> <pre><code>class WrongFkeyError(Exception):\n    \"Raised when Fkeys contains a wrong name\"\n    def __init__(self, cls, value):\n        fkeys_list = \"\\n\".join([f\" - {fkey}\" for fkey in cls._ho_fkeys.keys()])\n        err = f\"Can't find '{value}'!\\n\" \\\n            f\"List of keys for {cls.__class__.__name__}:\\n\" \\\n            f\"{fkeys_list}\"\n        super().__init__(err)\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors","title":"<code>model_errors</code>","text":"<p>This module provides the errors for the model module.</p>"},{"location":"api/errors/#half_orm.model_errors-classes","title":"Classes","text":""},{"location":"api/errors/#half_orm.model_errors.MalformedConfigFile","title":"<code>MalformedConfigFile</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The config file is malformed.</p> <p>The missing parameters are indicated in the error message.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class MalformedConfigFile(Exception):\n    \"\"\"The config file is malformed.\n\n    The missing parameters are indicated in the error message.\n    \"\"\"\n    def __init__(self, filename, msg, missing_param):\n        self.filename = filename\n        Exception.__init__(\n            self,\n            f\"Malformed config file: {filename}\\n{msg}: {missing_param}\")\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors.MissingConfigFile","title":"<code>MissingConfigFile</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The config file has not been found.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class MissingConfigFile(Exception):\n    \"\"\"The config file has not been found.\"\"\"\n    def __init__(self, filename):\n        self.filename = filename\n        Exception.__init__(self, f'Missing config file: {filename}')\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors.MissingSchemaInName","title":"<code>MissingSchemaInName</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The QRN should contain a schema name.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class MissingSchemaInName(Exception):\n    \"\"\"The QRN should contain a schema name.\"\"\"\n    def __init__(self, qrn):\n        Exception.__init__(self, f\"do you mean 'public.{qrn}'?\")\n</code></pre>"},{"location":"api/errors/#half_orm.model_errors.UnknownRelation","title":"<code>UnknownRelation</code>","text":"<p>               Bases: <code>Exception</code></p> <p>The FQRN doesn't match any relation in the database.</p> Source code in <code>half_orm/model_errors.py</code> <pre><code>class UnknownRelation(Exception):\n    \"\"\"The FQRN doesn't match any relation in the database.\"\"\"\n    def __init__(self, sfqrn):\n        self.dbname = sfqrn[0]\n        self.schema = sfqrn[1]\n        self.relation = sfqrn[2]\n        Exception.__init__(self, f\"'{sfqrn[1]}.{sfqrn[2]}' does not exist in the database {sfqrn[0]}.\")\n</code></pre>"},{"location":"api/field/","title":"Field","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/field/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/field/#reference","title":"Reference","text":""},{"location":"api/field/#half_orm.field","title":"<code>field</code>","text":"<p>This module provides the Field class. It is used by the <code>relation &lt;#module-half_orm.relation&gt;</code>_ module.</p>"},{"location":"api/field/#half_orm.field-classes","title":"Classes","text":""},{"location":"api/field/#half_orm.field.Field","title":"<code>Field</code>","text":"<p>The class Field is for Relation internal usage. It is called by the RelationFactory metaclass for each field in the relation considered.</p> Source code in <code>half_orm/field.py</code> <pre><code>class Field():\n    \"\"\"The class Field is for Relation internal usage. It is called by\n    the RelationFactory metaclass for each field in the relation considered.\n    \"\"\"\n    def __init__(self, name, relation, metadata):\n        self.__relation = relation\n        self.__name = name\n        self.__is_set = False\n        self.__metadata = metadata\n        self.__sql_type = self.__metadata['fieldtype']\n        self.__value = None\n        self.__unaccent = False\n        self.__comp = '='\n\n    @property\n    def _relation(self): # pragma: no cover\n        return self.__relation\n\n    @property\n    def _metadata(self): # pragma: no cover\n        return self.__metadata\n\n    @property\n    def py_type(self):\n        sql_type = self.__sql_type\n        list_ = False\n        if sql_type[0] == '_':\n            sql_type = sql_type[1:]\n            list_ = True\n        python_type = SQL_ADAPTER.get(sql_type, typing.Any)\n        if list_:\n            python_type = typing.List[python_type]\n        return python_type\n\n    @property\n    def name(self):\n        return self.__name\n\n    def is_set(self):\n        \"Returns if the field is set or not.\"\n        return self.__is_set\n\n    def _is_part_of_pk(self):\n        \"Returns True if the field is part of the PK\"\n        return bool(self.__metadata['pkey'])\n\n    def _is_unique(self):\n        \"Returns True if the field is unique\"\n        return bool(self.__metadata['uniq'])\n\n    def is_not_null(self):\n        \"Returns True if the field is defined as not null.\"\n        return bool(self.__metadata['notnull'])\n\n    def __repr__(self):\n        md_ = self.__metadata\n        field_constraint = f\"{md_['notnull'] and 'NOT NULL' or ''}\"\n        repr_ = f\"({md_['fieldtype']}) {field_constraint}\"\n        if self.__is_set:\n            repr_ = f\"{repr_} ({self.__name} {self.__comp} {self.__value})\"\n        return repr_.strip()\n\n    def __str__(self):\n        return str(self.__value)\n\n    def __praf(self, query, ho_id):\n        \"\"\"Returns field_name prefixed with relation alias if the query is\n        select. Otherwise, returns the field name quoted with \".\n        \"\"\"\n        ho_id = f'r{ho_id}'\n        if query == 'select':\n            return f'{ho_id}.\"{self.__name}\"'\n        return f'\"{self.__name}\"'\n\n    def _where_repr(self, query, ho_id):\n        \"\"\"Returns the SQL representation of the field for the where clause\n        \"\"\"\n        where_repr = ''\n        comp_str = '%s'\n        isiterable = type(self.__value) in {tuple, list, set}\n        col_is_array = self.__sql_type[0] == '_'\n        comp = self._comp()\n        if comp == '=' and isiterable:\n            comp = 'in'\n        cast = ''\n        if self.__value != NULL and not isiterable:\n            cast = f'::{self.__sql_type}'\n        if col_is_array and comp == '=':\n            where_repr = f'{comp_str} = ANY({self.__praf(query, ho_id)})'\n        elif not self.unaccent:\n            where_repr = f\"{self.__praf(query, ho_id)} {comp} {comp_str}{cast}\"\n        else:\n            where_repr = f\"unaccent({self.__praf(query, ho_id)}) {comp} unaccent({comp_str}{cast})\"\n        return where_repr\n\n    @property\n    def value(self):\n        \"Returns the value of the field object\"\n        return self.__value\n\n    def set(self, *args):\n        \"\"\"Sets the value (and the comparator) associated with the field.\"\"\"\n        self.__relation._ho_is_singleton = False\n        value = args[0]\n        if value is None:\n            self.__is_set = False\n            self.__value = None\n            self.__comp = '='\n            return\n        comp = None\n        if isinstance(value, tuple):\n            if len(value) != 2:\n                raise ValueError(f\"Can't match {value} with (comp, value)!\")\n            comp, value = value\n        if value is None:\n            raise ValueError(\"Can't have a None value with a comparator!\")\n        if value is NULL and comp is None:\n            comp = 'is'\n        elif comp is None:\n            comp = '='\n        if isinstance(value, (list, set)):\n            value = tuple(value)\n        comp = comp.lower()\n        if value is NULL and comp not in {'is', 'is not'}:\n            raise ValueError(\"comp should be 'is' or 'is not' with NULL value!\")\n        self.__is_set = True\n        self.__value = value\n        self.__comp = comp\n\n    def _set(self, *args):\n        sys.stderr.write(\n            \"WARNING! Field._set method is deprecated. Use Field.set instead.\\n\"\n            \"It will be remove in 1.0 version.\\n\")\n        return self.set(*args)\n\n    def _unset(self): #pragma: no cover\n        \"Unset a field\"\n        sys.stderr.write(\n            \"WARNING! Field._unset method is deprecated. Set the value of the field to None instead.\\n\"\n            \"It will be remove in 1.0 version.\\n\")\n        self.__is_set = False\n        self.__value = None\n        self.__comp = '='\n\n    @property\n    def unaccent(self):\n        return self.__unaccent\n    @unaccent.setter\n    def unaccent(self, value):\n        if not isinstance(value, bool):\n            raise RuntimeError('unaccent value must be True or False!')\n        self.__unaccent = value\n\n    def _comp(self):\n        \"Returns the comparator associated to the value.\"\n        if self.__comp == '%':\n            return '%%'\n        return self.__comp\n\n    @property\n    def _relation(self):\n        \"\"\"Internal usage.\n\n        Returns:\n            Relation: The Relation class for which self is an attribute.\n        \"\"\"\n        return self.__relation\n\n    def _psycopg_adapter(self):\n        \"\"\"Return the SQL representation of self.__value\"\"\"\n        return psycopg2.extensions.adapt(self.__value)\n\n    @property\n    def _name(self):\n        return self.__name\n\n    def __call__(self):\n        \"\"\"In case someone inadvertently uses the name of a field for a method.\"\"\"\n        rel_class = self.__relation.__class__\n        rcn = rel_class.__name__\n        method = rel_class.__dict__.get(self.__name)\n        err_msg = \"'Field' object is not callable.\"\n        warn_msg = f\"'{self.__name}' is an attribute of type Field of the '{rcn}' object.\"\n        if method:\n            err_msg = f\"{err_msg}\\n{warn_msg}\"\n            err_msg = f\"{err_msg}\\nDo not use '{self.__name}' as a method name.\"\n        raise TypeError(err_msg)\n</code></pre>"},{"location":"api/field/#half_orm.field.Field-attributes","title":"Attributes","text":""},{"location":"api/field/#half_orm.field.Field.value","title":"<code>value</code>  <code>property</code>","text":"<p>Returns the value of the field object</p>"},{"location":"api/field/#half_orm.field.Field-functions","title":"Functions","text":""},{"location":"api/field/#half_orm.field.Field.__call__","title":"<code>__call__()</code>","text":"<p>In case someone inadvertently uses the name of a field for a method.</p> Source code in <code>half_orm/field.py</code> <pre><code>def __call__(self):\n    \"\"\"In case someone inadvertently uses the name of a field for a method.\"\"\"\n    rel_class = self.__relation.__class__\n    rcn = rel_class.__name__\n    method = rel_class.__dict__.get(self.__name)\n    err_msg = \"'Field' object is not callable.\"\n    warn_msg = f\"'{self.__name}' is an attribute of type Field of the '{rcn}' object.\"\n    if method:\n        err_msg = f\"{err_msg}\\n{warn_msg}\"\n        err_msg = f\"{err_msg}\\nDo not use '{self.__name}' as a method name.\"\n    raise TypeError(err_msg)\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.__praf","title":"<code>__praf(query, ho_id)</code>","text":"<p>Returns field_name prefixed with relation alias if the query is select. Otherwise, returns the field name quoted with \".</p> Source code in <code>half_orm/field.py</code> <pre><code>def __praf(self, query, ho_id):\n    \"\"\"Returns field_name prefixed with relation alias if the query is\n    select. Otherwise, returns the field name quoted with \".\n    \"\"\"\n    ho_id = f'r{ho_id}'\n    if query == 'select':\n        return f'{ho_id}.\"{self.__name}\"'\n    return f'\"{self.__name}\"'\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.is_not_null","title":"<code>is_not_null()</code>","text":"<p>Returns True if the field is defined as not null.</p> Source code in <code>half_orm/field.py</code> <pre><code>def is_not_null(self):\n    \"Returns True if the field is defined as not null.\"\n    return bool(self.__metadata['notnull'])\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.is_set","title":"<code>is_set()</code>","text":"<p>Returns if the field is set or not.</p> Source code in <code>half_orm/field.py</code> <pre><code>def is_set(self):\n    \"Returns if the field is set or not.\"\n    return self.__is_set\n</code></pre>"},{"location":"api/field/#half_orm.field.Field.set","title":"<code>set(*args)</code>","text":"<p>Sets the value (and the comparator) associated with the field.</p> Source code in <code>half_orm/field.py</code> <pre><code>def set(self, *args):\n    \"\"\"Sets the value (and the comparator) associated with the field.\"\"\"\n    self.__relation._ho_is_singleton = False\n    value = args[0]\n    if value is None:\n        self.__is_set = False\n        self.__value = None\n        self.__comp = '='\n        return\n    comp = None\n    if isinstance(value, tuple):\n        if len(value) != 2:\n            raise ValueError(f\"Can't match {value} with (comp, value)!\")\n        comp, value = value\n    if value is None:\n        raise ValueError(\"Can't have a None value with a comparator!\")\n    if value is NULL and comp is None:\n        comp = 'is'\n    elif comp is None:\n        comp = '='\n    if isinstance(value, (list, set)):\n        value = tuple(value)\n    comp = comp.lower()\n    if value is NULL and comp not in {'is', 'is not'}:\n        raise ValueError(\"comp should be 'is' or 'is not' with NULL value!\")\n    self.__is_set = True\n    self.__value = value\n    self.__comp = comp\n</code></pre>"},{"location":"api/fkey/","title":"FKey","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/fkey/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/fkey/#reference","title":"Reference","text":""},{"location":"api/fkey/#half_orm.fkey","title":"<code>fkey</code>","text":"<p>This module provides the FKey class.</p>"},{"location":"api/fkey/#half_orm.fkey-classes","title":"Classes","text":""},{"location":"api/fkey/#half_orm.fkey.FKey","title":"<code>FKey</code>","text":"<p>Foreign key class</p> <p>A foreign key is set by assigning to it a Relation object of the corresponding type (see FKey.set method). It is then used to construct the join query for Relation.ho_select method.</p> Source code in <code>half_orm/fkey.py</code> <pre><code>class FKey:\n    \"\"\"Foreign key class\n\n    A foreign key is set by assigning to it a Relation object of the\n    corresponding type (see FKey.set method).\n    It is then used to construct the join query for Relation.ho_select\n    method.\n    \"\"\"\n\n    def __init__(self,\n                 fk_name, relation, fk_sfqrn,\n                 fk_names=None, fields=None, confupdtype=None, confdeltype=None):\n        self.__relation = relation\n        self.__to_relation = None\n        self.__name = fk_name\n        self.__is_set = False\n        self.__fk_names = fk_names or []\n        self.__fk_from = None\n        self.__fk_to = None\n        self.__confupdtype = confupdtype\n        self.__confdeltype = confdeltype\n        self.__fk_fqrn = fk_sfqrn\n        self.__fields_names = fields\n        self.__fields = [f'\"{name}\"' for name in fields]\n\n    def __get_rel(self, fqtn):\n        \"\"\"Returns the relation class referenced by fqtn.\n        First try model._import_class fallback to model.get_relation_class on ImportError.\n        \"\"\"\n        return self.__relation._ho_model._import_class(fqtn)\n\n    def __call__(self, __cast__=None, **kwargs):\n        \"\"\"Returns the relation referenced by the fkey.\n        Uses the __cast__ if it is set.\n        \"\"\"\n        f_relation = self.__get_rel(__cast__ or normalize_qrn(self.__fk_fqrn))(**kwargs)\n        rev_fkey_name = f'_reverse_{f_relation.ho_id}'\n        f_relation._ho_fkeys[rev_fkey_name] = FKey(\n            rev_fkey_name,\n            f_relation,\n            f_relation._t_fqrn, self.__fields, self.__fk_names)\n        f_relation._ho_fkeys[rev_fkey_name].set(self.__relation)\n        return f_relation\n\n    def values(self):\n        return [list(elt.values()) for elt in self.__to_relation.ho_select(*self.__fk_names)]\n\n    def set(self, __to):\n        \"\"\"Sets the relation associated to the foreign key.\n\n        TODO: check that the __to is indeed atteinable from self\n        \"\"\"\n        # pylint: disable=import-outside-toplevel\n        from half_orm.relation import Relation\n\n        if not issubclass(__to.__class__, Relation):\n            raise RuntimeError(\"Fkey.set excepts an argument of type Relation\")\n        self.__to_relation = __to\n        from_ = self.__relation\n        self.__fk_from = from_\n        self.__fk_to = __to\n        self.__is_set = __to.ho_is_set()\n        from_._ho_join_to[self] = __to\n        return self\n\n    def is_set(self):\n        \"\"\"Return if the foreign key is set (boolean).\"\"\"\n        return self.__is_set\n\n    @property\n    def confupdtype(self):\n        \"on update configuration\"\n        return self.__confupdtype\n\n    @property\n    def confdeltype(self):\n        \"on delete configuration\"\n        return self.__confdeltype\n\n    #@utils.trace\n    def _join_query(self, orig_rel):\n        \"\"\"Returns the join_query, join_values of a foreign key.\n        fkey interface: frel, from_, __to, fields, fk_names\n        \"\"\"\n        from_ = self.__fk_from\n        __to = self.__fk_to\n        orig_rel_id = f'r{orig_rel.ho_id}'\n        to_id = f'r{__to.ho_id}'\n        from_id = f'r{from_.ho_id}'\n        if __to._qrn == orig_rel._qrn:\n            to_id = orig_rel_id\n        if from_._qrn == orig_rel._qrn:\n            from_id = orig_rel_id\n        from_fields = (f'{from_id}.{name}' for name in self.__fields)\n        to_fields = (f'{to_id}.{name}' for name in self.__fk_names)\n        bounds = \" and \".join(\n            [f'{a} = {b}' for a, b in zip(to_fields, from_fields)])\n        return f\"({bounds})\"\n\n    #@utils.trace\n    def _fkey_prep_select(self):\n        return (self.__fields, self.__fk_to._ho_prep_select(*self.fk_names)) if self.__is_set else None\n\n    @property\n    def name(self):\n        \"Returns the internal name of the foreign key\"\n        return self.__name\n\n    @property\n    def remote(self):\n        \"Returns the fqtn of the foreign table and if the link is reverse\"\n        return {'fqtn': self()._t_fqrn[1:], 'reverse': self.__name.find('_reverse_fkey_') == 0}\n\n    @property\n    def fk_names(self):\n        \"\"\"Returns the names of the fields composing the foreign key in the foreign table.\"\"\"\n        return self.__fk_names\n\n    @property\n    def names(self):\n        \"Returns the names of the fields composing the foreign key in the table\"\n        return self.__fields_names\n\n    def __repr__(self):\n        \"\"\"Representation of a foreign key\n        \"\"\"\n        fields = list(self.__fields)\n        fields = f\"({', '.join(fields)})\"\n        repr_ = f\"- {self.__name}: {fields}\\n \u21b3 {normalize_fqrn(self.__fk_fqrn)}({', '.join(self.fk_names)})\"\n        if self.__is_set:\n            repr_value = str(self.__fk_to)\n            res = []\n            for line in repr_value.split('\\n'):\n                res.append(f'     {line}')\n            res = '\\n'.join(res)\n            repr_ = f'{repr_}\\n{res}'\n        return repr_\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey-attributes","title":"Attributes","text":""},{"location":"api/fkey/#half_orm.fkey.FKey.confdeltype","title":"<code>confdeltype</code>  <code>property</code>","text":"<p>on delete configuration</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.confupdtype","title":"<code>confupdtype</code>  <code>property</code>","text":"<p>on update configuration</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.fk_names","title":"<code>fk_names</code>  <code>property</code>","text":"<p>Returns the names of the fields composing the foreign key in the foreign table.</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.name","title":"<code>name</code>  <code>property</code>","text":"<p>Returns the internal name of the foreign key</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.names","title":"<code>names</code>  <code>property</code>","text":"<p>Returns the names of the fields composing the foreign key in the table</p>"},{"location":"api/fkey/#half_orm.fkey.FKey.remote","title":"<code>remote</code>  <code>property</code>","text":"<p>Returns the fqtn of the foreign table and if the link is reverse</p>"},{"location":"api/fkey/#half_orm.fkey.FKey-functions","title":"Functions","text":""},{"location":"api/fkey/#half_orm.fkey.FKey.__call__","title":"<code>__call__(__cast__=None, **kwargs)</code>","text":"<p>Returns the relation referenced by the fkey. Uses the cast if it is set.</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def __call__(self, __cast__=None, **kwargs):\n    \"\"\"Returns the relation referenced by the fkey.\n    Uses the __cast__ if it is set.\n    \"\"\"\n    f_relation = self.__get_rel(__cast__ or normalize_qrn(self.__fk_fqrn))(**kwargs)\n    rev_fkey_name = f'_reverse_{f_relation.ho_id}'\n    f_relation._ho_fkeys[rev_fkey_name] = FKey(\n        rev_fkey_name,\n        f_relation,\n        f_relation._t_fqrn, self.__fields, self.__fk_names)\n    f_relation._ho_fkeys[rev_fkey_name].set(self.__relation)\n    return f_relation\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.__get_rel","title":"<code>__get_rel(fqtn)</code>","text":"<p>Returns the relation class referenced by fqtn. First try model._import_class fallback to model.get_relation_class on ImportError.</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def __get_rel(self, fqtn):\n    \"\"\"Returns the relation class referenced by fqtn.\n    First try model._import_class fallback to model.get_relation_class on ImportError.\n    \"\"\"\n    return self.__relation._ho_model._import_class(fqtn)\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.__repr__","title":"<code>__repr__()</code>","text":"<p>Representation of a foreign key</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def __repr__(self):\n    \"\"\"Representation of a foreign key\n    \"\"\"\n    fields = list(self.__fields)\n    fields = f\"({', '.join(fields)})\"\n    repr_ = f\"- {self.__name}: {fields}\\n \u21b3 {normalize_fqrn(self.__fk_fqrn)}({', '.join(self.fk_names)})\"\n    if self.__is_set:\n        repr_value = str(self.__fk_to)\n        res = []\n        for line in repr_value.split('\\n'):\n            res.append(f'     {line}')\n        res = '\\n'.join(res)\n        repr_ = f'{repr_}\\n{res}'\n    return repr_\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.is_set","title":"<code>is_set()</code>","text":"<p>Return if the foreign key is set (boolean).</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def is_set(self):\n    \"\"\"Return if the foreign key is set (boolean).\"\"\"\n    return self.__is_set\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey.FKey.set","title":"<code>set(__to)</code>","text":"<p>Sets the relation associated to the foreign key.</p> <p>TODO: check that the __to is indeed atteinable from self</p> Source code in <code>half_orm/fkey.py</code> <pre><code>def set(self, __to):\n    \"\"\"Sets the relation associated to the foreign key.\n\n    TODO: check that the __to is indeed atteinable from self\n    \"\"\"\n    # pylint: disable=import-outside-toplevel\n    from half_orm.relation import Relation\n\n    if not issubclass(__to.__class__, Relation):\n        raise RuntimeError(\"Fkey.set excepts an argument of type Relation\")\n    self.__to_relation = __to\n    from_ = self.__relation\n    self.__fk_from = from_\n    self.__fk_to = __to\n    self.__is_set = __to.ho_is_set()\n    from_._ho_join_to[self] = __to\n    return self\n</code></pre>"},{"location":"api/fkey/#half_orm.fkey-functions","title":"Functions","text":""},{"location":"api/model/","title":"Model","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/model/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/model/#reference","title":"Reference","text":""},{"location":"api/model/#half_orm.model","title":"<code>model</code>","text":"<p>This module provides the class Model.</p> <p>The class Model is responsible for the connection to the PostgreSQL database.</p> <p>Once connected, you can use the <code>get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;</code>_ method to generate a class to access any relation (table/view) in your database.</p> Example <p>from half_orm.model import Model model = Model('my_config_file') class MyTable(model.get_relation_class('my_schema.my_table')): ...     # Your business code goes here</p> Note <p>The default schema is <code>public</code> in PostgreSQL, so to reference a table <code>my_table</code> in this schema you'll have to use <code>pubic.my_table</code>.</p>"},{"location":"api/model/#half_orm.model-classes","title":"Classes","text":""},{"location":"api/model/#half_orm.model.Model","title":"<code>Model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>the configuration file that contains the informations to connect to the database.</p> required <code>scope</code> <code>Optional[str]</code> <p>used to agregate several modules in a package. See <code>hop &lt;https://github.com/collorg/halfORM/blob/main/doc/hop.md&gt;</code>_.</p> <code>None</code> Note <p>The config_file is searched in the <code>HALFORM_CONF_DIR</code> variable if specified, then in <code>/etc/half_orm</code>. The file format is as follows:</p> <pre><code>| [database]\n| name = &lt;postgres db name&gt;\n| user = &lt;postgres user&gt;\n| password = &lt;postgres password&gt;\n| host = &lt;host name | localhost&gt;\n| port = &lt;port | 5432&gt;\n</code></pre> <p>name is the only mandatory entry if you are using an <code>ident login with a local account &lt;https://www.postgresql.org/docs/current/auth-ident.html&gt;</code>_.</p> Source code in <code>half_orm/model.py</code> <pre><code>class Model:\n    \"\"\"\n    Parameters:\n        config_file (str): the configuration file that contains the informations to connect\n            to the database.\n        scope (Optional[str]): used to agregate several modules in a package.\n            See `hop &lt;https://github.com/collorg/halfORM/blob/main/doc/hop.md&gt;`_.\n\n    Note:\n        The **config_file** is searched in the `HALFORM_CONF_DIR` variable if specified,\n        then in `/etc/half_orm`. The file format is as follows:\n\n            | [database]\n            | name = &lt;postgres db name&gt;\n            | user = &lt;postgres user&gt;\n            | password = &lt;postgres password&gt;\n            | host = &lt;host name | localhost&gt;\n            | port = &lt;port | 5432&gt;\n\n        *name* is the only mandatory entry if you are using an\n        `ident login with a local account &lt;https://www.postgresql.org/docs/current/auth-ident.html&gt;`_.\n    \"\"\"\n    __deja_vu = {}\n    _classes_ = {}\n    def __init__(self, config_file: None, scope: str=None):\n        \"\"\"Model constructor\n\n        Use @config_file in your scripts. The @dbname parameter is\n        reserved to the __factory metaclass.\n        \"\"\"\n        self.__dbinfo = {}\n        self.__production_mode = True\n        self.__load_config(config_file)\n        self._scope = scope and scope.split('.')[0]\n        self.__conn = None\n        self.__connect()\n\n    def __load_config(self, config_file):\n        \"\"\"Load the config file\n\n        Raises:\n            MissingConfigFile: If the **config_file** is not found in *HALFORM_CONF_DIR*.\n            MalformedConfigFile: if the *name* is missing in the **config_file**.\n            RuntimeError: If the reconnection is attempted on another database.\n        \"\"\"\n        self.__config_file = config_file\n        config = ConfigParser()\n        file_ = os.path.join(CONF_DIR, self.__config_file)\n        if config.read([file_]):\n            try:\n                database = config['database']\n            except KeyError as exc:\n                raise model_errors.MalformedConfigFile(file_, 'Missing section', 'database') from exc\n            try:\n                dbname = database['name']\n            except KeyError as exc:\n                raise model_errors.MalformedConfigFile(file_, 'Missing mandatory parameter', 'name') from exc\n\n            if self.__dbinfo and dbname != self.__dbname:\n                raise RuntimeError(\n                    f\"Can't reconnect to another database: {dbname} != {self.__dbname}\")\n            self.__dbinfo['dbname'] = dbname\n\n        else:\n            dbname = config_file\n            self.__dbinfo['dbname'] = dbname\n            # WARNING: use peer authentication only in development environment\n            database = {'user': None, 'password': None, 'host': None, 'port': None, 'devel': True}\n\n        self.__dbinfo['user'] = database.get('user')\n        self.__dbinfo['password'] = database.get('password')\n        self.__dbinfo['host'] = database.get('host')\n        self.__dbinfo['port'] = database.get('port')\n        self.__dbinfo['connect_timeout'] = database.get('timeout', 3)\n        self.__production_mode = database.get('devel', False)\n\n    def __connect(self, config_file: str=None, reload: bool=False):\n        \"\"\"Setup a new connection to the database.\n\n        The reconnect method is an alias to the ``__connect`` method.\n\n        Parameters:\n            config_file (str): If a config_file is provided, the connection is made with the new\n                parameters, allowing to change role. The database name must be the same.\n            reload (bool): If set to True, reloads the metadata from the database. Usefull if\n                the model has changed.\n        \"\"\"\n        self.disconnect()\n\n        if config_file:\n            self.__load_config(config_file)\n        self.__conn = psycopg2.connect(**self.__dbinfo, cursor_factory=RealDictCursor)\n        self.__conn.autocommit = True\n        self.__pg_meta = pg_meta.PgMeta(self.__conn, reload)\n        if reload:\n            self._classes_[self._dbname] = {}\n        if self.__dbname not in self.__class__.__deja_vu:\n            self.__deja_vu[self.__dbname] = self\n\n    reconnect = __connect\n\n    def get_relation_class(self, relation_name: str, fields_aliases: typing.Dict=None): # -&gt; Relation\n        \"\"\"This method is a factory that generates a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class.\n\n        Args:\n            relation_name (string): the full name (`&lt;schema&gt;.&lt;relation&gt;`) of the targeted relation in the database.\n\n        Raises:\n            ValueError: if the schema is missing in relation_name\n            UnknownRelationError: if the relation is not found in the database\n\n        Returns:\n            a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class:\n                the class corresponding to the relation in the database.\n\n        Examples:\n            A class inheriting the `Relation &lt;#half_orm.relation.Relation&gt;`_ class is returned:\n                &gt;&gt;&gt; Person = model.get_relation_class('actor.person')\n                &gt;&gt;&gt; Person\n                &lt;class 'half_orm.relation.Table_HalftestActorPerson'&gt;\n                &gt;&gt;&gt; Person.__bases__\n                (&lt;class 'half_orm.relation.Relation'&gt;,)\n\n            A prefered way to create a class:\n                &gt;&gt;&gt; class Person(model.get_relation_class('actor.person)):\n                &gt;&gt;&gt;     # Your code goes here\n\n            A `MissingSchemaInName &lt;#half_orm.model_errors.MissingSchemaInName&gt;`_ is raised when the schema name is missing:\n                &gt;&gt;&gt; model.get_relation_class('person')\n                [...]MissingSchemaInName: do you mean 'public.person'?\n\n            An `UnknownRelation &lt;#half_orm.model_errors.UnknownRelation&gt;`_ is raised if the relation is not found in the model:\n                &gt;&gt;&gt; model.get_relation_class('public.person')\n                [...]UnknownRelation: 'public.person' does not exist in the database halftest.\n        \"\"\"\n        try:\n            schema, table = relation_name.replace('\"', '').rsplit('.', 1)\n        except ValueError as err:\n            raise model_errors.MissingSchemaInName(relation_name) from err\n        return factory({'fqrn': (self.__dbname, schema, table), 'model': self.__deja_vu[self.__dbname], 'fields_aliases':fields_aliases})\n\n\n    @staticmethod\n    def _deja_vu(dbname):\n        \"\"\"Returns None if the database hasn't been loaded yet.\n        Otherwise, it returns the Model object already loaded.\n        The Model object is shared between all_ the relations in the\n        database. The Model object is loaded only once for a given database.\n        \"\"\"\n        return Model.__deja_vu.get(dbname)\n\n    @property\n    def __dbname(self):\n        return self.__dbinfo['dbname']\n\n    def ping(self):\n        \"\"\"Checks if the connection is still established.\n        Attempts a new connection otherwise.\n\n        Returns:\n            bool: True if the connection is established, False otherwise.\n        \"\"\"\n        try:\n            self.execute_query(\"select 1\")\n            return True\n        except (psycopg2.OperationalError, psycopg2.InterfaceError):\n            try:\n                self.__connect()\n                self.execute_query(\"select 1\")\n            except (psycopg2.OperationalError, psycopg2.InterfaceError) as exc: #pragma: no cover\n                # log reconnection attempt failure\n                sys.stderr.write(f'{exc.exception}\\n')\n                sys.stderr.flush()\n            return False\n\n    def disconnect(self):\n        \"\"\"Closes the connection to the database.\n        \"\"\"\n        if self.__conn is not None and not self.__conn.closed:\n            self.__conn.close()\n\n    def _reload(self, config_file=None):\n        \"\"\"Reload metadata\n\n        Updates the model according to changes made to the database.\n        \"\"\"\n        self.__connect(config_file, True)\n\n    @property\n    def _dbname(self):\n        \"\"\"\n        property. Returns the database name.\n        \"\"\"\n        return self.__dbname\n\n    @property\n    def _connection(self):\n        \"\"\"\\\n        Property. Returns the psycopg2 connection attached to the Model object.\n        \"\"\"\n        return self.__conn\n\n    def _fields_metadata(self, sfqrn):\n        \"Proxy to PgMeta.fields_meta\"\n        return self.__pg_meta.fields_meta(self.__dbname, sfqrn)\n\n    def _fkeys_metadata(self, sfqrn):\n        \"Proxy to PgMeta.fkeys_meta\"\n        return self.__pg_meta.fkeys_meta(self.__dbname, sfqrn)\n\n    def _relation_metadata(self, fqrn):\n        \"Proxy to PgMeta.relation_meta\"\n        return self.__pg_meta.relation_meta(self.__dbname, fqrn)\n\n    def _unique_constraints_list(self, fqrn):\n        \"Proxy to PgMeta._unique_constraints_list\"\n        return self.__pg_meta._unique_constraints_list(self.__dbname, fqrn)\n\n    def _pkey_constraint(self, fqrn):\n        \"Proxy to PgMeta._pkey_constraint\"\n        return self.__pg_meta._pkey_constraint(self.__dbname, fqrn)\n\n    def execute_query(self, query, values=None, mogrify=False):\n        \"\"\"Executes a raw SQL query.\n\n        Warning:\n            This method calls the psycopg2\n            `cursor.execute &lt;https://www.psycopg.org/docs/cursor.html?highlight=execute#cursor.execute&gt;`_\n            function.\n            Please read the psycopg2 documentation on\n            `passing parameters to SQL queries &lt;https://www.psycopg.org/docs/usage.html#query-parameters&gt;`_.\n        \"\"\"\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        try:\n            if mogrify:\n                print(cursor.mogrify(query, values).decode('utf-8'))\n            cursor.execute(query, values)\n        except (psycopg2.OperationalError, psycopg2.InterfaceError):\n            self.ping()\n            cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n            cursor.execute(query, values)\n        except Exception as exc:\n            vals = ''\n            if not self.__production_mode:\n                # report values only in development mode\n                vals = f\"values: {values}\\n\"\n            utils.error(f\"Query execution failed:\\nquery: {query}\\n{vals}\")\n            raise exc\n        return cursor\n\n    def execute_function(self, fct_name, *args, **kwargs) -&gt; typing.List[tuple]:\n        \"\"\"`Executes a PostgreSQL function &lt;https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html&gt;`_.\n\n        Arguments:\n            *args: The list of parameters to be passed to the postgresql function.\n            **kwargs: The list of named parameters to be passed to the postgresql function.\n\n        Returns:\n            List[tuple]: a list of tuples.\n\n        Raises:\n            RuntimeError: If you mix ***args** and ****kwargs**.\n\n        Note:\n            You can't mix args and kwargs with the execute_function method!\n        \"\"\"\n        if bool(args) and bool(kwargs):\n            raise RuntimeError(\"You can't mix args and kwargs with the execute_function method!\")\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        if kwargs:\n            values = kwargs\n        else:\n            values = args\n        cursor.callproc(fct_name, values)\n        return cursor.fetchall()\n\n    def call_procedure(self, proc_name, *args, **kwargs):\n        \"\"\"`Executes a PostgreSQL procedure &lt;https://www.postgresql.org/docs/current/sql-call.html&gt;`_.\n\n        Arguments:\n            *args: The list of parameters to be passed to the postgresql function.\n            **kwargs: The list of named parameters to be passed to the postgresql function.\n\n        Returns:\n            None | List[tuple]: None or a list of tuples.\n\n        Raises:\n            RuntimeError: If you mix ***args** and ****kwargs**.\n\n        Note:\n            You can't mix args and kwargs with the call_procedure method!\n        \"\"\"\n        if bool(args) and bool(kwargs):\n            raise RuntimeError(\"You can't mix args and kwargs with the call_procedure method!\")\n        if kwargs:\n            params = ', '.join([f'{key} =&gt; %s' for key in kwargs])\n            values = tuple(kwargs.values())\n        else:\n            params = ', '.join(['%s' for _ in range(len(args))])\n            values = args\n        query = f'call {proc_name}({params})'\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        cursor.execute(query, values)\n        try:\n            return cursor.fetchall()\n        except psycopg2.ProgrammingError:\n            return None\n\n    def has_relation(self, qtn: str) -&gt; bool:\n        \"\"\"Checks if the qtn is a relation in the database\n\n        Returns:\n            bool: True if the relation exists in the database, False otherwise.\n\n        Example:\n            &gt;&gt;&gt; model.has_relation('public.person')\n            False\n            &gt;&gt;&gt; model.has_relation('actor.person')\n            True\n        \"\"\"\n        return self.__pg_meta.has_relation(self.__dbname, *qtn.rsplit('.', 1))\n\n    def _import_class(self, qtn, scope=None):\n        \"\"\"Used to return the class from the scope module.\n\n        This method is used to import a class from a module. The module\n        must reside in an accessible python package named `scope`.\n        \"\"\"\n        t_qtn = qtn.replace('\"', '').rsplit('.', 1)\n        self._scope = scope or self._scope\n        module_path = \".\".join(t_qtn)\n        if self._scope:\n            module_path = f'{self._scope}.{module_path}'\n        _class_name = pg_meta.class_name(qtn) # XXX\n        try:\n            module = __import__(\n                module_path, globals(), locals(), [_class_name], 0)\n            return module.__dict__[_class_name]\n        except:\n            return self.get_relation_class(qtn)\n\n    def _relations(self):\n        \"\"\"List all_ the relations in the database\"\"\"\n        rels = self.__pg_meta.relations_list(self.__dbname)\n        return rels\n\n    def desc(self):\n        \"\"\"Returns the list of the relations of the model.\n\n        Each element in the list contains:\n\n        * the relation type: 'r' relation, 'v' view, 'm' materialized view, 'p' partition;\n        * a tuple identifying the relation: (db name&gt;, &lt;schema name&gt;, &lt;relation name&gt;);\n        * a list of tuples indentifying the inherited relations.\n\n        Example:\n            &gt;&gt;&gt; from half_orm.model import Model\n            &gt;&gt;&gt; halftest = Model('halftest')\n            &gt;&gt;&gt; halftest.desc()\n            [('r', ('halftest', 'actor', 'person'), []), ('r', ('halftest', 'blog', 'comment'), []), ('r', ('halftest', 'blog', 'event'), [('halftest', 'blog', 'post')]), ('r', ('halftest', 'blog', 'post'), []), ('v', ('halftest', 'blog.view', 'post_comment'), [])]\n        \"\"\"\n        return self.__pg_meta.desc(self.__dbname)\n\n    def __str__(self):\n        return self.__pg_meta.str(self.__dbname)\n\n    def classes(self):\n        \"Returns the all the classes of the model\"\n        for relation in self._relations():\n            package_name = relation[1][0]\n            module_name = \".\".join(relation[1][1:])\n            if module_name.find('half_orm_meta') == 0:\n                continue\n            class_name = pg_meta.camel_case(relation[1][-1])\n            module = importlib.import_module(f\".{module_name}\", package_name)\n            yield getattr(module, class_name), relation[0]\n</code></pre>"},{"location":"api/model/#half_orm.model.Model-functions","title":"Functions","text":""},{"location":"api/model/#half_orm.model.Model.__connect","title":"<code>__connect(config_file=None, reload=False)</code>","text":"<p>Setup a new connection to the database.</p> <p>The reconnect method is an alias to the <code>__connect</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>If a config_file is provided, the connection is made with the new parameters, allowing to change role. The database name must be the same.</p> <code>None</code> <code>reload</code> <code>bool</code> <p>If set to True, reloads the metadata from the database. Usefull if the model has changed.</p> <code>False</code> Source code in <code>half_orm/model.py</code> <pre><code>def __connect(self, config_file: str=None, reload: bool=False):\n    \"\"\"Setup a new connection to the database.\n\n    The reconnect method is an alias to the ``__connect`` method.\n\n    Parameters:\n        config_file (str): If a config_file is provided, the connection is made with the new\n            parameters, allowing to change role. The database name must be the same.\n        reload (bool): If set to True, reloads the metadata from the database. Usefull if\n            the model has changed.\n    \"\"\"\n    self.disconnect()\n\n    if config_file:\n        self.__load_config(config_file)\n    self.__conn = psycopg2.connect(**self.__dbinfo, cursor_factory=RealDictCursor)\n    self.__conn.autocommit = True\n    self.__pg_meta = pg_meta.PgMeta(self.__conn, reload)\n    if reload:\n        self._classes_[self._dbname] = {}\n    if self.__dbname not in self.__class__.__deja_vu:\n        self.__deja_vu[self.__dbname] = self\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.__init__","title":"<code>__init__(config_file, scope=None)</code>","text":"<p>Model constructor</p> <p>Use @config_file in your scripts. The @dbname parameter is reserved to the __factory metaclass.</p> Source code in <code>half_orm/model.py</code> <pre><code>def __init__(self, config_file: None, scope: str=None):\n    \"\"\"Model constructor\n\n    Use @config_file in your scripts. The @dbname parameter is\n    reserved to the __factory metaclass.\n    \"\"\"\n    self.__dbinfo = {}\n    self.__production_mode = True\n    self.__load_config(config_file)\n    self._scope = scope and scope.split('.')[0]\n    self.__conn = None\n    self.__connect()\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.__load_config","title":"<code>__load_config(config_file)</code>","text":"<p>Load the config file</p> <p>Raises:</p> Type Description <code>MissingConfigFile</code> <p>If the config_file is not found in HALFORM_CONF_DIR.</p> <code>MalformedConfigFile</code> <p>if the name is missing in the config_file.</p> <code>RuntimeError</code> <p>If the reconnection is attempted on another database.</p> Source code in <code>half_orm/model.py</code> <pre><code>def __load_config(self, config_file):\n    \"\"\"Load the config file\n\n    Raises:\n        MissingConfigFile: If the **config_file** is not found in *HALFORM_CONF_DIR*.\n        MalformedConfigFile: if the *name* is missing in the **config_file**.\n        RuntimeError: If the reconnection is attempted on another database.\n    \"\"\"\n    self.__config_file = config_file\n    config = ConfigParser()\n    file_ = os.path.join(CONF_DIR, self.__config_file)\n    if config.read([file_]):\n        try:\n            database = config['database']\n        except KeyError as exc:\n            raise model_errors.MalformedConfigFile(file_, 'Missing section', 'database') from exc\n        try:\n            dbname = database['name']\n        except KeyError as exc:\n            raise model_errors.MalformedConfigFile(file_, 'Missing mandatory parameter', 'name') from exc\n\n        if self.__dbinfo and dbname != self.__dbname:\n            raise RuntimeError(\n                f\"Can't reconnect to another database: {dbname} != {self.__dbname}\")\n        self.__dbinfo['dbname'] = dbname\n\n    else:\n        dbname = config_file\n        self.__dbinfo['dbname'] = dbname\n        # WARNING: use peer authentication only in development environment\n        database = {'user': None, 'password': None, 'host': None, 'port': None, 'devel': True}\n\n    self.__dbinfo['user'] = database.get('user')\n    self.__dbinfo['password'] = database.get('password')\n    self.__dbinfo['host'] = database.get('host')\n    self.__dbinfo['port'] = database.get('port')\n    self.__dbinfo['connect_timeout'] = database.get('timeout', 3)\n    self.__production_mode = database.get('devel', False)\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.call_procedure","title":"<code>call_procedure(proc_name, *args, **kwargs)</code>","text":"<p><code>Executes a PostgreSQL procedure &lt;https://www.postgresql.org/docs/current/sql-call.html&gt;</code>_.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>The list of parameters to be passed to the postgresql function.</p> <code>()</code> <code>**kwargs</code> <p>The list of named parameters to be passed to the postgresql function.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None | List[tuple]: None or a list of tuples.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If you mix ***args** and ****kwargs**.</p> Note <p>You can't mix args and kwargs with the call_procedure method!</p> Source code in <code>half_orm/model.py</code> <pre><code>def call_procedure(self, proc_name, *args, **kwargs):\n    \"\"\"`Executes a PostgreSQL procedure &lt;https://www.postgresql.org/docs/current/sql-call.html&gt;`_.\n\n    Arguments:\n        *args: The list of parameters to be passed to the postgresql function.\n        **kwargs: The list of named parameters to be passed to the postgresql function.\n\n    Returns:\n        None | List[tuple]: None or a list of tuples.\n\n    Raises:\n        RuntimeError: If you mix ***args** and ****kwargs**.\n\n    Note:\n        You can't mix args and kwargs with the call_procedure method!\n    \"\"\"\n    if bool(args) and bool(kwargs):\n        raise RuntimeError(\"You can't mix args and kwargs with the call_procedure method!\")\n    if kwargs:\n        params = ', '.join([f'{key} =&gt; %s' for key in kwargs])\n        values = tuple(kwargs.values())\n    else:\n        params = ', '.join(['%s' for _ in range(len(args))])\n        values = args\n    query = f'call {proc_name}({params})'\n    cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n    cursor.execute(query, values)\n    try:\n        return cursor.fetchall()\n    except psycopg2.ProgrammingError:\n        return None\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.classes","title":"<code>classes()</code>","text":"<p>Returns the all the classes of the model</p> Source code in <code>half_orm/model.py</code> <pre><code>def classes(self):\n    \"Returns the all the classes of the model\"\n    for relation in self._relations():\n        package_name = relation[1][0]\n        module_name = \".\".join(relation[1][1:])\n        if module_name.find('half_orm_meta') == 0:\n            continue\n        class_name = pg_meta.camel_case(relation[1][-1])\n        module = importlib.import_module(f\".{module_name}\", package_name)\n        yield getattr(module, class_name), relation[0]\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.desc","title":"<code>desc()</code>","text":"<p>Returns the list of the relations of the model.</p> <p>Each element in the list contains:</p> <ul> <li>the relation type: 'r' relation, 'v' view, 'm' materialized view, 'p' partition;</li> <li>a tuple identifying the relation: (db name&gt;, , ); <li>a list of tuples indentifying the inherited relations.</li> Example <p>from half_orm.model import Model halftest = Model('halftest') halftest.desc() [('r', ('halftest', 'actor', 'person'), []), ('r', ('halftest', 'blog', 'comment'), []), ('r', ('halftest', 'blog', 'event'), [('halftest', 'blog', 'post')]), ('r', ('halftest', 'blog', 'post'), []), ('v', ('halftest', 'blog.view', 'post_comment'), [])]</p> Source code in <code>half_orm/model.py</code> <pre><code>def desc(self):\n    \"\"\"Returns the list of the relations of the model.\n\n    Each element in the list contains:\n\n    * the relation type: 'r' relation, 'v' view, 'm' materialized view, 'p' partition;\n    * a tuple identifying the relation: (db name&gt;, &lt;schema name&gt;, &lt;relation name&gt;);\n    * a list of tuples indentifying the inherited relations.\n\n    Example:\n        &gt;&gt;&gt; from half_orm.model import Model\n        &gt;&gt;&gt; halftest = Model('halftest')\n        &gt;&gt;&gt; halftest.desc()\n        [('r', ('halftest', 'actor', 'person'), []), ('r', ('halftest', 'blog', 'comment'), []), ('r', ('halftest', 'blog', 'event'), [('halftest', 'blog', 'post')]), ('r', ('halftest', 'blog', 'post'), []), ('v', ('halftest', 'blog.view', 'post_comment'), [])]\n    \"\"\"\n    return self.__pg_meta.desc(self.__dbname)\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.disconnect","title":"<code>disconnect()</code>","text":"<p>Closes the connection to the database.</p> Source code in <code>half_orm/model.py</code> <pre><code>def disconnect(self):\n    \"\"\"Closes the connection to the database.\n    \"\"\"\n    if self.__conn is not None and not self.__conn.closed:\n        self.__conn.close()\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.execute_function","title":"<code>execute_function(fct_name, *args, **kwargs)</code>","text":"<p><code>Executes a PostgreSQL function &lt;https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html&gt;</code>_.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>The list of parameters to be passed to the postgresql function.</p> <code>()</code> <code>**kwargs</code> <p>The list of named parameters to be passed to the postgresql function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[tuple]</code> <p>List[tuple]: a list of tuples.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If you mix ***args** and ****kwargs**.</p> Note <p>You can't mix args and kwargs with the execute_function method!</p> Source code in <code>half_orm/model.py</code> <pre><code>def execute_function(self, fct_name, *args, **kwargs) -&gt; typing.List[tuple]:\n    \"\"\"`Executes a PostgreSQL function &lt;https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html&gt;`_.\n\n    Arguments:\n        *args: The list of parameters to be passed to the postgresql function.\n        **kwargs: The list of named parameters to be passed to the postgresql function.\n\n    Returns:\n        List[tuple]: a list of tuples.\n\n    Raises:\n        RuntimeError: If you mix ***args** and ****kwargs**.\n\n    Note:\n        You can't mix args and kwargs with the execute_function method!\n    \"\"\"\n    if bool(args) and bool(kwargs):\n        raise RuntimeError(\"You can't mix args and kwargs with the execute_function method!\")\n    cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n    if kwargs:\n        values = kwargs\n    else:\n        values = args\n    cursor.callproc(fct_name, values)\n    return cursor.fetchall()\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.execute_query","title":"<code>execute_query(query, values=None, mogrify=False)</code>","text":"<p>Executes a raw SQL query.</p> Warning <p>This method calls the psycopg2 <code>cursor.execute &lt;https://www.psycopg.org/docs/cursor.html?highlight=execute#cursor.execute&gt;</code>_ function. Please read the psycopg2 documentation on <code>passing parameters to SQL queries &lt;https://www.psycopg.org/docs/usage.html#query-parameters&gt;</code>_.</p> Source code in <code>half_orm/model.py</code> <pre><code>def execute_query(self, query, values=None, mogrify=False):\n    \"\"\"Executes a raw SQL query.\n\n    Warning:\n        This method calls the psycopg2\n        `cursor.execute &lt;https://www.psycopg.org/docs/cursor.html?highlight=execute#cursor.execute&gt;`_\n        function.\n        Please read the psycopg2 documentation on\n        `passing parameters to SQL queries &lt;https://www.psycopg.org/docs/usage.html#query-parameters&gt;`_.\n    \"\"\"\n    cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n    try:\n        if mogrify:\n            print(cursor.mogrify(query, values).decode('utf-8'))\n        cursor.execute(query, values)\n    except (psycopg2.OperationalError, psycopg2.InterfaceError):\n        self.ping()\n        cursor = self.__conn.cursor(cursor_factory=RealDictCursor)\n        cursor.execute(query, values)\n    except Exception as exc:\n        vals = ''\n        if not self.__production_mode:\n            # report values only in development mode\n            vals = f\"values: {values}\\n\"\n        utils.error(f\"Query execution failed:\\nquery: {query}\\n{vals}\")\n        raise exc\n    return cursor\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.get_relation_class","title":"<code>get_relation_class(relation_name, fields_aliases=None)</code>","text":"<p>This method is a factory that generates a class that inherits the <code>Relation &lt;#half_orm.relation.Relation&gt;</code>_ class.</p> <p>Parameters:</p> Name Type Description Default <code>relation_name</code> <code>string</code> <p>the full name (<code>&lt;schema&gt;.&lt;relation&gt;</code>) of the targeted relation in the database.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the schema is missing in relation_name</p> <code>UnknownRelationError</code> <p>if the relation is not found in the database</p> <p>Returns:</p> Type Description <p>a class that inherits the <code>Relation &lt;#half_orm.relation.Relation&gt;</code>_ class: the class corresponding to the relation in the database.</p> <p>Examples:</p> <p>A class inheriting the <code>Relation &lt;#half_orm.relation.Relation&gt;</code>_ class is returned:     &gt;&gt;&gt; Person = model.get_relation_class('actor.person')     &gt;&gt;&gt; Person          &gt;&gt;&gt; Person.bases     (,) <p>A prefered way to create a class:     &gt;&gt;&gt; class Person(model.get_relation_class('actor.person)):     &gt;&gt;&gt;     # Your code goes here</p> <p>A <code>MissingSchemaInName &lt;#half_orm.model_errors.MissingSchemaInName&gt;</code>_ is raised when the schema name is missing:     &gt;&gt;&gt; model.get_relation_class('person')     [...]MissingSchemaInName: do you mean 'public.person'?</p> <p>An <code>UnknownRelation &lt;#half_orm.model_errors.UnknownRelation&gt;</code>_ is raised if the relation is not found in the model:     &gt;&gt;&gt; model.get_relation_class('public.person')     [...]UnknownRelation: 'public.person' does not exist in the database halftest.</p> Source code in <code>half_orm/model.py</code> <pre><code>def get_relation_class(self, relation_name: str, fields_aliases: typing.Dict=None): # -&gt; Relation\n    \"\"\"This method is a factory that generates a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class.\n\n    Args:\n        relation_name (string): the full name (`&lt;schema&gt;.&lt;relation&gt;`) of the targeted relation in the database.\n\n    Raises:\n        ValueError: if the schema is missing in relation_name\n        UnknownRelationError: if the relation is not found in the database\n\n    Returns:\n        a class that inherits the `Relation &lt;#half_orm.relation.Relation&gt;`_ class:\n            the class corresponding to the relation in the database.\n\n    Examples:\n        A class inheriting the `Relation &lt;#half_orm.relation.Relation&gt;`_ class is returned:\n            &gt;&gt;&gt; Person = model.get_relation_class('actor.person')\n            &gt;&gt;&gt; Person\n            &lt;class 'half_orm.relation.Table_HalftestActorPerson'&gt;\n            &gt;&gt;&gt; Person.__bases__\n            (&lt;class 'half_orm.relation.Relation'&gt;,)\n\n        A prefered way to create a class:\n            &gt;&gt;&gt; class Person(model.get_relation_class('actor.person)):\n            &gt;&gt;&gt;     # Your code goes here\n\n        A `MissingSchemaInName &lt;#half_orm.model_errors.MissingSchemaInName&gt;`_ is raised when the schema name is missing:\n            &gt;&gt;&gt; model.get_relation_class('person')\n            [...]MissingSchemaInName: do you mean 'public.person'?\n\n        An `UnknownRelation &lt;#half_orm.model_errors.UnknownRelation&gt;`_ is raised if the relation is not found in the model:\n            &gt;&gt;&gt; model.get_relation_class('public.person')\n            [...]UnknownRelation: 'public.person' does not exist in the database halftest.\n    \"\"\"\n    try:\n        schema, table = relation_name.replace('\"', '').rsplit('.', 1)\n    except ValueError as err:\n        raise model_errors.MissingSchemaInName(relation_name) from err\n    return factory({'fqrn': (self.__dbname, schema, table), 'model': self.__deja_vu[self.__dbname], 'fields_aliases':fields_aliases})\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.has_relation","title":"<code>has_relation(qtn)</code>","text":"<p>Checks if the qtn is a relation in the database</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the relation exists in the database, False otherwise.</p> Example <p>model.has_relation('public.person') False model.has_relation('actor.person') True</p> Source code in <code>half_orm/model.py</code> <pre><code>def has_relation(self, qtn: str) -&gt; bool:\n    \"\"\"Checks if the qtn is a relation in the database\n\n    Returns:\n        bool: True if the relation exists in the database, False otherwise.\n\n    Example:\n        &gt;&gt;&gt; model.has_relation('public.person')\n        False\n        &gt;&gt;&gt; model.has_relation('actor.person')\n        True\n    \"\"\"\n    return self.__pg_meta.has_relation(self.__dbname, *qtn.rsplit('.', 1))\n</code></pre>"},{"location":"api/model/#half_orm.model.Model.ping","title":"<code>ping()</code>","text":"<p>Checks if the connection is still established. Attempts a new connection otherwise.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the connection is established, False otherwise.</p> Source code in <code>half_orm/model.py</code> <pre><code>def ping(self):\n    \"\"\"Checks if the connection is still established.\n    Attempts a new connection otherwise.\n\n    Returns:\n        bool: True if the connection is established, False otherwise.\n    \"\"\"\n    try:\n        self.execute_query(\"select 1\")\n        return True\n    except (psycopg2.OperationalError, psycopg2.InterfaceError):\n        try:\n            self.__connect()\n            self.execute_query(\"select 1\")\n        except (psycopg2.OperationalError, psycopg2.InterfaceError) as exc: #pragma: no cover\n            # log reconnection attempt failure\n            sys.stderr.write(f'{exc.exception}\\n')\n            sys.stderr.flush()\n        return False\n</code></pre>"},{"location":"api/model/#half_orm.model-functions","title":"Functions","text":""},{"location":"api/relation/","title":"Relation","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/relation/#overview","title":"Overview","text":""},{"location":"api/relation/#method-categories","title":"Method Categories","text":"<p>Relation methods are divided into two categories:</p>"},{"location":"api/relation/#query-builders-lazy","title":"Query Builders (Lazy)","text":"<p>Return modified relation objects without executing SQL: - <code>ho_order_by()</code>, <code>ho_limit()</code>, <code>ho_offset()</code> - Set operations: <code>&amp;</code>, <code>|</code>, <code>-</code>, <code>^</code> - Foreign key navigation: <code>relation_fk()</code>, <code>relation_rfk()</code></p>"},{"location":"api/relation/#query-executors-eager","title":"Query Executors (Eager)","text":"<p>Execute SQL immediately and return results: - <code>ho_select(*fields)</code> \u2192 Generator - <code>ho_count()</code> \u2192 int - <code>ho_get()</code> \u2192 dict - <code>ho_is_empty()</code> \u2192 bool - <code>ho_insert()</code>, <code>ho_update()</code>, <code>ho_delete()</code> \u2192 dict</p> <p>No Chaining After Execution</p> <pre><code># \u2705 Chain builders first\nquery = Author().ho_order_by('name').ho_limit(10)\n\n# \u2705 Then execute\nresults = query.ho_select('name')  # Returns generator\n\n# \u274c Cannot chain after execution\n# results.ho_order_by('email')  # ERROR!\n</code></pre> <p>Conceptual Background</p> <p>This builder/executor pattern is core to halfORM's design. Learn more in halfORM Fundamentals.</p>"},{"location":"api/relation/#reference","title":"Reference","text":""},{"location":"api/relation/#half_orm.relation","title":"<code>relation</code>","text":"<p>This module is used by the <code>model &lt;#module-half_orm.model&gt;</code>_ module to generate the classes that manipulate the data in your database with the <code>Model.get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;</code>_ method.</p> Example <p>from half_orm.model import Model model = Model('halftest') class Person(model.get_relation_class('actor.person')):     # your code goes here</p> <p>Main methods provided by the class Relation: - ho_insert: inserts a tuple into the pg table. - ho_select: returns a generator of the elements of the set defined by   the constraint on the Relation object. The elements are dictionaries with the   keys corresponding to the selected columns names in the relation.   The result is affected by the methods: ho_distinct, ho_order_by, ho_limit and ho_offset   (see below). - ho_update: updates the set defined by the constraint on the Relation object   with the values passed as arguments. - ho_delete: deletes from the relation the set of elements defined by the constraint   on the Relation object. - ho_get: returns the unique element defined by the constraint on the Relation object.   the element returned if of the type of the Relation object.</p> <p>The following methods can be chained on the object before a select.</p> <ul> <li>ho_distinct: ensures that there are no duplicates on the select result.</li> <li>ho_order_by: sets the order of the select result.</li> <li>ho_limit: limits the number of elements returned by the select method.</li> <li>ho_offset: sets the offset for the select method.</li> </ul>"},{"location":"api/relation/#half_orm.relation-classes","title":"Classes","text":""},{"location":"api/relation/#half_orm.relation.DC_Relation","title":"<code>DC_Relation</code>  <code>dataclass</code>","text":"Source code in <code>half_orm/relation.py</code> <pre><code>@dataclass\nclass DC_Relation: # pragma: no cover\n    def __init__(self, **kwargs): ...\n\n    def ho_insert(self, *args: List[str]) -&gt; Dict:\n        \"\"\"Insert a new tuple into the Relation.\n\n        Returns:\n            Dict: A dictionary containing the data inserted.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n            &gt;&gt;&gt; print(gaston)\n            {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n        Note:\n            It is not possible to insert more than one row with the ho_insert method\n        \"\"\"\n        ...\n    def ho_select(self, *args: List[str]) -&gt; [Dict]:\n        \"\"\"Gets the set of values correponding to the constraint attached to self.\n        This method is a generator.\n\n        Arguments:\n            *args: the fields names of the returned attributes. If omitted,\n                all the fields are returned.\n\n        Yields:\n            the result of the query as a list of dictionaries.\n\n        Example:\n            &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n            &gt;&gt;&gt;     print(person)\n            {'id': 1772}\n        \"\"\"\n        ...\n\n    def ho_update(self, *args, update_all=False, **kwargs) -&gt; [Dict]:\n        \"\"\"Updates the elements defined by self.\n\n        Arguments:\n            **kwargs: the values to be updated {[field name:value]}\n            *args [Optional]: the list of columns names to return in the dictionary list for the updated elements. If args is ('*', ), returns all the columns values.\n            update_all: a boolean that must be set to True if there is no constraint on\n            self. Defaults to False.\n        \"\"\"\n        ...\n\n    def ho_delete(self, *args, delete_all=False) -&gt; [Dict]:\n        \"\"\"removes all elements from the set that correspond to the constraint.\n\n        Arguments:\n            *args [Optional]:\n        \"\"\"\n        ...\n\n    def ho_get(self, *args: List[str]) -&gt; 'Relation':\n        \"\"\"The get method allows you to fetch a singleton from the database.\n        It garantees that the constraint references one and only one tuple.\n\n        Arguments:\n            args (List[str]): list of fields names.\\\n            If ommitted, all the values of the row retreived from the database\\\n            are set for the self object.\\\n            Otherwise, only the values listed in the `args` parameter are set.\n\n        Returns:\n            Relation: the object retreived from the database.\n\n        Raises:\n            ExpectedOneError: an exception is raised if no or more than one element is found.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n            &gt;&gt;&gt; type(gaston) is Person\n            True\n            &gt;&gt;&gt; gaston.id\n            (int4) NOT NULL (id = 1772)\n            &gt;&gt;&gt; str(gaston.id)\n            '1772'\n            &gt;&gt;&gt; gaston.id.value\n            1772\n        \"\"\"\n        ...\n\n    def ho_is_set(self):\n        \"\"\"Return True if one field at least is set or if self has been\n        constrained by at least one of its foreign keys or self is the\n        result of a combination of Relations (using set operators).\n        \"\"\"\n        ...\n\n    def ho_distinct(self):\n        \"\"\"Set distinct for the SQL request.\"\"\"\n        ...\n\n    def ho_unaccent(self, *fields_names):\n        \"Sets unaccent for each field listed in fields_names\"\n        ...\n\n    def ho_order_by(self, _order_):\n        \"\"\"Sets the SQL `order by` according to the \"_order_\" string passed\n\n        Example :\n            personnes.ho_order_by(\"field1, field2 desc, field3, field4 desc\")\n        \"\"\"\n        ...\n\n    def ho_limit(self, _limit_):\n        \"\"\"Sets the limit for the next SQL select request.\"\"\"\n        ...\n\n    def ho_offset(self, _offset_):\n        \"\"\"Set the offset for the next SQL select request.\"\"\"\n        ...\n\n    def ho_count(self, limit=0):\n        \"\"\"Returns the number of tuples matching the intention in the relation.\n        \"\"\"\n        ...\n\n    def ho_is_empty(self):\n        \"\"\"Returns True if the self is an empty set, False otherwise.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation-functions","title":"Functions","text":""},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_count","title":"<code>ho_count(limit=0)</code>","text":"<p>Returns the number of tuples matching the intention in the relation.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_count(self, limit=0):\n    \"\"\"Returns the number of tuples matching the intention in the relation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_delete","title":"<code>ho_delete(*args, delete_all=False)</code>","text":"<p>removes all elements from the set that correspond to the constraint.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>[Optional]</code> <code>()</code> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_delete(self, *args, delete_all=False) -&gt; [Dict]:\n    \"\"\"removes all elements from the set that correspond to the constraint.\n\n    Arguments:\n        *args [Optional]:\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_distinct","title":"<code>ho_distinct()</code>","text":"<p>Set distinct for the SQL request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_distinct(self):\n    \"\"\"Set distinct for the SQL request.\"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_get","title":"<code>ho_get(*args)</code>","text":"<p>The get method allows you to fetch a singleton from the database. It garantees that the constraint references one and only one tuple.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>list of fields names.            If ommitted, all the values of the row retreived from the database            are set for the self object.            Otherwise, only the values listed in the <code>args</code> parameter are set.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>Relation</code> <code>Relation</code> <p>the object retreived from the database.</p> <p>Raises:</p> Type Description <code>ExpectedOneError</code> <p>an exception is raised if no or more than one element is found.</p> Example <p>gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get() type(gaston) is Person True gaston.id (int4) NOT NULL (id = 1772) str(gaston.id) '1772' gaston.id.value 1772</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_get(self, *args: List[str]) -&gt; 'Relation':\n    \"\"\"The get method allows you to fetch a singleton from the database.\n    It garantees that the constraint references one and only one tuple.\n\n    Arguments:\n        args (List[str]): list of fields names.\\\n        If ommitted, all the values of the row retreived from the database\\\n        are set for the self object.\\\n        Otherwise, only the values listed in the `args` parameter are set.\n\n    Returns:\n        Relation: the object retreived from the database.\n\n    Raises:\n        ExpectedOneError: an exception is raised if no or more than one element is found.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n        &gt;&gt;&gt; type(gaston) is Person\n        True\n        &gt;&gt;&gt; gaston.id\n        (int4) NOT NULL (id = 1772)\n        &gt;&gt;&gt; str(gaston.id)\n        '1772'\n        &gt;&gt;&gt; gaston.id.value\n        1772\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_insert","title":"<code>ho_insert(*args)</code>","text":"<p>Insert a new tuple into the Relation.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>A dictionary containing the data inserted.</p> Example <p>gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert() print(gaston)</p> Note <p>It is not possible to insert more than one row with the ho_insert method</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_insert(self, *args: List[str]) -&gt; Dict:\n    \"\"\"Insert a new tuple into the Relation.\n\n    Returns:\n        Dict: A dictionary containing the data inserted.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n        &gt;&gt;&gt; print(gaston)\n        {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n    Note:\n        It is not possible to insert more than one row with the ho_insert method\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_is_empty","title":"<code>ho_is_empty()</code>","text":"<p>Returns True if the self is an empty set, False otherwise.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_empty(self):\n    \"\"\"Returns True if the self is an empty set, False otherwise.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_is_set","title":"<code>ho_is_set()</code>","text":"<p>Return True if one field at least is set or if self has been constrained by at least one of its foreign keys or self is the result of a combination of Relations (using set operators).</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_set(self):\n    \"\"\"Return True if one field at least is set or if self has been\n    constrained by at least one of its foreign keys or self is the\n    result of a combination of Relations (using set operators).\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_limit","title":"<code>ho_limit(_limit_)</code>","text":"<p>Sets the limit for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_limit(self, _limit_):\n    \"\"\"Sets the limit for the next SQL select request.\"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_offset","title":"<code>ho_offset(_offset_)</code>","text":"<p>Set the offset for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_offset(self, _offset_):\n    \"\"\"Set the offset for the next SQL select request.\"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_order_by","title":"<code>ho_order_by(_order_)</code>","text":"<p>Sets the SQL <code>order by</code> according to the \"order\" string passed</p> Example <p>personnes.ho_order_by(\"field1, field2 desc, field3, field4 desc\")</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_order_by(self, _order_):\n    \"\"\"Sets the SQL `order by` according to the \"_order_\" string passed\n\n    Example :\n        personnes.ho_order_by(\"field1, field2 desc, field3, field4 desc\")\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_select","title":"<code>ho_select(*args)</code>","text":"<p>Gets the set of values correponding to the constraint attached to self. This method is a generator.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>List[str]</code> <p>the fields names of the returned attributes. If omitted, all the fields are returned.</p> <code>()</code> <p>Yields:</p> Type Description <code>[Dict]</code> <p>the result of the query as a list of dictionaries.</p> Example <p>for person in Person(last_name=('like', 'La%')).ho_select('id'):     print(person)</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_select(self, *args: List[str]) -&gt; [Dict]:\n    \"\"\"Gets the set of values correponding to the constraint attached to self.\n    This method is a generator.\n\n    Arguments:\n        *args: the fields names of the returned attributes. If omitted,\n            all the fields are returned.\n\n    Yields:\n        the result of the query as a list of dictionaries.\n\n    Example:\n        &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n        &gt;&gt;&gt;     print(person)\n        {'id': 1772}\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_unaccent","title":"<code>ho_unaccent(*fields_names)</code>","text":"<p>Sets unaccent for each field listed in fields_names</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_unaccent(self, *fields_names):\n    \"Sets unaccent for each field listed in fields_names\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.DC_Relation.ho_update","title":"<code>ho_update(*args, update_all=False, **kwargs)</code>","text":"<p>Updates the elements defined by self.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>the values to be updated {[field name:value]}</p> <code>{}</code> <code>*args</code> <code>[Optional]</code> <p>the list of columns names to return in the dictionary list for the updated elements. If args is ('*', ), returns all the columns values.</p> <code>()</code> <code>update_all</code> <p>a boolean that must be set to True if there is no constraint on</p> <code>False</code> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_update(self, *args, update_all=False, **kwargs) -&gt; [Dict]:\n    \"\"\"Updates the elements defined by self.\n\n    Arguments:\n        **kwargs: the values to be updated {[field name:value]}\n        *args [Optional]: the list of columns names to return in the dictionary list for the updated elements. If args is ('*', ), returns all the columns values.\n        update_all: a boolean that must be set to True if there is no constraint on\n        self. Defaults to False.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation","title":"<code>Relation</code>","text":"<p>Used as a base class for the classes generated by <code>Model.get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;</code>_.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>the arguments names must correspond to the columns names of the relation.</p> <code>{}</code> <p>Raises:</p> Type Description <code>UnknownAttributeError</code> <p>If the name of an argument doesn't match a column name in the relation considered.</p> <p>Examples:</p> <p>You can generate a class for any relation in your database:     &gt;&gt;&gt; from half_orm.model import Model     &gt;&gt;&gt; model = Model('halftest')     &gt;&gt;&gt; class Person(model.get_relation_class('actor.person')):     &gt;&gt;&gt;     # your code</p> <p>To define a set of data in your relation at instantiation:     &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston')     &gt;&gt;&gt; all_names_starting_with_la = Person(last_name=('ilike', 'la%'))</p> <p>Or to constrain an instantiated object via its            <code>Fields &lt;#half_orm.field.Field&gt;</code>_:     &gt;&gt;&gt; person = Person()     &gt;&gt;&gt; person.birth_date = ('&gt;', '1970-01-01')</p> <p>Raises an <code>UnknownAttributeError &lt;#half_orm.relation_errors.UnknownAttributeError&gt;</code>_:     &gt;&gt;&gt; Person(lost_name='Lagaffe')     [...]UnknownAttributeError: ERROR! Unknown attribute: {'lost_name'}.</p> Source code in <code>half_orm/relation.py</code> <pre><code>class Relation:\n    \"\"\"Used as a base class for the classes generated by\n    `Model.get_relation_class &lt;#half_orm.model.Model.get_relation_class&gt;`_.\n\n    Args:\n        **kwargs: the arguments names must correspond to the columns names of the relation.\n\n    Raises:\n        UnknownAttributeError: If the name of an argument doesn't match a column name in the\n            relation considered.\n\n    Examples:\n        You can generate a class for any relation in your database:\n            &gt;&gt;&gt; from half_orm.model import Model\n            &gt;&gt;&gt; model = Model('halftest')\n            &gt;&gt;&gt; class Person(model.get_relation_class('actor.person')):\n            &gt;&gt;&gt;     # your code\n\n        To define a set of data in your relation at instantiation:\n            &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston')\n            &gt;&gt;&gt; all_names_starting_with_la = Person(last_name=('ilike', 'la%'))\n\n        Or to constrain an instantiated object via its\\\n            `Fields &lt;#half_orm.field.Field&gt;`_:\n            &gt;&gt;&gt; person = Person()\n            &gt;&gt;&gt; person.birth_date = ('&gt;', '1970-01-01')\n\n        Raises an `UnknownAttributeError &lt;#half_orm.relation_errors.UnknownAttributeError&gt;`_:\n            &gt;&gt;&gt; Person(lost_name='Lagaffe')\n            [...]UnknownAttributeError: ERROR! Unknown attribute: {'lost_name'}.\n    \"\"\"\n    _ho_fields_aliases = {}\n    _rels_ids = {}\n\n    def __init__(self, **kwargs):\n        _fqrn = \"\"\n        \"\"\"The names of the arguments must correspond to the names of the columns in the relation.\n        \"\"\"\n        module = __import__(self.__module__, globals(), locals(), ['FKEYS_PROPERTIES', 'FKEYS'], 0)\n        #TODO: remove in release 1.0.0\n        if hasattr(module, 'FKEYS_PROPERTIES') or hasattr(module, 'FKEYS'):\n            mod_fkeys = utils.Color.bold(module.__name__ + '.FKEYS')\n            err = f'''{mod_fkeys} variable is no longer supported!\\n'''\n            err += f'''\\tUse the \"{utils.Color.bold(self.__class__.__name__ + '.Fkeys')}\"''' + \\\n                ''' class attribute instead.\\n'''\n            raise DeprecationWarning(err)\n        self._ho_fk_loop = set()\n        self._ho_fields = {}\n        self._ho_pkey = {}\n        self._ho_ukeys = OrderedDict()\n        self._ho_fkeys = OrderedDict()\n        self._ho_fkeys_attr = set()\n        self._ho_join_to = {}\n        self._ho_is_singleton = False\n        self._ho_only = False\n        self._ho_neg = False\n        self._ho_set_fields()\n        self._ho_set_fkeys()\n        self._ho_query = \"\"\n        self._ho_query_type = None\n        self._ho_sql_query = []\n        self._ho_sql_values = []\n        self._ho_set_operators = _SetOperators(self)\n        self._ho_select_params = {}\n        self._ho_id_cast = None\n        self._ho_mogrify = False\n        self._ho_check_colums(*kwargs.keys())\n        _ = {self.__dict__[field_name].set(value)\n            for field_name, value in kwargs.items() if value is not None}\n        self._ho_isfrozen = True\n\n    def __call__(self, **kwargs):\n        return self.__class__(**kwargs)\n\n    def _ho_check_colums(self, *args):\n        \"Check that the args are actual columns of the relation\"\n        columns = {elt.replace('\"', '') for elt in args}\n        if columns.intersection(self._ho_fields.keys()) != columns:\n            diff = columns.difference(self._ho_fields.keys())\n            raise relation_errors.UnknownAttributeError(', '.join([elt for elt in args if elt in diff]))\n\n    #@utils.trace\n    def ho_insert(self, *args) -&gt; '[dict]':\n        \"\"\"Insert a new tuple into the Relation.\n\n        Returns:\n            [dict]: A singleton containing the data inserted.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n            &gt;&gt;&gt; print(gaston)\n            {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n        Note:\n            It is not possible to insert more than one row with the insert method\n        \"\"\"\n        _ = args and args != ('*',) and self._ho_check_colums(*args)\n        query_template = \"insert into {} ({}) values ({})\"\n        self._ho_query_type = 'insert'\n        fields_names, values, fk_fields, fk_query, fk_values = self.__what()\n        what_to_insert = [\"%s\" for _ in range(len(values))]\n        if fk_fields:\n            fields_names += fk_fields\n            what_to_insert += fk_query\n            values += fk_values\n        query = query_template.format(self._qrn, \", \".join(fields_names), \", \".join(what_to_insert))\n        returning = args or ['*']\n        if returning:\n            query = self._ho_add_returning(query, *returning)\n        with self.__execute(query, tuple(values)) as cursor:\n            res = [dict(elt) for elt in cursor.fetchall()] or [{}]\n            return res[0]\n\n    #@utils.trace\n    def ho_select(self, *args):\n        \"\"\"Gets the set of values correponding to the constraint attached to the object.\n        This method is a generator.\n\n        Arguments:\n            *args: the fields names of the returned attributes. If omitted,\n                all the fields are returned.\n\n        Yields:\n            the result of the query as a dictionary.\n\n        Example:\n            &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n            &gt;&gt;&gt;     print(person)\n            {'id': 1772}\n        \"\"\"\n        self._ho_check_colums(*args)\n        query, values = self._ho_prep_select(*args)\n        with self.__execute(query, values) as cursor:\n            for elt in cursor:\n                yield dict(elt)\n\n    #@utils.trace\n    def ho_get(self, *args: List[str]) -&gt; 'Relation':\n        \"\"\"The get method allows you to fetch a singleton from the database.\n        It garantees that the constraint references one and only one tuple.\n\n        Args:\n            args (List[str]): list of fields names.\\\n            If ommitted, all the values of the row retreived from the database\\\n            are set for the self object.\\\n            Otherwise, only the values listed in the `args` parameter are set.\n\n        Returns:\n            Relation: the object retreived from the database.\n\n        Raises:\n            ExpectedOneError: an exception is raised if no or more than one element is found.\n\n        Example:\n            &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n            &gt;&gt;&gt; type(gaston) is Person\n            True\n            &gt;&gt;&gt; gaston.id\n            (int4) NOT NULL (id = 1772)\n            &gt;&gt;&gt; str(gaston.id)\n            '1772'\n            &gt;&gt;&gt; gaston.id.value\n            1772\n        \"\"\"\n        self._ho_check_colums(*args)\n        self.ho_limit(2)\n        _count = self.ho_count()\n        if _count != 1:\n            raise relation_errors.ExpectedOneError(self, _count)\n        self._ho_is_singleton = True\n        ret = self(**(next(self.ho_select(*args))))\n        ret._ho_is_singleton = True\n        return ret\n\n    #@utils.trace\n    def __fkey_where(self, where, values):\n        _, _, fk_fields, fk_query, fk_values = self.__what()\n        if fk_fields:\n            fk_where = \" and \".join([f\"({a}) in ({b})\" for a, b in zip(fk_fields, fk_query)])\n            if fk_where:\n                where = f\"{where} and {fk_where}\"\n            values += fk_values\n        return where, values\n\n    #@utils.trace\n    def ho_update(self, *args, update_all=False, **kwargs):\n        \"\"\"\n        kwargs represents the values to be updated {[field name:value]}\n        The object self must be set unless update_all is True.\n        The constraints of self are updated with kwargs.\n        \"\"\"\n        if not (self.ho_is_set() or update_all):\n            raise RuntimeError(\n                f'Attempt to update all rows of {self.__class__.__name__}'\n                ' without update_all being set to True!')\n\n        _ = args and args != ('*',) and self._ho_check_colums(*args)\n        self._ho_check_colums(*(kwargs.keys()))\n        update_args = {key: value for key, value in kwargs.items() if value is not None}\n        if not update_args:\n            return None # no new value update. Should we raise an error here?\n\n        query_template = \"update {} set {} {}\"\n        what, where, values = self.__update_args(**update_args)\n        where, values = self.__fkey_where(where, values)\n        query = query_template.format(self._qrn, what, where)\n        if args:\n            query = self._ho_add_returning(query, *args)\n        with self.__execute(query, tuple(values)) as cursor:\n            for field_name, value in update_args.items():\n                self._ho_fields[field_name].set(value)\n            if args:\n                return [dict(elt) for elt in cursor.fetchall()]\n        return None\n\n    #@utils.trace\n    def ho_delete(self, *args, delete_all=False):\n        \"\"\"Removes a set of tuples from the relation.\n        To empty the relation, delete_all must be set to True.\n        \"\"\"\n        _ = args and args != ('*',) and self._ho_check_colums(*args)\n        if not (self.ho_is_set() or delete_all):\n            raise RuntimeError(\n                f'Attempt to delete all rows from {self.__class__.__name__}'\n                ' without delete_all being set to True!')\n        query_template = \"delete from {} {}\"\n        _, values = self.__prep_query(query_template)\n        self._ho_query_type = 'delete'\n        _, where, _ = self.__where_args()\n        where, values = self.__fkey_where(where, values)\n        if where:\n            where = f\" where {where}\"\n        query = f\"delete from {self._qrn} {where}\"\n        if args:\n            query = self._ho_add_returning(query, *args)\n        with self.__execute(query, tuple(values)) as cursor:\n            if args:\n                return [dict(elt) for elt in cursor.fetchall()]\n        return None\n\n    def _ho_add_returning(self, query, *args) -&gt; str:\n        \"Adds the SQL returning clause to the query\"\n        if args:\n            returning = ', '.join(args)\n            return f'{query} returning {returning}'\n        return query\n\n    def ho_unfreeze(self):\n        \"Allow to add attributs to a relation\"\n        self._ho_isfrozen = False\n\n    def ho_freeze(self):\n        \"set _ho_isfrozen to True.\"\n        self._ho_isfrozen = True\n\n    def __setattr__(self, key, value):\n        \"\"\"Sets an attribute as long as _ho_isfrozen is False\n\n        The foreign keys properties are not detected by hasattr\n        hence the line `_ = self.__dict__[key]` to double check if\n        the attribute is really present.\n        \"\"\"\n        if not hasattr(self, '_ho_isfrozen'):\n            object.__setattr__(self, '_ho_isfrozen', False)\n        if self._ho_isfrozen and not hasattr(self, key):\n            raise relation_errors.IsFrozenError(self.__class__, key)\n        if self.__dict__.get(key) and isinstance(self.__dict__[key], Field):\n            self.__dict__[key].set(value)\n            return\n        object.__setattr__(self, key, value)\n\n    #@utils.trace\n    def __execute(self, query, values):\n        return self._ho_model.execute_query(query, values, self._ho_mogrify)\n\n    @property\n    def ho_id(self):\n        \"\"\"Return the _ho_id_cast or the id of the relation.\n        \"\"\"\n        return self._ho_id_cast or id(self)\n\n    @property\n    def ho_only(self):\n        \"Returns the value of self._ho_only\"\n        return self._ho_only\n    @ho_only.setter\n    def ho_only(self, value):\n        \"\"\"Set the value of self._ho_only. Restrict the values of a query to\n        the elements of the relation (no inherited values).\n        \"\"\"\n        if value not in {True, False}:\n            raise ValueError(f'{value} is not a bool!')\n        self._ho_only = value\n\n    def __py_field_name(self, name, field_num):\n        py_name = self._ho_fields_aliases.get(name, name)\n        error = utils.check_attribute_name(py_name)\n        if error is not None:\n            utils.warning(f\"{error}\\n\", 'HALFORM')\n            return f'column{field_num}'\n        return py_name\n\n    def _ho_set_fields(self):\n        \"\"\"Initialise the fields of the relation.\"\"\"\n        _fields_metadata = self._ho_model._fields_metadata(self._t_fqrn)\n\n        for field_name, f_metadata in _fields_metadata.items():\n            field = Field(field_name, self, f_metadata)\n            field_name = self.__py_field_name(field_name, f_metadata['fieldnum'])\n            self._ho_fields[field_name] = field\n            setattr(self, field_name, field)\n            if field._is_part_of_pk():\n                self._ho_pkey[field_name] = field\n            if field._is_unique():\n                self._ho_ukeys[field_name] = field\n\n    def _ho_set_fkeys(self):\n        \"\"\"Initialisation of the foreign keys of the relation\"\"\"\n        #pylint: disable=import-outside-toplevel\n        from half_orm.fkey import FKey\n\n        _fkeys_metadata = self._ho_model._fkeys_metadata(self._t_fqrn)\n        for fkeyname, f_metadata in _fkeys_metadata.items():\n            self._ho_fkeys[fkeyname] = FKey(fkeyname, self, *f_metadata)\n        if hasattr(self.__class__, 'Fkeys') and not self._ho_fkeys_properties:\n            for key, value in self.Fkeys.items():\n                try:\n                    if key != '': # we skip empty keys\n                        setattr(self, key, self._ho_fkeys[value])\n                        self._ho_fkeys_attr.add(key)\n                except KeyError as exp:\n                    raise relation_errors.WrongFkeyError(self, value) from exp\n        self._ho_fkeys_properties = True\n\n    @classmethod\n    def _ho_dataclass_name(cls):\n        database, schema, relation = cls._t_fqrn\n        schemaname = ''.join([elt.capitalize() for elt in schema.split('.')])\n        relationname = ''.join([elt.capitalize() for elt in relation.split('_')])\n        return f'DC_{schemaname}{relationname}'\n\n    def ho_dict(self):\n        \"\"\"Returns a dictionary containing only the values of the fields\n        that are set.\"\"\"\n        return {key:field.value for key, field in self._ho_fields.items() if field.is_set()}\n\n    def keys(self):\n        return self._ho_fields.keys()\n\n    def items(self):\n        for key, field in self._ho_fields.items():\n            yield key, field.value\n\n    def __getitem__(self, key):\n        return self._ho_fields[key].value\n\n    def __to_dict_val_comp(self):\n        \"\"\"Returns a dictionary containing the values and comparators of the fields\n        that are set.\"\"\"\n        return {key:(field._comp(), field.value) for key, field in\n                self._ho_fields.items() if field.is_set()}\n\n    def __repr__(self):\n\n        fkeys_usage = \"\"\"\\\nTo use the foreign keys as direct attributes of the class, copy/paste the Fkeys below into\nyour code as a class attribute and replace the empty string key(s) with the alias(es) you\nwant to use. The aliases must be unique and different from any of the column names. Empty\nstring keys are ignored.\n\nFkeys = {\"\"\"\n\n        rel_kind = self._ho_kind\n        ret = []\n        database, schema, relation = self._t_fqrn\n        ret.append(f\"DATABASE: {database}\")\n        ret.append(f\"SCHEMA: {schema}\")\n        ret.append(f\"{rel_kind.upper()}: {relation}\\n\")\n        if self._ho_metadata['description']:\n            ret.append(f\"DESCRIPTION:\\n{self._ho_metadata['description']}\")\n        ret.append('FIELDS:')\n        mx_fld_n_len = 0\n        for field_name in self._ho_fields.keys():\n            mx_fld_n_len = max(mx_fld_n_len, len(field_name))\n        for field_name, field in self._ho_fields.items():\n            field_desc = f\"- {field_name}:{' ' * (mx_fld_n_len + 1 - len(field_name))}{repr(field)}\"\n            error = utils.check_attribute_name(field.name)\n            if error and not field.name in self._ho_fields_aliases:\n                field_desc = f'{field_desc} --- FIX ME! {error}'\n            ret.append(field_desc)\n        ret.append('')\n        pkey = self._ho_model._pkey_constraint(self._t_fqrn)\n        if pkey:\n            ret.append(f\"PRIMARY KEY ({', '.join(pkey)})\")\n        for uniq in self._ho_model._unique_constraints_list(self._t_fqrn):\n            ret.append(f\"UNIQUE CONSTRAINT ({', '.join(uniq)})\")\n        if self._ho_fkeys.keys():\n            plur = 'S' if len(self._ho_fkeys) &gt; 1 else ''\n            ret.append(f'FOREIGN KEY{plur}:')\n            for fkey in self._ho_fkeys.values():\n                ret.append(repr(fkey))\n            ret.append('')\n            if not hasattr(self, 'Fkeys'):\n                ret.append(fkeys_usage)\n                for fkey in self._ho_fkeys:\n                    ret.append(f\"    '': '{fkey}',\")\n            else:\n                ret.append(\"Fkeys = {\")\n                for key, value in self.Fkeys.items():\n                    ret.append(f\"    '{key}': '{value}',\")\n            ret.append('}')\n        return '\\n'.join(ret)\n\n    def ho_is_set(self):\n        \"\"\"Return True if one field at least is set or if self has been\n        constrained by at least one of its foreign keys or self is the\n        result of a combination of Relations (using set operators).\n        \"\"\"\n        joined_to = False\n        for _, jt_ in self._ho_join_to.items():\n            jt_id = id(jt_)\n            if jt_id in self._ho_fk_loop:\n                raise RuntimeError(\"Can't set Fkey on the same object\")\n            self._ho_fk_loop.add(jt_id)\n            joined_to |= jt_.ho_is_set()\n        self._ho_fk_loop = set()\n        return (joined_to or bool(self._ho_set_operators.operator) or bool(self._ho_neg) or\n                bool({field for field in self._ho_fields.values() if field.is_set()}))\n\n    def __get_set_fields(self):\n        \"\"\"Returns a list containing only the fields that are set.\"\"\"\n        return [field for field in self._ho_fields.values() if field.is_set()]\n\n    #@utils.trace\n    def __walk_op(self, rel_id_, out=None, _fields_=None):\n        \"\"\"Walk the set operators tree and return a list of SQL where\n        representation of the query with a list of the fields of the query.\n        \"\"\"\n        if out is None:\n            out = []\n            _fields_ = []\n        if self._ho_set_operators.operator:\n            if self._ho_neg:\n                out.append(\"not (\")\n            out.append(\"(\")\n            left = self._ho_set_operators.left\n            left._ho_query_type = self._ho_query_type\n            left.__walk_op(rel_id_, out, _fields_)\n            if self._ho_set_operators.right is not None:\n                out.append(f\" {self._ho_set_operators.operator}\\n    \")\n                right = self._ho_set_operators.right\n                right._ho_query_type = self._ho_query_type\n                right.__walk_op(rel_id_, out, _fields_)\n            out.append(\")\")\n            if self._ho_neg:\n                out.append(\")\")\n        else:\n            out.append(self.__where_repr(rel_id_))\n            _fields_ += self.__get_set_fields()\n        return out, _fields_\n\n    def _ho_sql_id(self):\n        \"\"\"Returns the FQRN as alias for the sql query.\"\"\"\n        return f\"{self._qrn} as r{self.ho_id}\"\n\n    #@utils.trace\n    def __get_from(self, orig_rel=None, deja_vu=None):\n        \"\"\"Constructs the _ho_sql_query and gets the _ho_sql_values for self.\"\"\"\n        if deja_vu is None:\n            orig_rel = self\n            self._ho_sql_query = [self._ho_sql_id()]\n            deja_vu = {self.ho_id:[(self, None)]}\n        for fkey, fk_rel in self._ho_join_to.items():\n            fk_rel._ho_query_type = orig_rel._ho_query_type\n            if fk_rel.ho_id not in deja_vu:\n                deja_vu[fk_rel.ho_id] = []\n            # elif (fk_rel, fkey) in deja_vu[fk_rel.ho_id] or fk_rel is orig_rel:\n            #     #sys.stderr.write(f\"d\u00e9j\u00e0 vu in from! {fk_rel._fqrn}\\n\")\n            #     continue\n            fk_rel.__get_from(orig_rel, deja_vu)\n            deja_vu[fk_rel.ho_id].append((fk_rel, fkey))\n            _, where, values = fk_rel.__where_args()\n            where = f\" and\\n {where}\"\n            orig_rel._ho_sql_query.insert(1, f'\\n  join {fk_rel._ho_sql_id()} on\\n   ')\n            orig_rel._ho_sql_query.insert(2, fkey._join_query(self))\n            orig_rel._ho_sql_query.append(where)\n            orig_rel._ho_sql_values += values\n\n    #@utils.trace\n    def __where_repr(self, rel_id_):\n        where_repr = []\n        for field in self.__get_set_fields():\n            where_repr.append(field._where_repr(self._ho_query_type, rel_id_))\n        where_repr = ' and '.join(where_repr) or '1 = 1'\n        ret = f\"({where_repr})\"\n        if self._ho_neg:\n            ret = f\"not ({ret})\"\n        return ret\n\n    #@utils.trace\n    def __where_args(self, *args):\n        \"\"\"Returns the what, where and values needed to construct the queries.\n        \"\"\"\n        rel_id_ = self.ho_id\n        what = f'r{rel_id_}.*'\n        if args:\n            what = ', '.join([f'r{rel_id_}.{arg}' for arg in args])\n        s_where, set_fields = self.__walk_op(rel_id_)\n        s_where = ''.join(s_where)\n        return what, s_where, set_fields\n\n    #@utils.trace\n    def __prep_query(self, query_template, *args):\n        \"\"\"Prepare the SQL query to be executed.\"\"\"\n        from half_orm.fkey import FKey\n        self._ho_sql_values = []\n        self._ho_query_type = 'select'\n        what, where, values = self.__where_args(*args)\n        where = f\"\\nwhere\\n    {where}\"\n        self.__get_from()\n        # remove duplicates\n        for idx, elt in reversed(list(enumerate(self._ho_sql_query))):\n            if elt.find('\\n  join ') == 0 and self._ho_sql_query.count(elt) &gt; 1:\n                self._ho_sql_query[idx] = '  and\\n'\n        # check that fkeys are fkeys\n        for fkey_name in self._ho_fkeys_attr:\n            fkey_cls = self.__dict__[fkey_name].__class__\n            if fkey_cls != FKey:\n                raise RuntimeError(\n                    f'self.{fkey_name} is not a FKey (got a {fkey_cls.__name__} object instead).\\n'\n                    f'- use: self.{fkey_name}.set({fkey_cls.__name__}(...))\\n'\n                    f'- not: self.{fkey_name} = {fkey_cls.__name__}(...)'\n                    )\n        return (\n            query_template.format(\n                what,\n                self._ho_only and \"only\" or \"\",\n                ' '.join(self._ho_sql_query), where),\n            values)\n\n    #@utils.trace\n    def _ho_prep_select(self, *args):\n        distinct = self._ho_select_params.get('distinct', '')\n        query_template = f\"select\\n {distinct} {{}}\\nfrom\\n  {{}} {{}}\\n  {{}}\"\n        query, values = self.__prep_query(query_template, *args)\n        values = tuple(self._ho_sql_values + values)\n        if 'order_by' in self._ho_select_params:\n            query = f\"{query} order by {self._ho_select_params['order_by']}\"\n        if 'limit' in self._ho_select_params:\n            query = f\"{query} limit {self._ho_select_params['limit']}\"\n        if 'offset' in self._ho_select_params:\n            query = f\"{query} offset {self._ho_select_params['offset']}\"\n        return query, values\n\n    def ho_distinct(self, dist=True):\n        \"\"\"Set distinct in SQL select request.\"\"\"\n        distinct = 'distinct'\n        if dist not in {True, False}:\n            raise ValueError('ho_distinct argument must be either True or False!')\n        if dist in {False, None}:\n            distinct = ''\n        self._ho_select_params['distinct'] = distinct\n        return self\n\n    def ho_unaccent(self, *fields_names):\n        \"Sets unaccent for each field listed in fields_names\"\n        for field_name in fields_names:\n            if not isinstance(self.__dict__[field_name], Field):\n                raise ValueError(f'{field_name} is not a Field!')\n            self.__dict__[field_name].unaccent = True\n        return self\n\n    def ho_order_by(self, _order_):\n        \"\"\"Set SQL order by according to the \"order\" string passed\n\n        @order string example :\n        \"field1, field2 desc, field3, field4 desc\"\n        \"\"\"\n        self._ho_select_params['order_by'] = _order_\n        return self\n\n    def ho_limit(self, _limit_):\n        \"\"\"Set limit for the next SQL select request.\"\"\"\n        if _limit_:\n            self._ho_select_params['limit'] = int(_limit_)\n        elif 'limit' in self._ho_select_params:\n            self._ho_select_params.pop('limit')\n        return self\n\n    def ho_offset(self, _offset_):\n        \"\"\"Set the offset for the next SQL select request.\"\"\"\n        self._ho_select_params['offset'] = int(_offset_)\n        return self\n\n    def ho_mogrify(self):\n        \"\"\"Prints the select query.\"\"\"\n        self._ho_mogrify = True\n        return self\n\n    # @utils.trace\n    def ho_count(self, *args):\n        \"\"\"Returns the number of tuples matching the intention in the relation.\n        \"\"\"\n        self._ho_query = \"select\"\n        query, values = self._ho_prep_select(*args)\n        query = f'select\\n  count(*) from ({query}) as ho_count'\n        return self.__execute(query, values).fetchone()['count']\n\n    def ho_is_empty(self):\n        \"\"\"Returns True if the relation is empty, False otherwise.\n        \"\"\"\n        self.ho_limit(1)\n        return self.ho_count() == 0\n\n    #@utils.trace\n    def __update_args(self, **kwargs):\n        \"\"\"Returns the what, where an values for the update query.\"\"\"\n        what_fields = []\n        new_values = []\n        self._ho_query_type = 'update'\n        _, where, values = self.__where_args()\n        where = f\" where {where}\"\n        for field_name, new_value in kwargs.items():\n            what_fields.append(self._ho_fields[field_name].name)\n            new_values.append(new_value)\n        what = \", \".join([f'\"{elt}\" = %s' for elt in what_fields])\n        return what, where, new_values + values\n\n    #@utils.trace\n    def __what(self):\n        \"\"\"Returns the constrained fields and foreign keys.\n        \"\"\"\n        set_fields = self.__get_set_fields()\n        fields_names = [\n            f'\"{field.name}\"' for field in self._ho_fields.values() if field.is_set()]\n        fk_fields = []\n        fk_queries = ''\n        fk_values = []\n        for fkey in self._ho_fkeys.values():\n            fk_prep_select = fkey._fkey_prep_select()\n            if fk_prep_select is not None:\n                fk_values += list(fkey.values()[0])\n                fk_fields += fk_prep_select[0]\n                fk_queries = [\"%s\" for _ in range(len(fk_values))]\n\n        return fields_names, set_fields, fk_fields, fk_queries, fk_values\n\n    @classmethod\n    def ho_description(cls):\n        \"\"\"Returns the description (comment) of the relation\n        \"\"\"\n        description = cls._ho_metadata['description']\n        if description:\n            description = description.strip()\n        return description or 'No description available'\n\n    def ho_cast(self, qrn):\n        \"\"\"Cast a relation into another relation.\n\n        TODO: check that qrn inherits self (or is inherited by self)?\n        \"\"\"\n        new = self._ho_model._import_class(qrn)(**self.__to_dict_val_comp())\n        new._ho_id_cast = id(self)\n        new._ho_join_to = self._ho_join_to\n        new._ho_set_operators = self._ho_set_operators\n        return new\n\n    def __set__op__(self, operator=None, right=None):\n        \"\"\"Si l'op\u00e9rateur du self est d\u00e9j\u00e0 d\u00e9fini, il faut aller modifier\n        l'op\u00e9rateur du right ???\n        On cr\u00e9e un nouvel objet sans contrainte et on a left et right et op\u00e9rateur\n        \"\"\"\n        def check_fk(new, jt_list):\n            \"\"\"Sets the _ho_join_to dictionary for the new relation.\n            \"\"\"\n            for fkey, rel in jt_list.items():\n                if rel is self:\n                    rel = new\n                new._ho_join_to[fkey] = rel\n        new = self(**self.__to_dict_val_comp())\n        new._ho_id_cast = self._ho_id_cast\n        if operator:\n            new._ho_set_operators.left = self\n            new._ho_set_operators.operator = operator\n        dct_join = self._ho_join_to\n        if right is not None:\n            new._ho_set_operators.right = right\n            dct_join.update(right._ho_join_to)\n        check_fk(new, dct_join)\n        return new\n\n    def __and__(self, right):\n        return self.__set__op__(\"and\", right)\n    def __iand__(self, right):\n        self = self &amp; right\n        return self\n\n    def __or__(self, right):\n        return self.__set__op__(\"or\", right)\n    def __ior__(self, right):\n        self = self | right\n        return self\n\n    def __sub__(self, right):\n        return self.__set__op__(\"and not\", right)\n    def __isub__(self, right):\n        self = self - right\n        return self\n\n    def __neg__(self):\n        new = self.__set__op__(self._ho_set_operators.operator, self._ho_set_operators.right)\n        new._ho_neg = not self._ho_neg\n        return new\n\n    def __xor__(self, right):\n        return (self | right) - (self &amp; right)\n    def __ixor__(self, right):\n        self = self ^ right\n        return self\n\n    def __contains__(self, right):\n        return (right - self).ho_count() == 0\n\n    def __eq__(self, right):\n        if id(self) == id(right):\n            return True\n        return self in right and right in self\n\n    def __enter__(self):\n        \"\"\"Context management entry\n\n        Returns self in a transaction context.\n\n        Example usage:\n        with relation as rel:\n            rel.ho_update(col=new_val)\n\n        Equivalent to (in a transaction context):\n        rel = relation.ho_select()\n        for elt in rel:\n            new_elt = relation(**elt)\n            new_elt.ho_update(col=new_val)\n        \"\"\"\n        self.ho_transaction._enter(self._ho_model)\n        return self\n\n    def __exit__(self, *__):\n        \"\"\"Context management exit\n\n        \"\"\"\n        self.ho_transaction._exit(self._ho_model)\n        return False\n\n    def __iter__(self):\n        query, values = self._ho_prep_select()\n        for elt in self.__execute(query, values):\n            yield dict(elt)\n\n    def __next__(self):\n        return next(self.ho_select())\n\n    # deprecated. To remove with release 1.0.0\n\n    @utils._ho_deprecated\n    def select(self, *args): # pragma: no cover\n        return self.ho_select(*args)\n\n    @utils._ho_deprecated\n    def insert(self, *args): # pragma: no cover\n        return self.ho_insert(*args)\n\n    @utils._ho_deprecated\n    def update(self, *args, update_all=False, **kwargs): # pragma: no cover\n        return self.ho_update(*args, update_all, **kwargs)\n\n    @utils._ho_deprecated\n    def delete(self, *args, delete_all=False): # pragma: no cover\n        return self.ho_delete(*args, delete_all)\n\n    @utils._ho_deprecated\n    def get(self, *args): # pragma: no cover\n        return self.ho_get(*args)\n\n    @utils._ho_deprecated\n    def unaccent(self, *fields_names): # pragma: no cover\n        return self.ho_unaccent(*fields_names)\n\n    @utils._ho_deprecated\n    def order_by(self, _order_): # pragma: no cover\n        return self.ho_order_by(_order_)\n\n    @utils._ho_deprecated\n    def limit(self, _limit_): # pragma: no cover\n        return self.ho_limit(_limit_)\n\n    @utils._ho_deprecated\n    def offset(self, _offset_): # pragma: no cover\n        return self.ho_offset(_offset_)\n\n    @utils._ho_deprecated\n    def _mogrify(self): # pragma: no cover\n        return self.ho_mogrify()\n\n    @utils._ho_deprecated\n    def count(self, *args): # pragma: no cover\n        return self.ho_count(*args)\n\n    @utils._ho_deprecated\n    def is_empty(self): # pragma: no cover\n        return self.ho_is_empty()\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation-attributes","title":"Attributes","text":""},{"location":"api/relation/#half_orm.relation.Relation.ho_id","title":"<code>ho_id</code>  <code>property</code>","text":"<p>Return the _ho_id_cast or the id of the relation.</p>"},{"location":"api/relation/#half_orm.relation.Relation.ho_only","title":"<code>ho_only</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the value of self._ho_only</p>"},{"location":"api/relation/#half_orm.relation.Relation-functions","title":"Functions","text":""},{"location":"api/relation/#half_orm.relation.Relation.__enter__","title":"<code>__enter__()</code>","text":"<p>Context management entry</p> <p>Returns self in a transaction context.</p> <p>Example usage: with relation as rel:     rel.ho_update(col=new_val)</p> <p>Equivalent to (in a transaction context): rel = relation.ho_select() for elt in rel:     new_elt = relation(**elt)     new_elt.ho_update(col=new_val)</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context management entry\n\n    Returns self in a transaction context.\n\n    Example usage:\n    with relation as rel:\n        rel.ho_update(col=new_val)\n\n    Equivalent to (in a transaction context):\n    rel = relation.ho_select()\n    for elt in rel:\n        new_elt = relation(**elt)\n        new_elt.ho_update(col=new_val)\n    \"\"\"\n    self.ho_transaction._enter(self._ho_model)\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__exit__","title":"<code>__exit__(*__)</code>","text":"<p>Context management exit</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __exit__(self, *__):\n    \"\"\"Context management exit\n\n    \"\"\"\n    self.ho_transaction._exit(self._ho_model)\n    return False\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__get_from","title":"<code>__get_from(orig_rel=None, deja_vu=None)</code>","text":"<p>Constructs the _ho_sql_query and gets the _ho_sql_values for self.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __get_from(self, orig_rel=None, deja_vu=None):\n    \"\"\"Constructs the _ho_sql_query and gets the _ho_sql_values for self.\"\"\"\n    if deja_vu is None:\n        orig_rel = self\n        self._ho_sql_query = [self._ho_sql_id()]\n        deja_vu = {self.ho_id:[(self, None)]}\n    for fkey, fk_rel in self._ho_join_to.items():\n        fk_rel._ho_query_type = orig_rel._ho_query_type\n        if fk_rel.ho_id not in deja_vu:\n            deja_vu[fk_rel.ho_id] = []\n        # elif (fk_rel, fkey) in deja_vu[fk_rel.ho_id] or fk_rel is orig_rel:\n        #     #sys.stderr.write(f\"d\u00e9j\u00e0 vu in from! {fk_rel._fqrn}\\n\")\n        #     continue\n        fk_rel.__get_from(orig_rel, deja_vu)\n        deja_vu[fk_rel.ho_id].append((fk_rel, fkey))\n        _, where, values = fk_rel.__where_args()\n        where = f\" and\\n {where}\"\n        orig_rel._ho_sql_query.insert(1, f'\\n  join {fk_rel._ho_sql_id()} on\\n   ')\n        orig_rel._ho_sql_query.insert(2, fkey._join_query(self))\n        orig_rel._ho_sql_query.append(where)\n        orig_rel._ho_sql_values += values\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__get_set_fields","title":"<code>__get_set_fields()</code>","text":"<p>Returns a list containing only the fields that are set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __get_set_fields(self):\n    \"\"\"Returns a list containing only the fields that are set.\"\"\"\n    return [field for field in self._ho_fields.values() if field.is_set()]\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__prep_query","title":"<code>__prep_query(query_template, *args)</code>","text":"<p>Prepare the SQL query to be executed.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __prep_query(self, query_template, *args):\n    \"\"\"Prepare the SQL query to be executed.\"\"\"\n    from half_orm.fkey import FKey\n    self._ho_sql_values = []\n    self._ho_query_type = 'select'\n    what, where, values = self.__where_args(*args)\n    where = f\"\\nwhere\\n    {where}\"\n    self.__get_from()\n    # remove duplicates\n    for idx, elt in reversed(list(enumerate(self._ho_sql_query))):\n        if elt.find('\\n  join ') == 0 and self._ho_sql_query.count(elt) &gt; 1:\n            self._ho_sql_query[idx] = '  and\\n'\n    # check that fkeys are fkeys\n    for fkey_name in self._ho_fkeys_attr:\n        fkey_cls = self.__dict__[fkey_name].__class__\n        if fkey_cls != FKey:\n            raise RuntimeError(\n                f'self.{fkey_name} is not a FKey (got a {fkey_cls.__name__} object instead).\\n'\n                f'- use: self.{fkey_name}.set({fkey_cls.__name__}(...))\\n'\n                f'- not: self.{fkey_name} = {fkey_cls.__name__}(...)'\n                )\n    return (\n        query_template.format(\n            what,\n            self._ho_only and \"only\" or \"\",\n            ' '.join(self._ho_sql_query), where),\n        values)\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__set__op__","title":"<code>__set__op__(operator=None, right=None)</code>","text":"<p>Si l'op\u00e9rateur du self est d\u00e9j\u00e0 d\u00e9fini, il faut aller modifier l'op\u00e9rateur du right ??? On cr\u00e9e un nouvel objet sans contrainte et on a left et right et op\u00e9rateur</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __set__op__(self, operator=None, right=None):\n    \"\"\"Si l'op\u00e9rateur du self est d\u00e9j\u00e0 d\u00e9fini, il faut aller modifier\n    l'op\u00e9rateur du right ???\n    On cr\u00e9e un nouvel objet sans contrainte et on a left et right et op\u00e9rateur\n    \"\"\"\n    def check_fk(new, jt_list):\n        \"\"\"Sets the _ho_join_to dictionary for the new relation.\n        \"\"\"\n        for fkey, rel in jt_list.items():\n            if rel is self:\n                rel = new\n            new._ho_join_to[fkey] = rel\n    new = self(**self.__to_dict_val_comp())\n    new._ho_id_cast = self._ho_id_cast\n    if operator:\n        new._ho_set_operators.left = self\n        new._ho_set_operators.operator = operator\n    dct_join = self._ho_join_to\n    if right is not None:\n        new._ho_set_operators.right = right\n        dct_join.update(right._ho_join_to)\n    check_fk(new, dct_join)\n    return new\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__setattr__","title":"<code>__setattr__(key, value)</code>","text":"<p>Sets an attribute as long as _ho_isfrozen is False</p> <p>The foreign keys properties are not detected by hasattr hence the line <code>_ = self.__dict__[key]</code> to double check if the attribute is really present.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __setattr__(self, key, value):\n    \"\"\"Sets an attribute as long as _ho_isfrozen is False\n\n    The foreign keys properties are not detected by hasattr\n    hence the line `_ = self.__dict__[key]` to double check if\n    the attribute is really present.\n    \"\"\"\n    if not hasattr(self, '_ho_isfrozen'):\n        object.__setattr__(self, '_ho_isfrozen', False)\n    if self._ho_isfrozen and not hasattr(self, key):\n        raise relation_errors.IsFrozenError(self.__class__, key)\n    if self.__dict__.get(key) and isinstance(self.__dict__[key], Field):\n        self.__dict__[key].set(value)\n        return\n    object.__setattr__(self, key, value)\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__to_dict_val_comp","title":"<code>__to_dict_val_comp()</code>","text":"<p>Returns a dictionary containing the values and comparators of the fields that are set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __to_dict_val_comp(self):\n    \"\"\"Returns a dictionary containing the values and comparators of the fields\n    that are set.\"\"\"\n    return {key:(field._comp(), field.value) for key, field in\n            self._ho_fields.items() if field.is_set()}\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__update_args","title":"<code>__update_args(**kwargs)</code>","text":"<p>Returns the what, where an values for the update query.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __update_args(self, **kwargs):\n    \"\"\"Returns the what, where an values for the update query.\"\"\"\n    what_fields = []\n    new_values = []\n    self._ho_query_type = 'update'\n    _, where, values = self.__where_args()\n    where = f\" where {where}\"\n    for field_name, new_value in kwargs.items():\n        what_fields.append(self._ho_fields[field_name].name)\n        new_values.append(new_value)\n    what = \", \".join([f'\"{elt}\" = %s' for elt in what_fields])\n    return what, where, new_values + values\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__walk_op","title":"<code>__walk_op(rel_id_, out=None, _fields_=None)</code>","text":"<p>Walk the set operators tree and return a list of SQL where representation of the query with a list of the fields of the query.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __walk_op(self, rel_id_, out=None, _fields_=None):\n    \"\"\"Walk the set operators tree and return a list of SQL where\n    representation of the query with a list of the fields of the query.\n    \"\"\"\n    if out is None:\n        out = []\n        _fields_ = []\n    if self._ho_set_operators.operator:\n        if self._ho_neg:\n            out.append(\"not (\")\n        out.append(\"(\")\n        left = self._ho_set_operators.left\n        left._ho_query_type = self._ho_query_type\n        left.__walk_op(rel_id_, out, _fields_)\n        if self._ho_set_operators.right is not None:\n            out.append(f\" {self._ho_set_operators.operator}\\n    \")\n            right = self._ho_set_operators.right\n            right._ho_query_type = self._ho_query_type\n            right.__walk_op(rel_id_, out, _fields_)\n        out.append(\")\")\n        if self._ho_neg:\n            out.append(\")\")\n    else:\n        out.append(self.__where_repr(rel_id_))\n        _fields_ += self.__get_set_fields()\n    return out, _fields_\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__what","title":"<code>__what()</code>","text":"<p>Returns the constrained fields and foreign keys.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __what(self):\n    \"\"\"Returns the constrained fields and foreign keys.\n    \"\"\"\n    set_fields = self.__get_set_fields()\n    fields_names = [\n        f'\"{field.name}\"' for field in self._ho_fields.values() if field.is_set()]\n    fk_fields = []\n    fk_queries = ''\n    fk_values = []\n    for fkey in self._ho_fkeys.values():\n        fk_prep_select = fkey._fkey_prep_select()\n        if fk_prep_select is not None:\n            fk_values += list(fkey.values()[0])\n            fk_fields += fk_prep_select[0]\n            fk_queries = [\"%s\" for _ in range(len(fk_values))]\n\n    return fields_names, set_fields, fk_fields, fk_queries, fk_values\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.__where_args","title":"<code>__where_args(*args)</code>","text":"<p>Returns the what, where and values needed to construct the queries.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def __where_args(self, *args):\n    \"\"\"Returns the what, where and values needed to construct the queries.\n    \"\"\"\n    rel_id_ = self.ho_id\n    what = f'r{rel_id_}.*'\n    if args:\n        what = ', '.join([f'r{rel_id_}.{arg}' for arg in args])\n    s_where, set_fields = self.__walk_op(rel_id_)\n    s_where = ''.join(s_where)\n    return what, s_where, set_fields\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_cast","title":"<code>ho_cast(qrn)</code>","text":"<p>Cast a relation into another relation.</p> <p>TODO: check that qrn inherits self (or is inherited by self)?</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_cast(self, qrn):\n    \"\"\"Cast a relation into another relation.\n\n    TODO: check that qrn inherits self (or is inherited by self)?\n    \"\"\"\n    new = self._ho_model._import_class(qrn)(**self.__to_dict_val_comp())\n    new._ho_id_cast = id(self)\n    new._ho_join_to = self._ho_join_to\n    new._ho_set_operators = self._ho_set_operators\n    return new\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_count","title":"<code>ho_count(*args)</code>","text":"<p>Returns the number of tuples matching the intention in the relation.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_count(self, *args):\n    \"\"\"Returns the number of tuples matching the intention in the relation.\n    \"\"\"\n    self._ho_query = \"select\"\n    query, values = self._ho_prep_select(*args)\n    query = f'select\\n  count(*) from ({query}) as ho_count'\n    return self.__execute(query, values).fetchone()['count']\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_delete","title":"<code>ho_delete(*args, delete_all=False)</code>","text":"<p>Removes a set of tuples from the relation. To empty the relation, delete_all must be set to True.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_delete(self, *args, delete_all=False):\n    \"\"\"Removes a set of tuples from the relation.\n    To empty the relation, delete_all must be set to True.\n    \"\"\"\n    _ = args and args != ('*',) and self._ho_check_colums(*args)\n    if not (self.ho_is_set() or delete_all):\n        raise RuntimeError(\n            f'Attempt to delete all rows from {self.__class__.__name__}'\n            ' without delete_all being set to True!')\n    query_template = \"delete from {} {}\"\n    _, values = self.__prep_query(query_template)\n    self._ho_query_type = 'delete'\n    _, where, _ = self.__where_args()\n    where, values = self.__fkey_where(where, values)\n    if where:\n        where = f\" where {where}\"\n    query = f\"delete from {self._qrn} {where}\"\n    if args:\n        query = self._ho_add_returning(query, *args)\n    with self.__execute(query, tuple(values)) as cursor:\n        if args:\n            return [dict(elt) for elt in cursor.fetchall()]\n    return None\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_description","title":"<code>ho_description()</code>  <code>classmethod</code>","text":"<p>Returns the description (comment) of the relation</p> Source code in <code>half_orm/relation.py</code> <pre><code>@classmethod\ndef ho_description(cls):\n    \"\"\"Returns the description (comment) of the relation\n    \"\"\"\n    description = cls._ho_metadata['description']\n    if description:\n        description = description.strip()\n    return description or 'No description available'\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_dict","title":"<code>ho_dict()</code>","text":"<p>Returns a dictionary containing only the values of the fields that are set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_dict(self):\n    \"\"\"Returns a dictionary containing only the values of the fields\n    that are set.\"\"\"\n    return {key:field.value for key, field in self._ho_fields.items() if field.is_set()}\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_distinct","title":"<code>ho_distinct(dist=True)</code>","text":"<p>Set distinct in SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_distinct(self, dist=True):\n    \"\"\"Set distinct in SQL select request.\"\"\"\n    distinct = 'distinct'\n    if dist not in {True, False}:\n        raise ValueError('ho_distinct argument must be either True or False!')\n    if dist in {False, None}:\n        distinct = ''\n    self._ho_select_params['distinct'] = distinct\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_freeze","title":"<code>ho_freeze()</code>","text":"<p>set _ho_isfrozen to True.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_freeze(self):\n    \"set _ho_isfrozen to True.\"\n    self._ho_isfrozen = True\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_get","title":"<code>ho_get(*args)</code>","text":"<p>The get method allows you to fetch a singleton from the database. It garantees that the constraint references one and only one tuple.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>list of fields names.            If ommitted, all the values of the row retreived from the database            are set for the self object.            Otherwise, only the values listed in the <code>args</code> parameter are set.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>Relation</code> <code>Relation</code> <p>the object retreived from the database.</p> <p>Raises:</p> Type Description <code>ExpectedOneError</code> <p>an exception is raised if no or more than one element is found.</p> Example <p>gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get() type(gaston) is Person True gaston.id (int4) NOT NULL (id = 1772) str(gaston.id) '1772' gaston.id.value 1772</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_get(self, *args: List[str]) -&gt; 'Relation':\n    \"\"\"The get method allows you to fetch a singleton from the database.\n    It garantees that the constraint references one and only one tuple.\n\n    Args:\n        args (List[str]): list of fields names.\\\n        If ommitted, all the values of the row retreived from the database\\\n        are set for the self object.\\\n        Otherwise, only the values listed in the `args` parameter are set.\n\n    Returns:\n        Relation: the object retreived from the database.\n\n    Raises:\n        ExpectedOneError: an exception is raised if no or more than one element is found.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='Lagaffe', first_name='Gaston').ho_get()\n        &gt;&gt;&gt; type(gaston) is Person\n        True\n        &gt;&gt;&gt; gaston.id\n        (int4) NOT NULL (id = 1772)\n        &gt;&gt;&gt; str(gaston.id)\n        '1772'\n        &gt;&gt;&gt; gaston.id.value\n        1772\n    \"\"\"\n    self._ho_check_colums(*args)\n    self.ho_limit(2)\n    _count = self.ho_count()\n    if _count != 1:\n        raise relation_errors.ExpectedOneError(self, _count)\n    self._ho_is_singleton = True\n    ret = self(**(next(self.ho_select(*args))))\n    ret._ho_is_singleton = True\n    return ret\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_insert","title":"<code>ho_insert(*args)</code>","text":"<p>Insert a new tuple into the Relation.</p> <p>Returns:</p> Type Description <code>[dict]</code> <p>[dict]: A singleton containing the data inserted.</p> Example <p>gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert() print(gaston)</p> Note <p>It is not possible to insert more than one row with the insert method</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_insert(self, *args) -&gt; '[dict]':\n    \"\"\"Insert a new tuple into the Relation.\n\n    Returns:\n        [dict]: A singleton containing the data inserted.\n\n    Example:\n        &gt;&gt;&gt; gaston = Person(last_name='La', first_name='Ga', birth_date='1970-01-01').ho_insert()\n        &gt;&gt;&gt; print(gaston)\n        {'id': 1772, 'first_name': 'Ga', 'last_name': 'La', 'birth_date': datetime.date(1970, 1, 1)}\n\n    Note:\n        It is not possible to insert more than one row with the insert method\n    \"\"\"\n    _ = args and args != ('*',) and self._ho_check_colums(*args)\n    query_template = \"insert into {} ({}) values ({})\"\n    self._ho_query_type = 'insert'\n    fields_names, values, fk_fields, fk_query, fk_values = self.__what()\n    what_to_insert = [\"%s\" for _ in range(len(values))]\n    if fk_fields:\n        fields_names += fk_fields\n        what_to_insert += fk_query\n        values += fk_values\n    query = query_template.format(self._qrn, \", \".join(fields_names), \", \".join(what_to_insert))\n    returning = args or ['*']\n    if returning:\n        query = self._ho_add_returning(query, *returning)\n    with self.__execute(query, tuple(values)) as cursor:\n        res = [dict(elt) for elt in cursor.fetchall()] or [{}]\n        return res[0]\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_is_empty","title":"<code>ho_is_empty()</code>","text":"<p>Returns True if the relation is empty, False otherwise.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_empty(self):\n    \"\"\"Returns True if the relation is empty, False otherwise.\n    \"\"\"\n    self.ho_limit(1)\n    return self.ho_count() == 0\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_is_set","title":"<code>ho_is_set()</code>","text":"<p>Return True if one field at least is set or if self has been constrained by at least one of its foreign keys or self is the result of a combination of Relations (using set operators).</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_is_set(self):\n    \"\"\"Return True if one field at least is set or if self has been\n    constrained by at least one of its foreign keys or self is the\n    result of a combination of Relations (using set operators).\n    \"\"\"\n    joined_to = False\n    for _, jt_ in self._ho_join_to.items():\n        jt_id = id(jt_)\n        if jt_id in self._ho_fk_loop:\n            raise RuntimeError(\"Can't set Fkey on the same object\")\n        self._ho_fk_loop.add(jt_id)\n        joined_to |= jt_.ho_is_set()\n    self._ho_fk_loop = set()\n    return (joined_to or bool(self._ho_set_operators.operator) or bool(self._ho_neg) or\n            bool({field for field in self._ho_fields.values() if field.is_set()}))\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_limit","title":"<code>ho_limit(_limit_)</code>","text":"<p>Set limit for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_limit(self, _limit_):\n    \"\"\"Set limit for the next SQL select request.\"\"\"\n    if _limit_:\n        self._ho_select_params['limit'] = int(_limit_)\n    elif 'limit' in self._ho_select_params:\n        self._ho_select_params.pop('limit')\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_mogrify","title":"<code>ho_mogrify()</code>","text":"<p>Prints the select query.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_mogrify(self):\n    \"\"\"Prints the select query.\"\"\"\n    self._ho_mogrify = True\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_offset","title":"<code>ho_offset(_offset_)</code>","text":"<p>Set the offset for the next SQL select request.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_offset(self, _offset_):\n    \"\"\"Set the offset for the next SQL select request.\"\"\"\n    self._ho_select_params['offset'] = int(_offset_)\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_order_by","title":"<code>ho_order_by(_order_)</code>","text":"<p>Set SQL order by according to the \"order\" string passed</p> <p>@order string example : \"field1, field2 desc, field3, field4 desc\"</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_order_by(self, _order_):\n    \"\"\"Set SQL order by according to the \"order\" string passed\n\n    @order string example :\n    \"field1, field2 desc, field3, field4 desc\"\n    \"\"\"\n    self._ho_select_params['order_by'] = _order_\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_select","title":"<code>ho_select(*args)</code>","text":"<p>Gets the set of values correponding to the constraint attached to the object. This method is a generator.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>the fields names of the returned attributes. If omitted, all the fields are returned.</p> <code>()</code> <p>Yields:</p> Type Description <p>the result of the query as a dictionary.</p> Example <p>for person in Person(last_name=('like', 'La%')).ho_select('id'):     print(person)</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_select(self, *args):\n    \"\"\"Gets the set of values correponding to the constraint attached to the object.\n    This method is a generator.\n\n    Arguments:\n        *args: the fields names of the returned attributes. If omitted,\n            all the fields are returned.\n\n    Yields:\n        the result of the query as a dictionary.\n\n    Example:\n        &gt;&gt;&gt; for person in Person(last_name=('like', 'La%')).ho_select('id'):\n        &gt;&gt;&gt;     print(person)\n        {'id': 1772}\n    \"\"\"\n    self._ho_check_colums(*args)\n    query, values = self._ho_prep_select(*args)\n    with self.__execute(query, values) as cursor:\n        for elt in cursor:\n            yield dict(elt)\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_unaccent","title":"<code>ho_unaccent(*fields_names)</code>","text":"<p>Sets unaccent for each field listed in fields_names</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_unaccent(self, *fields_names):\n    \"Sets unaccent for each field listed in fields_names\"\n    for field_name in fields_names:\n        if not isinstance(self.__dict__[field_name], Field):\n            raise ValueError(f'{field_name} is not a Field!')\n        self.__dict__[field_name].unaccent = True\n    return self\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_unfreeze","title":"<code>ho_unfreeze()</code>","text":"<p>Allow to add attributs to a relation</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_unfreeze(self):\n    \"Allow to add attributs to a relation\"\n    self._ho_isfrozen = False\n</code></pre>"},{"location":"api/relation/#half_orm.relation.Relation.ho_update","title":"<code>ho_update(*args, update_all=False, **kwargs)</code>","text":"<p>kwargs represents the values to be updated {[field name:value]} The object self must be set unless update_all is True. The constraints of self are updated with kwargs.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def ho_update(self, *args, update_all=False, **kwargs):\n    \"\"\"\n    kwargs represents the values to be updated {[field name:value]}\n    The object self must be set unless update_all is True.\n    The constraints of self are updated with kwargs.\n    \"\"\"\n    if not (self.ho_is_set() or update_all):\n        raise RuntimeError(\n            f'Attempt to update all rows of {self.__class__.__name__}'\n            ' without update_all being set to True!')\n\n    _ = args and args != ('*',) and self._ho_check_colums(*args)\n    self._ho_check_colums(*(kwargs.keys()))\n    update_args = {key: value for key, value in kwargs.items() if value is not None}\n    if not update_args:\n        return None # no new value update. Should we raise an error here?\n\n    query_template = \"update {} set {} {}\"\n    what, where, values = self.__update_args(**update_args)\n    where, values = self.__fkey_where(where, values)\n    query = query_template.format(self._qrn, what, where)\n    if args:\n        query = self._ho_add_returning(query, *args)\n    with self.__execute(query, tuple(values)) as cursor:\n        for field_name, value in update_args.items():\n            self._ho_fields[field_name].set(value)\n        if args:\n            return [dict(elt) for elt in cursor.fetchall()]\n    return None\n</code></pre>"},{"location":"api/relation/#half_orm.relation-functions","title":"Functions","text":""},{"location":"api/relation/#half_orm.relation.singleton","title":"<code>singleton(fct)</code>","text":"<p>Decorator. Enforces the relation to define a singleton.</p> <p>_ho_is_singleton is set by Relation.get. _ho_is_singleton is unset as soon as a Field is set.</p> Source code in <code>half_orm/relation.py</code> <pre><code>def singleton(fct):\n    \"\"\"Decorator. Enforces the relation to define a singleton.\n\n    _ho_is_singleton is set by Relation.get.\n    _ho_is_singleton is unset as soon as a Field is set.\n    \"\"\"\n    @wraps(fct)\n    def wrapper(self, *args, **kwargs):\n        if self._ho_is_singleton:\n            return fct(self, *args, **kwargs)\n        try:\n            self = self.ho_get()\n            return fct(self, *args, **kwargs)\n        except relation_errors.ExpectedOneError as err:\n            raise relation_errors.NotASingletonError(err)\n    wrapper.__is_singleton = True\n    wrapper.__orig_args = inspect.getfullargspec(fct)\n    return wrapper\n</code></pre>"},{"location":"api/relation/#half_orm.relation.transaction","title":"<code>transaction(fct)</code>","text":"<p>Decorator. Enforces every SQL insert, update or delete operation called within a Relation method to be executed in a transaction.</p> Usage <p>from relation import transaction class Person(model.get_relation_class(actor.person)):     [...]     @transaction     def insert_many(self, **data):         for d_pers in **data:             self(**d_pers).ho_insert()     [...]</p> <p>Pers().insert_many([{...}, {...}])</p> Source code in <code>half_orm/relation.py</code> <pre><code>def transaction(fct):\n    \"\"\"Decorator. Enforces every SQL insert, update or delete operation called within a\n    Relation method to be executed in a transaction.\n\n    Usage:\n        from relation import transaction\n        class Person(model.get_relation_class(actor.person)):\n            [...]\n            @transaction\n            def insert_many(self, **data):\n                for d_pers in **data:\n                    self(**d_pers).ho_insert()\n            [...]\n\n        Pers().insert_many([{...}, {...}])\n\n    \"\"\"\n    def wrapper(self, *args, **kwargs):\n        with Transaction(self._ho_model):\n            return fct(self, *args, **kwargs)\n    return wrapper\n</code></pre>"},{"location":"api/transaction/","title":"Transaction","text":"<p>API Status</p> <p>API documentation is auto-generated from docstrings. Ensure docstrings are comprehensive.</p>"},{"location":"api/transaction/#overview","title":"Overview","text":"<p>[Module purpose and key concepts]</p>"},{"location":"api/transaction/#reference","title":"Reference","text":""},{"location":"api/transaction/#half_orm.transaction","title":"<code>transaction</code>","text":"<p>This module provides the Transaction class.</p>"},{"location":"api/transaction/#half_orm.transaction-classes","title":"Classes","text":""},{"location":"api/transaction/#half_orm.transaction.Transaction","title":"<code>Transaction</code>","text":"Source code in <code>half_orm/transaction.py</code> <pre><code>class Transaction:\n    \"\"\"\n    \"\"\"\n\n    __transactions = {}\n    def __call__(self, model):\n        self.__id = id(model)\n        self.__transaction = None\n        if self.__id not in self.__class__.__transactions:\n            self.__class__.__transactions[self.__id] = {}\n            self.__transaction = self.__class__.__transactions[self.__id]\n            self.__transaction['level'] = 0\n            self.__transaction['model'] = model\n        else:\n            self.__transaction = self.__transactions[self.__id]\n\n    __init__ = __call__\n\n    def __enter__(self):\n        if self.__transaction['model']._connection.autocommit:\n            self.__transaction['model']._connection.autocommit = False\n        self.__transaction['level'] += 1\n\n    def __exit__(self, *_):\n        self.__transaction['level'] -= 1\n        if self.__transaction['level'] == 0:\n            try:\n                self.__transaction['model']._connection.commit()\n                self.__transaction['model']._connection.autocommit = True\n            except Exception as exc:\n                self.__transaction['model']._connection.rollback()\n\n    @property\n    def level(self):\n        return self.__transaction.get('level')\n\n    def is_set(self):\n        return self.__transaction.get('level', 0) &gt; 0\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<p>Section Status</p> <p>Architecture documentation is for advanced users and contributors.</p>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<p>[Core architectural principles]</p>"},{"location":"architecture/#components","title":"Components","text":"<p>[System components and their relationships]</p>"},{"location":"architecture/factory/","title":"Factory Pattern","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/factory/#overview","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/factory/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"architecture/metadata/","title":"PostgreSQL Metadata","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/metadata/#overview","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/metadata/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"architecture/overview/","title":"Overview","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/overview/#overview_1","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/overview/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"architecture/query-processing/","title":"Query Processing","text":"<p>Architecture Status</p> <p>This section needs detailed technical documentation for contributors.</p>"},{"location":"architecture/query-processing/#overview","title":"Overview","text":"<p>[Component overview and purpose]</p>"},{"location":"architecture/query-processing/#technical-details","title":"Technical Details","text":"<p>[Implementation details and patterns]</p>"},{"location":"ecosystem/","title":"halfORM Ecosystem","text":"<p>Work in Progress</p> <p>The halfORM ecosystem is actively evolving. This documentation outlines our vision and current development efforts. We welcome contributions, feedback, and ideas from the community!</p> <ul> <li>\ud83d\udcac Share your thoughts: GitHub Discussions</li> <li>\ud83d\udc1b Report issues: GitHub Issues</li> <li>\ud83e\udd1d Contribute: Help shape the future of halfORM development tools</li> </ul> <p>The halfORM ecosystem extends the core PostgreSQL-native ORM with a rich set of tools and extensions for modern development workflows. Built on a database-first philosophy, the ecosystem provides everything from development frameworks to production-ready APIs.</p>"},{"location":"ecosystem/#architecture-overview","title":"Architecture Overview","text":"<p>The halfORM ecosystem is designed around three complementary layers:</p>"},{"location":"ecosystem/#extensions-layer","title":"\ud83e\udde9 Extensions Layer","text":"<p>Optional and modular - <code>half-orm-litestar-api</code> - REST API generation - <code>half-orm-admin</code> - Admin interfaces - <code>half-orm-monitoring</code> - Observability tools - ...and more community extensions</p> <p>\u2195\ufe0f Extends</p>"},{"location":"ecosystem/#halform_dev-layer","title":"\ud83d\udee0\ufe0f halfORM_dev Layer","text":"<p>Development Framework &amp; hop command - Project management and scaffolding - Database patch system with versioning - Code generation and Git integration - Extension point for ecosystem tools</p> <p>\u2195\ufe0f Built on</p>"},{"location":"ecosystem/#halform-core-layer","title":"\ud83d\uddc3\ufe0f halfORM Core Layer","text":"<p>PostgreSQL-native ORM - Stable and independent - Database introspection and relation classes - Query building with transparent SQL - Transaction management - Can be used standalone</p>"},{"location":"ecosystem/#core-components","title":"Core Components","text":""},{"location":"ecosystem/#halform-core","title":"\ud83d\uddc3\ufe0f halfORM Core","text":"<p>Status: Stable and mature Purpose: PostgreSQL-native Object-Relational Mapper</p> <p>The foundation layer that can be used independently. Provides: - Database introspection and relation classes - Query building with transparent SQL generation - Transaction management - Advanced PostgreSQL feature support</p> <pre><code>from half_orm.model import Model\n\n# Direct usage - no framework required\nblog = Model('blog_db')\nPost = blog.get_relation_class('blog.post')\n\n# Immediate productivity\nfor post in Post(is_published=True).ho_order_by('created_at DESC'):\n    print(post['title'])\n</code></pre> <p>\ud83d\udcd6 Learn halfORM Core \u2192</p>"},{"location":"ecosystem/#halform_dev","title":"\ud83d\udee0\ufe0f halfORM_dev","text":"<p>Status: Early Alpha - Breaking changes expected Purpose: Development framework with project management capabilities</p> <p>Vision for comprehensive development capabilities: - Project scaffolding and structure - Database patch management with semantic versioning - Automatic code generation synchronized with schema - Git workflow integration - Testing framework - Production deployment tools</p> <pre><code># Planned development lifecycle\npip install half-orm-dev\nhop new my_project --devel\nhop prepare -l minor -m \"Add user system\"\nhop apply\nhop release\n</code></pre> <p>\ud83d\udcd6 Learn about halfORM_dev \u2192</p>"},{"location":"ecosystem/#extensions","title":"\ud83e\udde9 Extensions","text":"<p>Status: Concept phase - Proof of concepts in development Purpose: Specialized tools that will extend halfORM_dev</p> <p>Planned packages that will integrate with the <code>hop</code> command:</p> Extension Purpose Status Planned Commands half-orm-litestar-api REST API generation \ud83e\uddea Proof of Concept <code>hop litestar-api generate</code> half-orm-admin Admin interface \ud83d\udcad Concept <code>hop admin setup</code> half-orm-monitoring Observability tools \ud83d\udcad Concept <code>hop monitoring dashboard</code>"},{"location":"ecosystem/#getting-started","title":"Getting Started","text":""},{"location":"ecosystem/#quick-start-path","title":"Quick Start Path","text":"<pre><code># 1. Choose your approach\npip install half-orm          # Core only - integrate into existing project\n# OR\npip install half-orm-dev      # Full development framework\n\n# 2. If using halfORM_dev, create project\nhop new my_project --devel\ncd my_project\n\n# 3. Add extensions as needed\npip install half-orm-litestar-api\nhop litestar-api init\n\n# 4. Enhanced workflow\nhop prepare -l patch\nhop apply\nhop litestar-api generate\nhop release\n</code></pre>"},{"location":"ecosystem/#learning-path","title":"Learning Path","text":"<p>\ud83d\ude80 New to halfORM? 1. Start with halfORM Quick Start 2. Learn core concepts 3. Try the tutorial</p> <p>\ud83d\udd25 Interested in development frameworks? 1. Learn about halfORM_dev vision 2. Review the guidelines 3. Consider contributing</p> <p>\u26a1 Want to contribute or follow development? Follow progress on the extension development</p>"},{"location":"ecosystem/#use-cases","title":"Use Cases","text":""},{"location":"ecosystem/#core-halform-only","title":"\ud83c\udfaf Core halfORM Only","text":"<p>Perfect for: - Existing applications - Add powerful PostgreSQL ORM - Microservices - Lightweight database layer - Data analysis - Explore and manipulate data - Custom integrations - Build your own tooling</p> <pre><code># Clean, direct database access\nfrom half_orm.model import Model\n\nanalytics = Model('analytics_db')\nEvents = analytics.get_relation_class('public.events')\n\n# Powerful querying without framework overhead\ndaily_stats = (Events(date=('&gt;', '2024-01-01'))\n               .ho_order_by('date')\n               .ho_select('date', 'count', 'revenue'))\n</code></pre>"},{"location":"ecosystem/#halform_dev-framework","title":"\ud83d\udee0\ufe0f halfORM_dev Framework","text":"<p>Vision for: - New applications - Complete development lifecycle - Team projects - Standardized workflow and structure - Database evolution - Managed schema changes - Production deployments - Automated patch system</p> <pre><code># Envisioned development workflow\nhop new company_app --devel\nhop prepare -l minor -m \"Add payment system\"\n# ... develop and test ...\nhop release --push\n</code></pre>"},{"location":"ecosystem/#extended-ecosystem","title":"\ud83e\udde9 Extended Ecosystem","text":"<p>Vision for: - API-first applications - Automatic REST/GraphQL generation - Admin panels - Ready-made management interfaces - Monitoring - Built-in observability - Custom workflows - Extensible framework</p> <pre><code># Envisioned rich development experience\npip install half-orm-litestar-api half-orm-admin\nhop litestar-api generate --openapi\nhop admin setup --auth\n</code></pre>"},{"location":"ecosystem/#why-halform-ecosystem","title":"Why halfORM Ecosystem?","text":""},{"location":"ecosystem/#database-first-philosophy","title":"Database-First Philosophy","text":"<p>Unlike code-first ORMs, halfORM puts your PostgreSQL database at the center:</p> <p>\u2705 Schema in SQL - Use PostgreSQL's full power \u2705 No migrations - Schema changes happen in SQL \u2705 Instant integration - Works with existing databases \u2705 SQL transparency - See exactly what queries run  </p>"},{"location":"ecosystem/#modular-architecture","title":"Modular Architecture","text":"<p>Choose exactly what you need:</p> <p>\u2705 Core only - Lightweight ORM for specific use cases \u2705 Development framework - Complete project management \u2705 Extensions - Add functionality incrementally \u2705 Custom extensions - Build your own tools  </p>"},{"location":"ecosystem/#production-ready","title":"Production Ready","text":"<p>Built for real applications:</p> <p>\u2705 Mature core - Stable API, extensive testing \u2705 Patch system - Safe database evolution \u2705 Git integration - Professional development workflow \u2705 Deployment tools - Production-tested processes  </p>"},{"location":"ecosystem/#extension-development","title":"Extension Development","text":""},{"location":"ecosystem/#for-extension-developers","title":"For Extension Developers","text":"<p>The halfORM ecosystem welcomes contributions! Building extensions is straightforward:</p> <pre><code># half_orm_myextension/hop_extension.py\ndef add_commands(hop_main_group):\n    @hop_main_group.group()\n    def myfeature():\n        \"\"\"My custom functionality\"\"\"\n        pass\n\n    @myfeature.command()\n    def generate():\n        \"\"\"Generate my custom output\"\"\"\n        # Your extension logic here\n        pass\n</code></pre> <p>\ud83d\udcd6 Extension Development Guide \u2192</p>"},{"location":"ecosystem/#standards-and-guidelines","title":"Standards and Guidelines","text":"<ul> <li>Development Guidelines - Standards for the ecosystem</li> <li>Plugin API - Technical integration reference</li> <li>Best Practices - Proven patterns</li> <li>Publishing Guide - Share your extension</li> </ul>"},{"location":"ecosystem/#community-and-support","title":"Community and Support","text":""},{"location":"ecosystem/#get-involved","title":"Get Involved","text":"<ul> <li>GitHub Discussions - Ask questions, share ideas</li> <li>Issues - Report bugs, request features</li> <li>Contributing - Help build the ecosystem</li> </ul>"},{"location":"ecosystem/#resources","title":"Resources","text":"<ul> <li>Extension Registry - Browse available extensions</li> <li>Examples Repository - Real-world usage patterns</li> <li>API Reference - Complete technical documentation</li> </ul>"},{"location":"ecosystem/#roadmap-and-vision","title":"Roadmap and Vision","text":""},{"location":"ecosystem/#current-reality","title":"Current Reality","text":"<ul> <li>\u2705 halfORM Core - Stable production release</li> <li>\ud83e\uddea halfORM_dev - Early alpha with breaking changes expected</li> <li>\ud83e\uddea half-orm-litestar-api - Proof of concept stage</li> <li>\ud83d\udccb Extension ecosystem - Guidelines and architecture planning</li> </ul>"},{"location":"ecosystem/#development-focus","title":"Development Focus","text":"<ul> <li>\ud83c\udfaf Stabilizing halfORM_dev architecture</li> <li>\ud83c\udfaf Plugin system implementation</li> <li>\ud83c\udfaf Extension development standards</li> <li>\ud83c\udfaf Community feedback and iteration</li> </ul>"},{"location":"ecosystem/#future-vision","title":"Future Vision","text":"<ul> <li>\ud83d\ude80 Mature development framework</li> <li>\ud83d\ude80 Rich ecosystem of community extensions</li> <li>\ud83d\ude80 Enterprise-grade tooling</li> <li>\ud83d\ude80 Advanced integrations and workflows</li> </ul> <p>Note: This ecosystem represents our vision for the future of halfORM development tools. Current implementations are experimental and subject to significant changes.</p>"},{"location":"ecosystem/#getting-help","title":"Getting Help","text":""},{"location":"ecosystem/#documentation-paths","title":"Documentation Paths","text":"<ul> <li>New users: Quick Start \u2192 Tutorial</li> <li>Developers: halfORM_dev \u2192 Guidelines</li> <li>Contributors: Development Guide</li> </ul>"},{"location":"ecosystem/#support-channels","title":"Support Channels","text":"<ul> <li>Questions: GitHub Discussions</li> <li>Bug reports: GitHub Issues</li> <li>Feature requests: Discussions</li> </ul> <p>The halfORM ecosystem brings the power of PostgreSQL to modern Python development with tools that respect your database design and enhance your development workflow.</p> <p>Ready to get started? Install halfORM \u2192 or Explore the halfORM_dev vision \u2192</p>"},{"location":"ecosystem/development/development-workflow/","title":"Development Workflow Guide","text":"<p>This guide explains halfORM's development workflow, from feature development to stable releases, including code management, testing, and PyPI publishing.</p>"},{"location":"ecosystem/development/development-workflow/#overview","title":"Overview","text":"<p>halfORM follows a GitFlow-inspired workflow with automated CI/CD, comprehensive testing, and coordinated documentation deployment. The workflow supports multiple concurrent development streams while maintaining stability.</p>"},{"location":"ecosystem/development/development-workflow/#branch-structure","title":"Branch Structure","text":"<pre><code>main                    # Latest stable development\n\u251c\u2500\u2500 dev/0.16.x         # Patches in preparation for 0.16.x\n\u251c\u2500\u2500 release/0.16.x     # Release candidate for 0.16.x\n\u251c\u2500\u2500 maint/0.15.x       # Maintenance branch for 0.15.x series\n\u251c\u2500\u2500 feature/new-cli    # Feature development\n\u251c\u2500\u2500 hotfix/urgent-fix  # Urgent fixes\n\u2514\u2500\u2500 docs/update-guide  # Documentation-only changes\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#development-phases","title":"Development Phases","text":""},{"location":"ecosystem/development/development-workflow/#1-feature-development","title":"1. Feature Development","text":"<p>Purpose: Develop new features or significant improvements</p> <pre><code># Create feature branch from main\ngit checkout main\ngit pull origin main\ngit checkout -b feature/unified-cli\n\n# Development cycle\n# ... implement feature ...\n# ... write tests ...\n# ... update documentation ...\n\n# Push and create PR\ngit push origin feature/unified-cli\n# Create Pull Request to main\n</code></pre> <p>Checklist:</p> <ul> <li> Code implements feature specification</li> <li> All tests pass (<code>pytest</code>)</li> <li> Documentation updated</li> <li> CLI changes reflected in help text</li> <li> Breaking changes documented</li> </ul>"},{"location":"ecosystem/development/development-workflow/#2-patch-development","title":"2. Patch Development","text":"<p>Purpose: Bug fixes, minor improvements, and maintenance</p> <pre><code># Create or checkout dev branch\ngit checkout -b dev/0.16.x  # or git checkout dev/0.16.x\ngit pull origin dev/0.16.x\n\n# Development cycle\n# ... fix bugs ...\n# ... add tests ...\n# ... update docs ...\n\n# Push changes\ngit push origin dev/0.16.x\n</code></pre> <p>Checklist:</p> <ul> <li> Bug fixes include regression tests</li> <li> Backward compatibility maintained</li> <li> Version number updated if needed</li> <li> Changelog updated</li> </ul>"},{"location":"ecosystem/development/development-workflow/#3-release-preparation","title":"3. Release Preparation","text":"<p>Purpose: Prepare stable release with thorough testing</p> <pre><code># Create release branch\ngit checkout -b release/0.16.x\ngit merge dev/0.16.x  # Include all patches\n\n# Release preparation\n# ... final testing ...\n# ... version number finalization ...\n# ... changelog completion ...\n\n# Push release candidate\ngit push origin release/0.16.x\n</code></pre> <p>Checklist:</p> <ul> <li> All tests pass on multiple Python versions</li> <li> Documentation is complete and accurate</li> <li> Version number is correct in <code>half_orm/version.txt</code></li> <li> Changelog is updated</li> <li> PyPI package builds successfully</li> <li> CLI help text is accurate</li> </ul>"},{"location":"ecosystem/development/development-workflow/#4-stable-release","title":"4. Stable Release","text":"<p>Purpose: Create production-ready release</p> <pre><code># Final release preparation\ngit checkout release/0.16.x\n# ... final commits if needed ...\n\n# Create release tag\ngit tag v0.16.0 -m \"release: halfORM 0.16.0 with unified CLI\"\ngit push origin v0.16.0\n\n# Merge back to main\ngit checkout main\ngit merge release/0.16.x\ngit push origin main\n</code></pre> <p>Checklist:</p> <ul> <li> Tag follows semantic versioning (<code>vX.Y.Z</code>)</li> <li> GitHub release created with release notes</li> <li> PyPI package published</li> <li> Documentation deployed</li> <li> Release announcement prepared</li> </ul>"},{"location":"ecosystem/development/development-workflow/#5-hotfix-process","title":"5. Hotfix Process","text":"<p>Purpose: Emergency fixes for production issues</p> <pre><code># Create hotfix from the affected production version\ngit checkout v0.16.0  # Latest production tag\ngit checkout -b hotfix/critical-security-fix\n\n# Quick fix\n# ... minimal changes ...\n# ... targeted tests ...\n\n# Apply fix to production branch first\ngit checkout release/0.16.x  # or create if doesn't exist\ngit cherry-pick hotfix/critical-security-fix\n\n# Create emergency patch release\ngit tag v0.16.1 -m \"hotfix: critical security fix\"\ngit push origin v0.16.1\n\n# Apply fix to development branches\ngit checkout dev/0.16.x\ngit cherry-pick hotfix/critical-security-fix\ngit push origin dev/0.16.x\n\n# Apply fix to main\ngit checkout main\ngit cherry-pick hotfix/critical-security-fix\ngit push origin main\n\n# Clean up hotfix branch\ngit branch -d hotfix/critical-security-fix\n</code></pre> <p>Multi-version hotfix (if multiple versions affected): <pre><code># Fix affects 0.15.x and 0.16.x\ngit checkout hotfix/critical-security-fix\n\n# Apply to 0.15.x maintenance branch\ngit checkout maint/0.15.x  # or create from v0.15.latest\ngit cherry-pick hotfix/critical-security-fix\ngit tag v0.15.4 -m \"hotfix: critical security fix\"\ngit push origin v0.15.4\n\n# Apply to 0.16.x production branch\ngit checkout release/0.16.x\ngit cherry-pick hotfix/critical-security-fix\ngit tag v0.16.1 -m \"hotfix: critical security fix\"\ngit push origin v0.16.1\n\n# Apply to development branches\ngit checkout dev/0.16.x\ngit cherry-pick hotfix/critical-security-fix\ngit push origin dev/0.16.x\n\ngit checkout main\ngit cherry-pick hotfix/critical-security-fix\ngit push origin main\n</code></pre></p> <p>Checklist:</p> <ul> <li> Minimal, targeted changes only</li> <li> Security fixes tested thoroughly</li> <li> Patch version incremented on all affected branches</li> <li> Emergency release notes prepared</li> <li> Fix applied to all production versions (cherry-pick)</li> <li> Fix applied to all development branches</li> <li> All affected versions tagged and released</li> <li> Documentation updated if user-facing changes</li> </ul>"},{"location":"ecosystem/development/development-workflow/#version-management","title":"Version Management","text":""},{"location":"ecosystem/development/development-workflow/#semantic-versioning","title":"Semantic Versioning","text":"<p>halfORM follows Semantic Versioning:</p> <ul> <li>Major (<code>1.0.0</code> \u2192 <code>2.0.0</code>): Breaking changes</li> <li>Minor (<code>0.15.0</code> \u2192 <code>0.16.0</code>): New features, backward compatible</li> <li>Patch (<code>0.16.0</code> \u2192 <code>0.16.1</code>): Bug fixes, backward compatible</li> </ul>"},{"location":"ecosystem/development/development-workflow/#version-files","title":"Version Files","text":"<pre><code># Update version in\nhalf_orm/version.txt          # Main version file\nsetup.py                      # Package metadata\ndocs/index.md                 # Documentation version\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#pre-release-versions","title":"Pre-release Versions","text":"<pre><code># Development versions\n0.16.0-dev       # Development branch\n0.16.0-rc1       # Release candidate\n0.16.0-alpha1    # Alpha release\n0.16.0-beta1     # Beta release\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#testing-strategy","title":"Testing Strategy","text":""},{"location":"ecosystem/development/development-workflow/#test-levels","title":"Test Levels","text":"<ol> <li>Unit Tests: Individual functions and classes</li> <li>Integration Tests: Database interactions</li> <li>CLI Tests: Command-line interface</li> <li>Documentation Tests: Code examples in docs</li> </ol>"},{"location":"ecosystem/development/development-workflow/#test-execution","title":"Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run specific test categories\npytest tests/unit/              # Unit tests\npytest tests/integration/       # Integration tests\npytest tests/cli/              # CLI tests\n\n# Run with coverage\npytest --cov=half_orm --cov-report=html\n\n# Test multiple Python versions\ntox\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#continuous-integration","title":"Continuous Integration","text":"<p>GitHub Actions runs tests on: - Python versions: 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13 - PostgreSQL versions: 9.6, 10, 11, 12, 13, 14, 15, 16, 17 - Operating systems: Ubuntu, macOS, Windows</p>"},{"location":"ecosystem/development/development-workflow/#release-process","title":"Release Process","text":""},{"location":"ecosystem/development/development-workflow/#1-pre-release-checklist","title":"1. Pre-release Checklist","text":"<ul> <li> All tests pass on CI</li> <li> Documentation is complete</li> <li> Version numbers updated</li> <li> Changelog prepared</li> <li> Migration guide written (if needed)</li> </ul>"},{"location":"ecosystem/development/development-workflow/#2-release-preparation","title":"2. Release Preparation","text":"<pre><code># Update version\necho \"0.16.0\" &gt; half_orm/version.txt\n\n# Update documentation\n# Edit docs/index.md to reflect new version\n\n# Update changelog\n# Edit CHANGELOG.md\n\n# Commit changes\ngit add .\ngit commit -m \"chore: prepare release 0.16.0\"\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#3-release-creation","title":"3. Release Creation","text":"<pre><code># Create annotated tag\ngit tag -a v0.16.0 -m \"release: halfORM 0.16.0\n\nMajor improvements:\n- Unified CLI interface\n- Automatic extension discovery\n- Enhanced database inspection\n- Improved developer experience\n\nBreaking changes:\n- Development tools moved to half-orm-dev package\n- CLI commands restructured under unified interface\n\nMigration guide: https://collorg.github.io/halfORM/guides/migration/\"\n\n# Push tag\ngit push origin v0.16.0\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#4-pypi-publishing","title":"4. PyPI Publishing","text":"<pre><code># Build package\npython -m build\n\n# Upload to PyPI (automated via GitHub Actions)\n# Manual upload if needed:\n# python -m twine upload dist/*\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#5-post-release","title":"5. Post-release","text":"<pre><code># Create GitHub release\n# - Go to GitHub releases\n# - Create release from tag\n# - Add release notes\n# - Upload additional files if needed\n\n# Update development version\necho \"0.17.0-dev\" &gt; half_orm/version.txt\ngit add half_orm/version.txt\ngit commit -m \"chore: bump version to 0.17.0-dev\"\ngit push origin main\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#code-quality","title":"Code Quality","text":""},{"location":"ecosystem/development/development-workflow/#code-style","title":"Code Style","text":"<pre><code># Format code\nblack half_orm/\nblack tests/\n\n# Lint code\npylint half_orm/\nflake8 half_orm/\n\n# Type checking\nmypy half_orm/\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># Install pre-commit\npip install pre-commit\npre-commit install\n\n# Run manually\npre-commit run --all-files\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#code-review","title":"Code Review","text":"<p>All changes require:</p> <ul> <li> Code review by at least one maintainer</li> <li> All CI checks passing</li> <li> Documentation updated</li> <li> Tests added/updated</li> </ul>"},{"location":"ecosystem/development/development-workflow/#extension-development","title":"Extension Development","text":""},{"location":"ecosystem/development/development-workflow/#creating-extensions","title":"Creating Extensions","text":"<pre><code># Extension structure\nhalf-orm-extension/\n\u251c\u2500\u2500 half_orm_extension/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 cli_extension.py     # CLI integration\n\u2502   \u2514\u2500\u2500 core.py             # Main functionality\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 docs/\n\u2514\u2500\u2500 setup.py\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#extension-integration","title":"Extension Integration","text":"<pre><code># half_orm_extension/cli_extension.py\nimport click\n\nEXTENSION_INFO = {\n    'description': 'Extension for X functionality',\n    'commands': ['generate', 'serve', 'deploy']\n}\n\ndef add_commands(main_cli):\n    @main_cli.group()\n    def extension():\n        \"\"\"Extension commands.\"\"\"\n        pass\n\n    @extension.command()\n    def generate():\n        \"\"\"Generate something.\"\"\"\n        pass\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#documentation-coordination","title":"Documentation Coordination","text":""},{"location":"ecosystem/development/development-workflow/#documentation-updates","title":"Documentation Updates","text":"<ul> <li>Feature branches: Update relevant docs</li> <li>Release branches: Complete documentation review</li> <li>Hotfix branches: Update only if user-facing changes</li> </ul>"},{"location":"ecosystem/development/development-workflow/#documentation-deployment","title":"Documentation Deployment","text":"<p>Documentation is automatically deployed when: - Code is pushed to tracked branches - Release tags are created - Documentation-only changes are made</p> <p>See Documentation Workflow Guide for details.</p>"},{"location":"ecosystem/development/development-workflow/#collaboration","title":"Collaboration","text":""},{"location":"ecosystem/development/development-workflow/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create branch from appropriate base</li> <li>Implement changes with tests</li> <li>Update documentation if needed</li> <li>Run tests locally</li> <li>Create Pull Request</li> <li>Address review feedback</li> <li>Merge after approval</li> </ol>"},{"location":"ecosystem/development/development-workflow/#issue-management","title":"Issue Management","text":"<ul> <li>Bug reports: Use bug report template</li> <li>Feature requests: Use feature request template</li> <li>Questions: Use discussions instead of issues</li> <li>Security issues: Use security policy</li> </ul>"},{"location":"ecosystem/development/development-workflow/#communication","title":"Communication","text":"<ul> <li>Discussions: General questions and ideas</li> <li>Issues: Bug reports and feature requests</li> <li>Pull Requests: Code changes and reviews</li> <li>Releases: Announcements and changelogs</li> </ul>"},{"location":"ecosystem/development/development-workflow/#advanced-workflows","title":"Advanced Workflows","text":""},{"location":"ecosystem/development/development-workflow/#multiple-version-support","title":"Multiple Version Support","text":"<pre><code># Create maintenance branch for long-term support\ngit checkout v0.15.3  # Latest 0.15.x version\ngit checkout -b maint/0.15.x\ngit push origin maint/0.15.x\n\n# Apply critical fixes to maintenance branch\ngit checkout maint/0.15.x\ngit cherry-pick &lt;commit-hash&gt;  # Cherry-pick from main/hotfix\ngit tag v0.15.4 -m \"maintenance: backport critical fix\"\ngit push origin v0.15.4\n\n# Maintain multiple versions simultaneously\n# 0.15.x - Long-term support (critical fixes only)\n# 0.16.x - Current stable (patches and fixes)\n# 0.17.x - Development (new features)\n</code></pre> <p>Maintenance strategy: - LTS versions: Critical security fixes only - Current stable: Bug fixes and patches - Development: New features and improvements</p>"},{"location":"ecosystem/development/development-workflow/#extension-release-coordination","title":"Extension Release Coordination","text":"<pre><code># Release core and extensions together\ngit tag v0.16.0\ngit push origin v0.16.0\n\n# Update extensions\ncd ../half-orm-dev\ngit tag v0.16.0\ngit push origin v0.16.0\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ecosystem/development/development-workflow/#common-issues","title":"Common Issues","text":"<p>Tests failing locally but passing on CI: - Check Python version differences - Verify database setup - Review environment variables</p> <p>Version conflicts: - Ensure all version files are updated - Check git tags are correct - Verify PyPI package metadata</p> <p>Extension not discovered: - Check package naming convention - Verify cli_extension.py exists - Ensure proper installation</p>"},{"location":"ecosystem/development/development-workflow/#best-practices","title":"Best Practices","text":"<ol> <li>Always run tests before pushing</li> <li>Write meaningful commit messages</li> <li>Keep changes focused and atomic</li> <li>Update documentation with code changes</li> <li>Use semantic versioning consistently</li> <li>Coordinate releases across extensions</li> <li>Maintain backward compatibility when possible</li> <li>Document breaking changes clearly</li> </ol>"},{"location":"ecosystem/development/development-workflow/#tools-and-scripts","title":"Tools and Scripts","text":""},{"location":"ecosystem/development/development-workflow/#development-setup","title":"Development Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/collorg/halfORM.git\ncd halfORM\n\n# Install in development mode\npip install -e .\npip install -r requirements-dev.txt\n\n# Run tests\npytest\n</code></pre>"},{"location":"ecosystem/development/development-workflow/#release-scripts","title":"Release Scripts","text":"<pre><code># Build and test package\npython -m build\npython -m twine check dist/*\n\n# Local installation test\npip install dist/half_orm-0.16.0-py3-none-any.whl\n</code></pre> <p>This workflow ensures consistent, high-quality releases while maintaining flexibility for different development needs and coordination with the documentation system.</p>"},{"location":"ecosystem/development/documentation-workflow/","title":"Documentation Workflow Guide","text":"<p>This guide explains how halfORM's documentation is managed with multi-version support, automated deployment, and coordinated with the Development Workflow.</p>"},{"location":"ecosystem/development/documentation-workflow/#overview","title":"Overview","text":"<p>halfORM uses a multi-version documentation system with automated deployment that mirrors the development workflow. Documentation is automatically built and deployed for different development stages.</p> <p>Development Coordination</p> <p>This documentation workflow is tightly coordinated with the Development Workflow.  The same branch structure and versioning strategy applies to both code and documentation.</p>"},{"location":"ecosystem/development/documentation-workflow/#branch-structure-documentation-deployment","title":"Branch Structure &amp; Documentation Deployment","text":"<p>The documentation deployment follows the same branch structure as code development:</p> Branch/Tag Pattern Version Deployed URL Description <code>main</code> <code>dev</code> <code>/dev/</code> Latest development documentation <code>dev/X.Y.x</code> <code>X.Y.x-dev</code> <code>/X.Y.x-dev/</code> Patch development documentation <code>release/X.Y.x</code> <code>X.Y.x-rc</code> <code>/X.Y.x-rc/</code> Release candidate documentation <code>vX.Y.Z</code> (tags) <code>X.Y.Z</code> <code>/X.Y.Z/</code> + <code>/latest/</code> Stable release (becomes default)"},{"location":"ecosystem/development/documentation-workflow/#url-structure","title":"URL Structure","text":"<pre><code>https://collorg.github.io/halfORM/\n\u251c\u2500\u2500 /                   # \u2192 Redirects to latest stable version\n\u251c\u2500\u2500 /latest/           # \u2192 Current stable version (alias)\n\u251c\u2500\u2500 /0.16.0/          # \u2192 Specific stable version\n\u251c\u2500\u2500 /0.16.x-rc/       # \u2192 Release candidate\n\u251c\u2500\u2500 /0.16.x-dev/      # \u2192 Development patches\n\u2514\u2500\u2500 /dev/             # \u2192 Main branch development\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#automatic-deployment","title":"Automatic Deployment","text":""},{"location":"ecosystem/development/documentation-workflow/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>Documentation is automatically deployed via GitHub Actions when:</p> <ul> <li>Push to <code>main</code> \u2192 Deploys <code>dev</code> version</li> <li>Push to <code>dev/X.Y.x</code> \u2192 Deploys <code>X.Y.x-dev</code> version  </li> <li>Push to <code>release/X.Y.x</code> \u2192 Deploys <code>X.Y.x-rc</code> version</li> <li>Tag <code>vX.Y.Z</code> \u2192 Deploys <code>X.Y.Z</code> version with <code>latest</code> alias</li> </ul>"},{"location":"ecosystem/development/documentation-workflow/#workflow-configuration","title":"Workflow Configuration","text":"<p>The documentation workflow is configured in <code>.github/workflows/docs.yml</code>:</p> <pre><code>name: Documentation\non:\n  push:\n    branches: [ main, 'release/*', 'dev/*' ]\n    tags: [ 'v*' ]\n  pull_request:\n    branches: [ main ]\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#version-resolution","title":"Version Resolution","text":"<p>The workflow automatically determines the appropriate version and alias:</p> <pre><code># Examples of automatic version resolution\ndev/0.16.x     \u2192 0.16.x-dev\nrelease/0.16.x \u2192 0.16.x-rc  \nv0.16.0        \u2192 0.16.0 (with latest alias)\nmain           \u2192 dev\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#local-development","title":"Local Development","text":""},{"location":"ecosystem/development/documentation-workflow/#prerequisites","title":"Prerequisites","text":"<pre><code># Install dependencies\npip install mkdocs-material mkdocstrings-python mkdocs-git-revision-date-localized-plugin mike\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#local-testing","title":"Local Testing","text":"<pre><code># Serve current documentation (single version)\nmkdocs serve\n\n# Deploy version locally for testing\n./scripts/deploy-docs.sh deploy dev\n./scripts/deploy-docs.sh deploy 0.16.0-rc latest\n\n# Serve multi-version documentation\n./scripts/deploy-docs.sh serve\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#local-version-management","title":"Local Version Management","text":"<pre><code># List deployed versions\n./scripts/deploy-docs.sh list\n\n# Deploy specific version\n./scripts/deploy-docs.sh deploy 0.16.0 latest\n\n# Set default version\n./scripts/deploy-docs.sh set-default latest\n\n# Delete version\n./scripts/deploy-docs.sh delete 0.16.0-rc1\n\n# Build documentation only\n./scripts/deploy-docs.sh build\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#content-management","title":"Content Management","text":""},{"location":"ecosystem/development/documentation-workflow/#version-specific-content","title":"Version-Specific Content","text":"<p>Use conditional blocks for version-specific content:</p> <pre><code>{% if version == \"0.16.0\" %}\nThis feature is new in version 0.16.0.\n{% endif %}\n\n{% if version != \"dev\" %}\nThis applies to stable versions only.\n{% endif %}\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#documentation-updates","title":"Documentation Updates","text":"<p>When updating documentation:</p> <ol> <li>Update relevant sections for the changes</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Include version-specific notes if needed</li> <li>Update migration guides for breaking changes</li> <li>Verify all links work correctly</li> </ol>"},{"location":"ecosystem/development/documentation-workflow/#cross-version-compatibility","title":"Cross-Version Compatibility","text":"<ul> <li>Keep URLs stable across versions when possible</li> <li>Use relative links for internal references</li> <li>Document breaking changes prominently</li> <li>Provide clear migration paths</li> </ul>"},{"location":"ecosystem/development/documentation-workflow/#version-management","title":"Version Management","text":""},{"location":"ecosystem/development/documentation-workflow/#default-version","title":"Default Version","text":"<p>The default version is what users see when they visit the root URL (<code>/</code>). It's automatically set when:</p> <ul> <li>A tag with <code>latest</code> alias is deployed</li> <li>Manual override using <code>mike set-default</code></li> </ul> <pre><code># Set default version manually\nmike set-default --push latest\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#version-lifecycle","title":"Version Lifecycle","text":"<pre><code># Development \u2192 Release Candidate \u2192 Stable\ndev/0.16.x \u2192 release/0.16.x \u2192 v0.16.0\n0.16.x-dev \u2192 0.16.x-rc \u2192 0.16.0 (latest)\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#cleanup","title":"Cleanup","text":"<pre><code># Remove old development versions\nmike delete --push 0.15.x-dev 0.14.x-dev\n\n# Remove old release candidates  \nmike delete --push 0.16.0-rc1 0.16.0-rc2\n\n# Keep stable versions for reference\n# 0.16.0, 0.15.0, etc. are kept for historical access\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ecosystem/development/documentation-workflow/#common-issues","title":"Common Issues","text":"<p>Documentation not updating: - Check GitHub Actions logs in the Actions tab - Verify push triggered the correct workflow - Ensure branch/tag naming follows conventions</p> <p>Version conflicts: <pre><code># Reset local gh-pages branch\ngit fetch origin\ngit checkout gh-pages\ngit reset --hard origin/gh-pages\n</code></pre></p> <p>Site shows 404 or old version: <pre><code># Set default version explicitly\nmike set-default --push latest\n\n# Or check what versions are deployed\nmike list\n</code></pre></p> <p>Local mike issues: <pre><code># Clean local mike state\nrm -rf .git/refs/heads/gh-pages\ngit branch -D gh-pages\ngit fetch origin gh-pages:gh-pages\n</code></pre></p>"},{"location":"ecosystem/development/documentation-workflow/#github-pages-configuration","title":"GitHub Pages Configuration","text":"<p>Ensure GitHub Pages is configured correctly:</p> <ol> <li>Go to Settings \u2192 Pages</li> <li>Set Source to \"Deploy from a branch\"</li> <li>Set Branch to <code>gh-pages</code></li> <li>Set Folder to <code>/ (root)</code></li> </ol>"},{"location":"ecosystem/development/documentation-workflow/#manual-deployment","title":"Manual Deployment","text":"<p>If automatic deployment fails:</p> <pre><code># Emergency manual deployment\nmike deploy --push --update-aliases 0.16.0 latest\nmike set-default --push latest\n\n# Verify deployment\nmike list\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#best-practices","title":"Best Practices","text":""},{"location":"ecosystem/development/documentation-workflow/#content-guidelines","title":"Content Guidelines","text":"<ol> <li>Keep documentation synchronized with code changes</li> <li>Use consistent formatting across all versions</li> <li>Include version compatibility information</li> <li>Provide working examples for each version</li> <li>Test all links before publishing</li> </ol>"},{"location":"ecosystem/development/documentation-workflow/#version-management_1","title":"Version Management","text":"<ol> <li>Clean up old versions regularly</li> <li>Keep stable versions for historical reference</li> <li>Document version changes in release notes</li> <li>Test deployed versions after each release</li> </ol>"},{"location":"ecosystem/development/documentation-workflow/#workflow-coordination","title":"Workflow Coordination","text":"<ol> <li>Update documentation with code changes in the same branch</li> <li>Follow the same branch patterns as code development</li> <li>Coordinate releases between code and documentation</li> <li>Test locally before pushing to shared branches</li> </ol>"},{"location":"ecosystem/development/documentation-workflow/#advanced-usage","title":"Advanced Usage","text":""},{"location":"ecosystem/development/documentation-workflow/#custom-version-deployment","title":"Custom Version Deployment","text":"<pre><code># Deploy custom version for testing\nmike deploy --push feature-test\nmike set-default --push feature-test\n\n# Deploy with custom alias\nmike deploy --push --update-aliases 0.16.0 stable\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#multiple-environment-support","title":"Multiple Environment Support","text":"<pre><code># Deploy to staging (using different branch)\nmike deploy --push --remote staging-origin staging\n\n# Deploy to production (using main remote)\nmike deploy --push --update-aliases 0.16.0 latest\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#version-archival","title":"Version Archival","text":"<pre><code># Archive old versions by moving to archive alias\nmike deploy --push --update-aliases 0.14.0 archive-0.14.0\nmike delete --push 0.14.0\n</code></pre>"},{"location":"ecosystem/development/documentation-workflow/#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<p>This documentation workflow is designed to work seamlessly with the Development Workflow:</p> <ul> <li>Branch synchronization: Same branch names, same purposes</li> <li>Version coordination: Documentation versions match code versions  </li> <li>Release coordination: Documentation and code released together</li> <li>Testing integration: Documentation tested with each code change</li> </ul> <p>For complete information about the development process, branch management, and release procedures, see the Development Workflow Guide.</p>"},{"location":"ecosystem/development/documentation-workflow/#scripts-reference","title":"Scripts Reference","text":"<p>The <code>scripts/deploy-docs.sh</code> script provides convenient commands:</p> <pre><code># Available commands\n./scripts/deploy-docs.sh deploy VERSION [ALIAS]\n./scripts/deploy-docs.sh list\n./scripts/deploy-docs.sh serve  \n./scripts/deploy-docs.sh set-default VERSION\n./scripts/deploy-docs.sh delete VERSION\n./scripts/deploy-docs.sh build\n./scripts/deploy-docs.sh help\n</code></pre> <p>See the script file for detailed usage and options.</p>"},{"location":"ecosystem/development/getting-started/","title":"Getting Started with Extension Development","text":"<p>This guide walks you through creating your first halfORM extension that integrates with the <code>hop</code> command. You'll learn the basics of the plugin system and build a simple but functional extension.</p> <p>Prerequisites</p> <ul> <li>Familiarity with Python packaging (<code>setup.py</code>, <code>pip install</code>)</li> <li>Basic understanding of Click for command-line interfaces</li> <li>Knowledge of halfORM fundamentals (Quick Start)</li> <li>halfORM_dev installed (<code>pip install half-orm-dev</code>)</li> </ul>"},{"location":"ecosystem/development/getting-started/#what-well-build","title":"What We'll Build","text":"<p>We'll create <code>half-orm-hello</code>, a simple extension that demonstrates: - Plugin discovery and registration - Integration with <code>hop</code> commands - Access to the current halfORM project context - Extension configuration and metadata</p> <p>The final result will provide these commands: <pre><code>hop hello greet --name \"World\"     # Prints \"Hello, World!\"\nhop hello status                   # Shows project information\nhop hello config                   # Manages extension settings\n</code></pre></p>"},{"location":"ecosystem/development/getting-started/#project-setup","title":"Project Setup","text":""},{"location":"ecosystem/development/getting-started/#1-create-extension-project-structure","title":"1. Create Extension Project Structure","text":"<pre><code>mkdir half-orm-hello\ncd half-orm-hello\n\n# Create the standard extension structure\nmkdir -p half_orm_hello\ntouch half_orm_hello/__init__.py\ntouch half_orm_hello/hop_extension.py\ntouch setup.py\ntouch README.md\n</code></pre> <p>Your structure should look like: <pre><code>half-orm-hello/\n\u251c\u2500\u2500 half_orm_hello/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 hop_extension.py    # Required: hop integration\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 README.md\n</code></pre></p>"},{"location":"ecosystem/development/getting-started/#2-package-configuration","title":"2. Package Configuration","text":"<p>Create <code>setup.py</code> with the standard extension format:</p> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='half-orm-hello',\n    version='0.1.0',\n    description='Hello World extension for halfORM',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    author='Your Name',\n    author_email='your.email@example.com',\n    url='https://github.com/yourusername/half-orm-hello',\n    license='GPL-3.0',\n    packages=find_packages(),\n    install_requires=[\n        'half-orm&gt;=0.15.0',\n        'half-orm-dev&gt;=0.1.0',  # Required for hop integration\n        'click&gt;=8.0.0',         # For command-line interface\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Topic :: Database',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    python_requires='&gt;=3.8',\n)\n</code></pre>"},{"location":"ecosystem/development/getting-started/#core-extension-implementation","title":"Core Extension Implementation","text":""},{"location":"ecosystem/development/getting-started/#3-extension-entry-point","title":"3. Extension Entry Point","text":"<p>Create <code>half_orm_hello/hop_extension.py</code> - this is the required integration point:</p> <pre><code>\"\"\"\nhop extension integration for half-orm-hello\n\nThis module provides the entry point for the halfORM ecosystem plugin system.\nThe add_commands() function is called automatically when the extension is discovered.\n\"\"\"\n\nimport click\nfrom half_orm_dev.repo import Repo\n\n\ndef add_commands(hop_main_group):\n    \"\"\"\n    Required entry point for halfORM extensions.\n\n    This function is called automatically by hop's plugin discovery system.\n    It should add command groups to the main hop CLI.\n\n    Args:\n        hop_main_group: The main Click group for the hop command\n    \"\"\"\n\n    @click.group()\n    def hello():\n        \"\"\"Hello World extension commands\"\"\"\n        pass\n\n    @hello.command()\n    @click.option('--name', default='halfORM', help='Name to greet')\n    @click.option('--uppercase', is_flag=True, help='Use uppercase')\n    def greet(name, uppercase):\n        \"\"\"Greet someone with a friendly message\"\"\"\n        message = f\"Hello, {name}!\"\n        if uppercase:\n            message = message.upper()\n        click.echo(message)\n\n    @hello.command()\n    def status():\n        \"\"\"Show current project status\"\"\"\n        repo = Repo()\n\n        if not repo.checked:\n            click.echo(\"\u274c Not in a halfORM project directory\")\n            return\n\n        click.echo(\"\u2705 halfORM Project Information:\")\n        click.echo(f\"   \ud83d\udce6 Project: {repo.name}\")\n        click.echo(f\"   \ud83d\udcc1 Base directory: {repo.base_dir}\")\n\n        if hasattr(repo, 'database') and repo.database:\n            click.echo(f\"   \ud83d\uddc4\ufe0f  Database: {repo.database.model.database}\")\n\n            # Count relations\n            try:\n                relations = list(repo.database.model._relations())\n                click.echo(f\"   \ud83d\udcca Relations: {len(relations)} tables/views\")\n            except Exception as e:\n                click.echo(f\"   \u26a0\ufe0f  Database connection issue: {e}\")\n\n    @hello.command()\n    @click.option('--set', 'set_value', nargs=2, help='Set configuration key=value')\n    @click.option('--get', 'get_key', help='Get configuration value')\n    @click.option('--list', 'list_all', is_flag=True, help='List all configuration')\n    def config(set_value, get_key, list_all):\n        \"\"\"Manage extension configuration\"\"\"\n        # Simple configuration example (in real extension, use proper config storage)\n        import os\n        config_file = os.path.expanduser(\"~/.half_orm_hello_config\")\n\n        if set_value:\n            key, value = set_value\n            # Save configuration (simplified example)\n            with open(config_file, 'a') as f:\n                f.write(f\"{key}={value}\\n\")\n            click.echo(f\"\u2705 Set {key} = {value}\")\n\n        elif get_key:\n            # Read configuration (simplified example)\n            try:\n                with open(config_file, 'r') as f:\n                    for line in f:\n                        if line.startswith(f\"{get_key}=\"):\n                            value = line.split('=', 1)[1].strip()\n                            click.echo(f\"{get_key} = {value}\")\n                            return\n                click.echo(f\"\u274c Key '{get_key}' not found\")\n            except FileNotFoundError:\n                click.echo(f\"\u274c Key '{get_key}' not found (no config file)\")\n\n        elif list_all:\n            try:\n                with open(config_file, 'r') as f:\n                    click.echo(\"\ud83d\udccb Configuration:\")\n                    for line in f:\n                        if '=' in line:\n                            click.echo(f\"   {line.strip()}\")\n            except FileNotFoundError:\n                click.echo(\"\ud83d\udccb No configuration found\")\n        else:\n            click.echo(\"Use --set, --get, or --list to manage configuration\")\n\n    # Register the command group with hop\n    hop_main_group.add_command(hello)\n\n\n# Extension metadata (optional but recommended)\nEXTENSION_INFO = {\n    'name': 'hello',\n    'version': '0.1.0',\n    'description': 'Hello World extension demonstrating halfORM plugin system',\n    'commands': ['hello'],\n    'author': 'halfORM Team',\n    'url': 'https://github.com/collorg/half-orm-hello'\n}\n</code></pre>"},{"location":"ecosystem/development/getting-started/#4-extension-package-initialization","title":"4. Extension Package Initialization","text":"<p>Update <code>half_orm_hello/__init__.py</code>:</p> <pre><code>\"\"\"\nhalf-orm-hello: A Hello World extension for halfORM\n\nThis package demonstrates how to create extensions for the halfORM ecosystem.\n\"\"\"\n\n__version__ = '0.1.0'\n__author__ = 'Your Name'\n\n# Import main functionality if needed\nfrom .hop_extension import EXTENSION_INFO\n\n__all__ = ['EXTENSION_INFO']\n</code></pre>"},{"location":"ecosystem/development/getting-started/#testing-your-extension","title":"Testing Your Extension","text":""},{"location":"ecosystem/development/getting-started/#5-install-in-development-mode","title":"5. Install in Development Mode","text":"<pre><code># Install your extension in development mode\npip install -e .\n\n# Verify hop discovers your extension\nhop --help\n</code></pre> <p>You should see your <code>hello</code> command listed: <pre><code>Commands:\n  hello    Hello World extension commands\n  new      Creates a new hop project named &lt;package_name&gt;.\n  # ... other hop commands\n</code></pre></p>"},{"location":"ecosystem/development/getting-started/#6-test-extension-commands","title":"6. Test Extension Commands","text":"<pre><code># Test the greet command\nhop hello greet\n# Output: Hello, halfORM!\n\nhop hello greet --name \"Developer\" --uppercase\n# Output: HELLO, DEVELOPER!\n\n# Test status (outside a hop project)\nhop hello status\n# Output: \u274c Not in a halfORM project directory\n\n# Create a test project and try again\nhop new test_project --devel\ncd test_project\nhop hello status\n# Output: \u2705 halfORM Project Information...\n\n# Test configuration\nhop hello config --set greeting \"Bonjour\"\nhop hello config --get greeting\n# Output: greeting = Bonjour\n\nhop hello config --list\n# Output: \ud83d\udccb Configuration:\n#            greeting=Bonjour\n</code></pre>"},{"location":"ecosystem/development/getting-started/#understanding-the-plugin-system","title":"Understanding the Plugin System","text":""},{"location":"ecosystem/development/getting-started/#how-discovery-works","title":"How Discovery Works","text":"<p>halfORM_dev uses a simple but effective discovery mechanism:</p> <ol> <li>Package Scanning: Looks for installed packages matching <code>half-orm-*</code></li> <li>Module Import: Tries to import <code>{package_name}.hop_extension</code></li> <li>Function Call: Calls <code>add_commands(hop_main_group)</code> if it exists</li> <li>Integration: Your commands become part of the hop CLI</li> </ol>"},{"location":"ecosystem/development/getting-started/#extension-loading-sequence","title":"Extension Loading Sequence","text":"<pre><code># In half_orm_dev/hop.py (simplified)\ndef discover_extensions():\n    extensions = {}\n    for dist in pkg_resources.working_set:\n        if dist.project_name.startswith('half-orm-') and dist.project_name != 'half-orm-dev':\n            try:\n                module_name = dist.project_name.replace('-', '_')\n                module = importlib.import_module(f'{module_name}.hop_extension')\n                if hasattr(module, 'add_commands'):\n                    extensions[dist.project_name] = module\n            except ImportError:\n                continue\n    return extensions\n\n# Your add_commands() function gets called here\nfor ext_name, ext_module in extensions.items():\n    ext_module.add_commands(main_group)\n</code></pre>"},{"location":"ecosystem/development/getting-started/#access-to-hop-context","title":"Access to hop Context","text":"<p>Your extension can access the current hop project context:</p> <pre><code>from half_orm_dev.repo import Repo\n\ndef some_command():\n    repo = Repo()\n\n    # Check if we're in a hop project\n    if not repo.checked:\n        click.echo(\"Not in a hop project\")\n        return\n\n    # Access project information\n    project_name = repo.name\n    base_directory = repo.base_dir\n\n    # Access database if available\n    if repo.database:\n        model = repo.database.model\n        # Use halfORM functionality\n        relations = list(model._relations())\n</code></pre>"},{"location":"ecosystem/development/getting-started/#best-practices","title":"Best Practices","text":""},{"location":"ecosystem/development/getting-started/#command-organization","title":"Command Organization","text":"<pre><code># \u2705 Good: Organize related commands in groups\n@click.group()\ndef myextension():\n    \"\"\"My extension commands\"\"\"\n    pass\n\n@myextension.group()\ndef database():\n    \"\"\"Database-related commands\"\"\"\n    pass\n\n@myextension.group()  \ndef api():\n    \"\"\"API-related commands\"\"\"\n    pass\n\n# Results in: hop myextension database init, hop myextension api generate, etc.\n</code></pre>"},{"location":"ecosystem/development/getting-started/#error-handling","title":"Error Handling","text":"<pre><code># \u2705 Good: Handle errors gracefully\n@hello.command()\ndef risky_operation():\n    try:\n        repo = Repo()\n        if not repo.checked:\n            click.echo(\"\u274c Not in a halfORM project\", err=True)\n            raise click.Abort()\n\n        # Your logic here\n        result = some_operation()\n        click.echo(f\"\u2705 Success: {result}\")\n\n    except SomeSpecificError as e:\n        click.echo(f\"\u274c Operation failed: {e}\", err=True)\n        raise click.Abort()\n    except Exception as e:\n        click.echo(f\"\u274c Unexpected error: {e}\", err=True)\n        click.echo(\"Please report this issue\", err=True)\n        raise click.Abort()\n</code></pre>"},{"location":"ecosystem/development/getting-started/#configuration-management","title":"Configuration Management","text":"<pre><code># \u2705 Good: Use proper configuration storage\nimport os\nimport json\nfrom pathlib import Path\n\ndef get_config_path():\n    \"\"\"Get extension configuration file path\"\"\"\n    config_dir = Path.home() / '.half_orm' / 'extensions' / 'hello'\n    config_dir.mkdir(parents=True, exist_ok=True)\n    return config_dir / 'config.json'\n\ndef load_config():\n    \"\"\"Load extension configuration\"\"\"\n    config_path = get_config_path()\n    if config_path.exists():\n        with open(config_path) as f:\n            return json.load(f)\n    return {}\n\ndef save_config(config):\n    \"\"\"Save extension configuration\"\"\"\n    config_path = get_config_path()\n    with open(config_path, 'w') as f:\n        json.dump(config, f, indent=2)\n</code></pre>"},{"location":"ecosystem/development/getting-started/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've created your first halfORM extension. Here's what to explore next:</p>"},{"location":"ecosystem/development/getting-started/#1-enhanced-functionality","title":"1. Enhanced Functionality","text":"<ul> <li>Plugin API Reference - Learn advanced integration patterns</li> <li>Testing Guide - Add comprehensive tests to your extension</li> <li>Database Integration - Use halfORM's full power in your extension</li> </ul>"},{"location":"ecosystem/development/getting-started/#2-real-world-examples","title":"2. Real-World Examples","text":"<p>Study existing extensions: - half-orm-litestar-api - Complex API generation - half-orm-instant-api - Database introspection and configuration</p>"},{"location":"ecosystem/development/getting-started/#3-distribution","title":"3. Distribution","text":"<ul> <li>Publishing Guide - Share your extension with the community</li> <li>GitHub Actions - Set up CI/CD for your extension</li> <li>Documentation - Create comprehensive user guides</li> </ul>"},{"location":"ecosystem/development/getting-started/#4-advanced-topics","title":"4. Advanced Topics","text":"<ul> <li>Hooks and Events - Integrate with hop's lifecycle events</li> <li>Configuration Management - Advanced settings and user preferences  </li> <li>Performance - Optimize for large projects</li> <li>Error Recovery - Handle edge cases gracefully</li> </ul>"},{"location":"ecosystem/development/getting-started/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"ecosystem/development/getting-started/#extension-not-discovered","title":"Extension Not Discovered","text":"<p>Problem: <code>hop --help</code> doesn't show your extension commands</p> <p>Solutions: 1. Check package name starts with <code>half-orm-</code> 2. Verify <code>hop_extension.py</code> exists and has <code>add_commands()</code> function 3. Ensure extension is installed: <code>pip list | grep half-orm-hello</code> 4. Check for import errors: <code>python -c \"import half_orm_hello.hop_extension\"</code></p>"},{"location":"ecosystem/development/getting-started/#import-errors","title":"Import Errors","text":"<p>Problem: Extension fails to load with import errors</p> <p>Solutions: 1. Check dependencies in <code>setup.py</code> 2. Verify module paths are correct 3. Test imports manually: <code>python -c \"from half_orm_hello import hop_extension\"</code></p>"},{"location":"ecosystem/development/getting-started/#command-conflicts","title":"Command Conflicts","text":"<p>Problem: Command names conflict with other extensions</p> <p>Solutions: 1. Use descriptive, unique command group names 2. Namespace your commands: <code>hop myextension subcommand</code> 3. Check existing extensions for naming conflicts</p>"},{"location":"ecosystem/development/getting-started/#resources","title":"Resources","text":"<ul> <li>halfORM Fundamentals - Core ORM concepts</li> <li>Click Documentation - Command-line interface framework</li> <li>Plugin API Reference - Advanced integration patterns</li> <li>Extension Examples - Real-world extension code</li> </ul>"},{"location":"ecosystem/development/getting-started/#community","title":"Community","text":"<ul> <li>Questions: GitHub Discussions</li> <li>Bug Reports: GitHub Issues</li> <li>Extension Ideas: Community Extensions</li> </ul> <p>Ready to build something more complex? Continue to the Plugin API Reference for advanced integration patterns.</p>"},{"location":"examples/","title":"Examples","text":"<p>Section Status</p> <p>Examples section needs real-world applications demonstrating halfORM usage.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":"<p>[List of all examples with descriptions]</p>"},{"location":"examples/#example-database","title":"Example Database","text":"<p>[Common database schema used in examples]</p>"},{"location":"examples/blog/","title":"Simple Blog","text":"<p>Example Status</p> <p>This example needs complete, runnable code with detailed explanations.</p>"},{"location":"examples/blog/#overview","title":"Overview","text":"<p>[What this example demonstrates]</p>"},{"location":"examples/blog/#code","title":"Code","text":"<p>[Complete, runnable example code]</p>"},{"location":"examples/blog/#explanation","title":"Explanation","text":"<p>[Step-by-step explanation of the code]</p>"},{"location":"examples/ecommerce/","title":"E-commerce","text":"<p>Example Status</p> <p>This example needs complete, runnable code with detailed explanations.</p>"},{"location":"examples/ecommerce/#overview","title":"Overview","text":"<p>[What this example demonstrates]</p>"},{"location":"examples/ecommerce/#code","title":"Code","text":"<p>[Complete, runnable example code]</p>"},{"location":"examples/ecommerce/#explanation","title":"Explanation","text":"<p>[Step-by-step explanation of the code]</p>"},{"location":"examples/gitlab/","title":"Database Exploration with GitLab","text":"<p>Ever wondered what complex real-world databases look like? Let's explore GitLab's schema with halfORM - safely, without touching any data!</p> <p>\ud83d\udea8 IMPORTANT: This example uses a development GitLab database.  NEVER run schema modifications on production databases!</p> <p>The <code>ALTER TABLE</code> command shown is for educational purposes only.</p>"},{"location":"examples/gitlab/#what-this-example-demonstrates","title":"What This Example Demonstrates","text":"<ul> <li>Schema exploration with halfORM CLI</li> <li>Real-world complexity handling (888 relations)</li> <li>Foreign key analysis and relationship discovery</li> <li>Database inspection without touching production data</li> <li>Database patching (not in production, this is just an example)</li> <li>Custom tooling with halfORM (fkeys_between.py)</li> </ul>"},{"location":"examples/gitlab/#initial-discovery-the-scale","title":"Initial Discovery: The Scale","text":"<p>GitLab is a perfect example of a complex application. Let's explore its database model.</p> <p>Note</p> <p>To realise this exercise, we have restored a snapshot of a Gitlab database locally.</p> <pre><code>$ python -m half_orm gitlab\n[halfORM] version 0.15.1\n\ud83d\udccb Available relations for gitlab:\np \"public\".\"ai_code_suggestion_events\"                                     \u2192 No description available\np \"public\".\"ai_duo_chat_events\"                                            \u2192 No description available\n[...]\n$ python -m half_orm gitlab | grep -E '^r ' | wc -l\n812 # relations\n$ python -m half_orm gitlab | grep -E '^v ' | wc -l\n14  # views\n$ python -m half_orm gitlab | grep -E '^p ' | wc -l\n53  # partitioned tables\n</code></pre> <p>That's quite a large model to work with! Let's see which relations have <code>users</code> in their name:</p> <pre><code>$ python -m half_orm gitlab | grep users\nr \"public\".\"approval_group_rules_users\"                                    \u2192 No description available\nr \"public\".\"approval_merge_request_rules_users\"                            \u2192 No description available\nr \"public\".\"approval_project_rules_users\"                                  \u2192 No description available\nr \"public\".\"banned_users\"                                                  \u2192 No description available\nr \"public\".\"import_source_users\"                                           \u2192 No description available\nr \"public\".\"merge_request_diff_commit_users\"                               \u2192 No description available\nr \"public\".\"merge_requests_approval_rules_approver_users\"                  \u2192 No description available\nr \"public\".\"metrics_users_starred_dashboards\"                              \u2192 No description available\nr \"public\".\"namespace_import_users\"                                         \u2192 No description available\nr \"public\".\"organization_users\"                                            \u2192 No description available\nr \"public\".\"pipl_users\"                                                    \u2192 No description available\nr \"public\".\"user_follow_users\"                                             \u2192 No description available\nr \"public\".\"users\"                                                         \u2192 No description available\nr \"public\".\"users_ops_dashboard_projects\"                                  \u2192 No description available\nr \"public\".\"users_security_dashboard_projects\"                             \u2192 No description available\nr \"public\".\"users_star_projects\"                                           \u2192 No description available\nr \"public\".\"users_statistics\"                                              \u2192 No description available\n</code></pre>"},{"location":"examples/gitlab/#deep-dive-users-table-structure","title":"Deep Dive: Users Table Structure","text":"<p>Let's examine the main <code>users</code> table:</p> <pre><code>$ python -m half_orm gitlab public.users | less\nDATABASE: gitlab\nSCHEMA: public\nTABLE: users\n\nFIELDS:\n- id:                                           (int4) NOT NULL\n- email:                                        (varchar) NOT NULL\n- encrypted_password:                           (varchar) NOT NULL\n- reset_password_token:                         (varchar)\n- reset_password_sent_at:                       (timestamp)\n- remember_created_at:                          (timestamp)\n- sign_in_count:                                (int4)\n- current_sign_in_at:                           (timestamp)\n- last_sign_in_at:                              (timestamp)\n- current_sign_in_ip:                           (varchar)\n- last_sign_in_ip:                              (varchar)\n- created_at:                                   (timestamp)\n- updated_at:                                   (timestamp)\n- name:                                         (varchar)\n- admin:                                        (bool) NOT NULL\n[...]\n</code></pre> <p>This is quite a large table: 78 columns, 170 relations pointing to it. That means we have 170 entries like these in the Fkeys dictionary:</p> <pre><code>[...]\nFkeys = {\n    '': '_reverse_fkey_gitlab_public_abuse_events_user_id',\n    '': '_reverse_fkey_gitlab_public_abuse_report_events_user_id',\n    '': '_reverse_fkey_gitlab_public_abuse_report_notes_author_id',\n    [...]\n}\n</code></pre>"},{"location":"examples/gitlab/#first-halform-script","title":"First halfORM Script","text":"<p>We have enough information to start exploring. Let's look at the administrators:</p> <pre><code>from half_orm.model import Model\n\ngitlab = Model('gitlab')\nUsers = gitlab.get_relation_class('public.users')\n# List the admin names\nfor admin in Users(admin=True).ho_select('name'):\n    print(admin['name'])\n</code></pre>"},{"location":"examples/gitlab/#finding-relationships","title":"Finding Relationships","text":"<p>Now, is there a <code>projects</code> table?</p> <pre><code>$ python -m half_orm gitlab | grep projects\np \"public\".\"projects_visits\"                                               \u2192 No description available\nr \"public\".\"ci_runner_projects\"                                            \u2192 No description available\nr \"public\".\"ci_sources_projects\"                                           \u2192 No description available\nr \"public\".\"ci_subscriptions_projects\"                                     \u2192 No description available\nr \"public\".\"cluster_projects\"                                              \u2192 No description available\nr \"public\".\"deploy_keys_projects\"                                          \u2192 No description available\nr \"public\".\"elasticsearch_indexed_projects\"                                \u2192 No description available\nr \"public\".\"lfs_objects_projects\"                                          \u2192 No description available\nr \"public\".\"merge_requests_approval_rules_projects\"                        \u2192 No description available\nr \"public\".\"projects\"                                                      \u2192 No description available\nr \"public\".\"projects_branch_rules_merge_request_approval_settings\"         \u2192 No description available\nr \"public\".\"projects_branch_rules_squash_options\"                          \u2192 No description available\nr \"public\".\"projects_sync_events\"                                          \u2192 No description available\nr \"public\".\"projects_with_pipeline_variables\"                              \u2192 No description available\nr \"public\".\"trending_projects\"                                             \u2192 No description available\nr \"public\".\"users_ops_dashboard_projects\"                                  \u2192 No description available\nr \"public\".\"users_security_dashboard_projects\"                             \u2192 No description available\nr \"public\".\"users_star_projects\"                                           \u2192 No description available\n</code></pre> <p>Great! We have a <code>\"public\".\"projects\"</code> table.</p>"},{"location":"examples/gitlab/#building-analysis-tools","title":"Building Analysis Tools","text":"<p>We'd like to know if there are any foreign keys between the <code>public.users</code> table and the <code>public.projects</code> table. Let's write a script for that:</p> fkeys_between.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nAnalyze foreign key relationships between two relations.\nUsage: fkeys_between.py &lt;database&gt; &lt;relation1&gt; &lt;relation2&gt;\n\"\"\"\n\nimport sys\nfrom half_orm.model import Model\n\ndef find_relationships(relation1, relation2):\n    \"\"\"Find all foreign key relationships between two relations\"\"\"\n    direct = []\n    reverse = []\n\n    # Direct: relation1 -&gt; relation2\n    for fk_name, fk_rel in relation1()._ho_fkeys.items():\n        if fk_rel()._qrn == relation2._qrn:\n            direct.append((fk_name, fk_rel))\n\n    # Reverse: relation2 -&gt; relation1  \n    for fk_name, fk_rel in relation2()._ho_fkeys.items():\n        if fk_rel()._qrn == relation1._qrn:\n            reverse.append((fk_name, fk_rel))\n\n    return direct, reverse\n\ndef main():\n    if len(sys.argv) != 4:\n        print(\"Usage: fkeys_between.py &lt;database&gt; &lt;relation1&gt; &lt;relation2&gt;\")\n        print(\"Example: fkeys_between.py gitlab public.users public.projects\")\n        sys.exit(1)\n\n    dbname, rel1_name, rel2_name = sys.argv[1:]\n\n    try:\n        database = Model(dbname)\n        relation1 = database.get_relation_class(rel1_name)\n        relation2 = database.get_relation_class(rel2_name)\n\n        direct, reverse = find_relationships(relation1, relation2)\n\n        print(f\"=== RELATIONSHIPS BETWEEN {rel1_name} AND {rel2_name} ===\")\n        print(f\"\\nDirect ({rel1_name} \u2192 {rel2_name}):\")\n        if direct:\n            for fk_name, fk_rel in direct:\n                print(f\"  \u2022 {fk_name}\")\n        else:\n            print(\"  (none)\")\n\n        print(f\"\\nReverse ({rel2_name} \u2192 {rel1_name}):\")\n        if reverse:\n            for fk_name, fk_rel in reverse:\n                print(f\"  \u2022 {fk_name}\")\n        else:\n            print(\"  (none)\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Let's run our analysis script:</p> <pre><code>$ examples/fkeys_between.py gitlab public.users public.projects\n=== RELATIONSHIPS BETWEEN public.users AND public.projects ===\n\nDirect (public.users \u2192 public.projects):\n  \u2022 _reverse_fkey_gitlab_public_projects_marked_for_deletion_by_user_id\n\nReverse (public.projects \u2192 public.users):\n  \u2022 fk_0a31cca0b8\n</code></pre>"},{"location":"examples/gitlab/#discovering-gitlabs-innovative-schema-design","title":"Discovering GitLab's Innovative Schema Design","text":"<p>Interesting! There's only one foreign key from <code>public.projects</code> to <code>public.users</code>: <code>fk_0a31cca0b8</code>. This means there's no foreign key constraint on the <code>creator_id</code> column in the <code>public.projects</code> relation. At first glance, this seems like a schema issue. In a traditional database, we might add:</p> <pre><code>ALTER TABLE projects\n    ADD CONSTRAINT creator_fk\n    FOREIGN KEY (creator_id)\n    REFERENCES users(id);\n</code></pre>"},{"location":"examples/gitlab/#the-solution-gitlabs-loose-foreign-keys-pattern","title":"The Solution: GitLab's Loose Foreign Keys Pattern","text":"<p>But wait! This isn't a bug\u2014it's a brilliant feature! \ud83d\ude80</p> <p>The mystery of the missing FOREIGN KEY</p> <p>This is not an issue. This is a feature! GitLab has a very clever way to store the deleted keys in the table <code>loose_foreign_keys_deleted_records</code>:</p> <pre><code>-- The loose foreign keys deletion tracking table\nCREATE TABLE public.loose_foreign_keys_deleted_records (\n    id bigint NOT NULL,\n    partition bigint DEFAULT 197 NOT NULL,\n    primary_key_value bigint NOT NULL,           -- ID of deleted record\n    status smallint DEFAULT 1 NOT NULL,          -- Processing status  \n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    fully_qualified_table_name text NOT NULL,   -- Which table was affected\n    consume_after timestamp with time zone DEFAULT now(),\n    cleanup_attempts smallint DEFAULT 0,        -- Retry counter\n    CONSTRAINT check_1a541f3235 CHECK ((char_length(fully_qualified_table_name) &lt;= 150))\n) PARTITION BY LIST (partition);\n\n-- Trigger function to log deletions\nCREATE FUNCTION public.insert_into_loose_foreign_keys_deleted_records() \nRETURNS trigger LANGUAGE plpgsql AS $$\nBEGIN\n    -- Log every deleted FQTN, ID for later cleanup or undelete\n    INSERT INTO loose_foreign_keys_deleted_records\n        (fully_qualified_table_name, primary_key_value)\n    SELECT TG_TABLE_SCHEMA || '.' || TG_TABLE_NAME, old_table.id \n    FROM old_table;\n\n    RETURN NULL; -- Trigger is for logging only\nEND $$;\n\n-- Apply trigger to users table\nCREATE TRIGGER users_loose_fk_trigger\n    AFTER DELETE ON public.users\n    REFERENCING OLD TABLE AS old_table  -- PostgreSQL 10+ feature\n    FOR EACH STATEMENT\n    EXECUTE FUNCTION public.insert_into_loose_foreign_keys_deleted_records();\n</code></pre> <p>This mechanism allows them to delay the actual deletion of a row in any table for which this function is triggered. It provides several key benefits:</p> <p>\ud83d\udd04 Grace Period for Recovery: Administrators can restore accidentally deleted users and their associated data within a defined time window.</p> <p>\u26a1 Performance Optimization: Deletions don't require checking foreign key constraints across hundreds of tables, making operations faster.</p> <p>\ud83d\udee1\ufe0f Data Safety: Critical data (commits, issues, merge requests) remains accessible even if a user account is deleted, preventing data loss.</p> <p>\ud83e\uddf9 Deferred Cleanup: A background job processes the cleanup queue, distributing the workload over time instead of blocking the deletion operation.</p>"},{"location":"examples/gitlab/#exploring-this-pattern-with-halform","title":"Exploring This Pattern with halfORM","text":"<pre><code>from half_orm.model import Model\n\nmodel = Model('gitlab')\n# Check the loose foreign keys table\nloose_fks = model.get_relation_class(\"public.loose_foreign_keys_deleted_records\")()\nprint(f\"Pending deletions to process: {loose_fks.ho_count()}\")\n\n# See what tables are affected\nfor record in loose_fks.ho_limit(5):\n    print(f\"Deleted from {record['fully_qualified_table_name']}: ID {record['primary_key_value']}\")\n</code></pre> <pre><code>$ python check_loose_fkeys.py \nPending deletions to process: 2\nDeleted from public.ci_runners: ID 186\nDeleted from public.ci_runners: ID 185\n</code></pre>"},{"location":"examples/gitlab/#what-we-discovered","title":"What We Discovered","text":"<p>Through this exploration, we found:</p> <ul> <li>888 relations in GitLab's database - a complex real-world schema</li> <li>78 columns in the users table with 170 foreign key relationships</li> <li>Missing constraints as a feature: <code>projects.creator_id</code> deliberately has no foreign key constraint!</li> <li>Analysis tools: halfORM makes it easy to build custom database analysis scripts</li> </ul> <p>This demonstrates how halfORM can help you: - \ud83d\udd0d Explore unfamiliar databases quickly - \ud83d\udd17 Analyze relationships between tables - \ud83d\udee0\ufe0f Build custom tools for database inspection - \ud83d\udca1 Discover innovative design patterns (like loose foreign keys)</p>"},{"location":"examples/gitlab/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>\"Missing\" constraints can be intentional design decisions - GitLab's loose foreign keys provide operational flexibility</li> <li>High-scale applications often break traditional rules for performance and recovery reasons  </li> <li>halfORM's introspection helps understand real-world patterns - even unconventional ones</li> <li>Database design is about trade-offs - GitLab chose operational safety and performance over strict consistency</li> <li>Application-level integrity can replace database-level constraints when the benefits justify the complexity</li> <li>Recovery mechanisms are crucial for production systems where accidental deletions could have catastrophic consequences</li> </ol> <p>This pattern shows why exploring real production databases is so valuable for learning! It reveals how theory meets practice in high-scale, mission-critical applications. \ud83c\udf93</p>"},{"location":"examples/gitlab/#next-steps","title":"Next Steps","text":"<p>Try this approach with your own database:</p> <pre><code># Explore your database\npython -m half_orm your_database\n\n# Find tables with 'user' in the name  \npython -m half_orm your_database | grep user\n\n# Inspect a specific table\npython -m half_orm your_database schema.table_name\n\n# Look for loose foreign key patterns\npython -m half_orm your_database | grep loose\n</code></pre>"},{"location":"examples/web-apps/","title":"Web Applications","text":"<p>Example Status</p> <p>This example needs complete, runnable code with detailed explanations.</p>"},{"location":"examples/web-apps/#overview","title":"Overview","text":"<p>[What this example demonstrates]</p>"},{"location":"examples/web-apps/#code","title":"Code","text":"<p>[Complete, runnable example code]</p>"},{"location":"examples/web-apps/#explanation","title":"Explanation","text":"<p>[Step-by-step explanation of the code]</p>"},{"location":"examples/instant-rest-api/instant-rest-api/","title":"Instant REST API with halfORM","text":"<p>Think of the implications of these few lines of Python: <pre><code>import sys\nfrom half_orm.model import Model\ndbname = sys.argv[1]\nschemaname = sys.argv[2] \nrelationname = sys.argv[3]\nif __name__ == '__main__':\n    Model(dbname).get_relation_class(f\"{schemaname}.{relationname}\")\n</code></pre></p> <p>We could use them to build an efficient universal REST API using FastAPI and halfORM. Let's begin!</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#the-concept","title":"The Concept","text":"<p>halfORM's database-first approach makes it trivial to create APIs. Since halfORM automatically discovers your database structure and generates relation classes on-the-fly, you can build a universal REST API that works with any PostgreSQL database.</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#from-concept-to-production-ready-api","title":"From Concept to Production-Ready API","text":"<p>Let's see how the simple concept evolves into a secure, production-ready solution:</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#1-the-core-concept-3-lines","title":"1. The Core Concept (3 lines)","text":"<pre><code># The essence: dynamic relation class creation\nfrom half_orm.model import Model\nrelation_class = Model(db_name).get_relation_class(f\"{schema}.{table}\")\n# Now you have a fully functional ORM class!\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#2-add-security-configuration-required","title":"2. Add Security (Configuration Required)","text":"<pre><code># Security first: explicit configuration required\nclass SecureAPI:\n    def __init__(self, db_name, config_file):\n        if not Path(config_file).exists():\n            raise ValueError(\"Configuration file required - no accidental exposure\")\n        self.config = self._load_config(config_file)\n        self.model = Model(db_name)\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#3-read-only-by-design","title":"3. Read-Only by Design","text":"<pre><code># Only safe operations exposed\n@app.get(\"/{schema}/{relation}\")\nasync def list_records(...):  # \u2705 Safe read operation\n\n@app.post(\"/{schema}/{relation}\")  \nasync def create_record_not_allowed(...):  # \u274c Disabled for security\n    raise HTTPException(405, \"POST operations not allowed\")\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#security-model","title":"Security Model","text":""},{"location":"examples/instant-rest-api/instant-rest-api/#security-first-design","title":"\ud83d\udd12 Security-First Design","text":"<ul> <li>No configuration = No access - API refuses to expose any data without explicit configuration</li> <li>Read-only by design - Only GET endpoints. No POST, PUT, or DELETE operations</li> <li>Explicit column control - You must list exactly which columns to expose</li> <li>No default exposures - Nothing is exposed unless explicitly configured</li> </ul> <p>This approach makes the API safe for production environments where you need to expose specific database views to external consumers.</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#quick-start","title":"Quick Start","text":""},{"location":"examples/instant-rest-api/instant-rest-api/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>pip install half_orm fastapi uvicorn pyyaml\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#2-generate-configuration-by-database-introspection","title":"2. Generate Configuration by Database Introspection","text":"<p>The key innovation of this approach is automatic configuration generation. Instead of manually writing YAML, let halfORM discover your entire database schema:</p> <pre><code># Introspect your database and generate complete configuration\npython instant_api.py your_database --create-config\n</code></pre> <p>This creates a configuration file with every table and column in your database, all safely commented out:</p> <pre><code># Configuration for your_database database\n# Generated by introspection - uncomment lines to expose data\n\n# blog:\n#   author:\n#     - id\n#     - first_name\n#     - last_name\n#     - email\n#     - bio\n#     - created_at\n#   post:\n#     - id\n#     - title\n#     - content\n#     - author_id\n#     - published_at\n#     - is_published\n</code></pre> <p>Real-world example: <pre><code># GitLab database introspection\npython instant_api.py gitlab --create-config\n# Result: 879 relations, 10,436 lines of configuration generated!\n</code></pre></p>"},{"location":"examples/instant-rest-api/instant-rest-api/#3-configure-what-to-expose-uncomment-lines","title":"3. Configure What to Expose (Uncomment Lines)","text":"<p>Edit the generated file and uncomment only what you want to expose:</p> <pre><code># Uncomment to expose specific data\nblog:\n  author:\n    - id\n    - first_name\n    - last_name\n    - email\n    # - password_hash  # Keep sensitive data commented!\n  post:\n    - id\n    - title\n    - excerpt\n    - published_at\n    - view_count\n    # - author_id      # Hide internal references\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#4-start-your-secure-api","title":"4. Start Your Secure API","text":"<pre><code>python instant_api.py your_database\n</code></pre> <p>Output: <pre><code>\ud83d\ude80 Starting Universal REST API for database: your_database\n\ud83d\udccb Config directory: /etc/half_orm/instant_api\n\ud83d\udccb Looking for: your_database.yml\n\ud83c\udf10 API will be available at: http://127.0.0.1:8000\n\ud83d\udcd6 API documentation at: http://127.0.0.1:8000/docs\n\u2705 Read-only API starting...\n</code></pre></p>"},{"location":"examples/instant-rest-api/instant-rest-api/#usage-examples","title":"Usage Examples","text":""},{"location":"examples/instant-rest-api/instant-rest-api/#explore-available-data","title":"Explore Available Data","text":"<pre><code>curl http://localhost:8000/\n</code></pre> <p>Response: <pre><code>{\n  \"database\": \"blog_tutorial\",\n  \"exposed_relations\": [\"blog.author\", \"blog.post\"],\n  \"available_endpoints\": [\n    \"GET /{schema}/{relation} - List records (read-only)\",\n    \"GET /{schema}/{relation}/{id} - Get one record (read-only)\"\n  ],\n  \"note\": \"Only read operations are available for security reasons\"\n}\n</code></pre></p>"},{"location":"examples/instant-rest-api/instant-rest-api/#list-records-with-filtering","title":"List Records with Filtering","text":"<pre><code># Basic listing\ncurl http://localhost:8000/blog/author\n\n# Advanced filtering with halfORM operators\ncurl \"http://localhost:8000/blog/author?first_name=Alice\"\ncurl \"http://localhost:8000/blog/post?view_count__gt=50&amp;is_published=true\"\ncurl \"http://localhost:8000/blog/author?email__like=gmail\"\n\n# Pagination and ordering\ncurl \"http://localhost:8000/blog/post?limit=5&amp;offset=10&amp;order_by=published_at DESC\"\n</code></pre> <p>Supported filter operators: - <code>field=value</code> - Exact match - <code>field__gt=value</code> - Greater than - <code>field__gte=value</code> - Greater than or equal - <code>field__lt=value</code> - Less than - <code>field__lte=value</code> - Less than or equal - <code>field__ne=value</code> - Not equal - <code>field__like=value</code> - Pattern matching (case-insensitive) - <code>field__isnull=true/false</code> - NULL/NOT NULL checks</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#get-single-record","title":"Get Single Record","text":"<pre><code>curl http://localhost:8000/blog/author/1\n</code></pre> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"first_name\": \"Alice\",\n  \"last_name\": \"Johnson\",\n  \"email\": \"alice@example.com\"\n}\n</code></pre></p>"},{"location":"examples/instant-rest-api/instant-rest-api/#write-operations-are-blocked","title":"Write Operations Are Blocked","text":"<pre><code># All write operations return HTTP 405\ncurl -X POST http://localhost:8000/blog/author -d '{\"name\":\"Test\"}'\n# \u2192 {\"detail\": \"POST operations are not allowed. This is a read-only API for security reasons.\"}\n\ncurl -X PUT http://localhost:8000/blog/author/1 -d '{\"email\":\"new@email.com\"}'\n# \u2192 {\"detail\": \"PUT operations are not allowed. This is a read-only API for security reasons.\"}\n\ncurl -X DELETE http://localhost:8000/blog/author/1\n# \u2192 {\"detail\": \"DELETE operations are not allowed. This is a read-only API for security reasons.\"}\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#real-world-use-cases","title":"Real-World Use Cases","text":""},{"location":"examples/instant-rest-api/instant-rest-api/#1-exploring-complex-existing-databases","title":"1. Exploring Complex Existing Databases","text":"<p>Perfect for large, existing databases where you don't know the full schema:</p> <pre><code># Discover what's in that legacy database\npython instant_api.py legacy_erp --create-config\n# Result: Complete overview of hundreds of tables\n\n# Expose only safe, read-only data\nvim /etc/half_orm/instant_api/legacy_erp.yml\n# Uncomment only public-facing tables\n\npython instant_api.py legacy_erp --port 8001\n# Safe API for legacy data exploration\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#2-gitlab-database-analysis","title":"2. GitLab Database Analysis","text":"<p>Real example with GitLab's complex schema:</p> <pre><code>$ python instant_api.py gitlab --create-config\n# \u2705 879 relations discovered automatically\n# \u2705 10,436 lines of configuration generated  \n# \u2705 Every table and column catalogued\n\n# Edit to expose only what you need:\n$ vi gitlab.yml\n$ grep -v '^#' gitlab.yml \n\npublic:\n  members:\n    - source_id\n    - source_type\n    - user_id\n  projects:\n    - id\n    - name\n    - path\n    - description\n    - creator_id\n  users:\n    - id\n    - name\n    - admin\n\n# Run the service\n$ python install_api.py gitlab\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#api-features","title":"API Features","text":""},{"location":"examples/instant-rest-api/instant-rest-api/#automatic-documentation","title":"Automatic Documentation","text":"<p>Visit <code>http://localhost:8000/docs</code> for interactive OpenAPI documentation with: - Description of all available routes - Try it out functionality for all endpoints - Request/response schemas - Filter parameter documentation - Example requests and responses</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#error-handling","title":"Error Handling","text":"<p>Clear, helpful error messages:</p> <pre><code>curl http://localhost:8000/blog/nonexistent\n# \u2192 {\"detail\": \"Relation blog.nonexistent not exposed\"}\n\ncurl http://localhost:8000/blog/author/999\n# \u2192 {\"detail\": \"Record 999 not found\"}\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#performance-features","title":"Performance Features","text":"<ul> <li>Efficient queries using halfORM's lazy evaluation</li> <li>Pagination to handle large datasets gracefully</li> <li>Column selection to minimize data transfer</li> <li>Database connection pooling support</li> </ul>"},{"location":"examples/instant-rest-api/instant-rest-api/#why-this-approach-works","title":"Why This Approach Works","text":""},{"location":"examples/instant-rest-api/instant-rest-api/#halforms-introspection-power","title":"halfORM's Introspection Power","text":"<ol> <li>Database-First: Your PostgreSQL schema drives everything</li> <li>Complete Discovery: Uses halfORM's <code>model._relations()</code> and <code>relation._ho_fields</code></li> <li>Zero Errors: All table and column names are exactly correct</li> <li>No Guesswork: See your entire database structure instantly</li> </ol>"},{"location":"examples/instant-rest-api/instant-rest-api/#security-model_1","title":"Security Model","text":"<ol> <li>Everything Hidden by Default: All 10,000+ lines start commented</li> <li>Explicit Exposure: You must actively uncomment to expose data  </li> <li>Granular Control: Column-level precision - expose only what you need</li> <li>Audit Trail: Configuration file shows exactly what's exposed</li> <li>No Accidents: Impossible to accidentally expose sensitive data</li> </ol>"},{"location":"examples/instant-rest-api/instant-rest-api/#practical-benefits","title":"Practical Benefits","text":"<ol> <li>Works with Any PostgreSQL Database: Legacy, modern, complex - doesn't matter</li> <li>Handles Scale: GitLab's 879 relations processed effortlessly  </li> <li>Maintenance Friendly: Regenerate config when schema changes</li> <li>Developer Friendly: See everything, choose what to expose</li> <li>Production Safe: Battle-tested security-first approach</li> </ol>"},{"location":"examples/instant-rest-api/instant-rest-api/#example-e-commerce-database","title":"Example: E-commerce Database","text":"<p>Imagine you have an existing e-commerce database with 50+ tables:</p> <pre><code>-- Complex existing database\nCREATE SCHEMA inventory;\nCREATE SCHEMA orders;\nCREATE SCHEMA users;\nCREATE SCHEMA analytics;\n\n-- 50+ tables with sensitive data\nCREATE TABLE users.customers (id, email, password_hash, credit_card, ...);\nCREATE TABLE orders.transactions (id, amount, payment_details, ...);\nCREATE TABLE inventory.products (id, name, cost, profit_margin, supplier_info, ...);\n</code></pre> <p>Traditional approach: Write hundreds of lines of endpoint code, worry about security</p> <p>halfORM approach:</p> <pre><code># 1. Create secure configuration (expose only public data)\necho \"\ninventory:\n  products:\n    - id\n    - name\n    - category\n    - public_price\nanalytics:\n  daily_stats:\n    - date\n    - total_sales\n    - order_count\n\" &gt; api_config.yml\n\n# 2. Start secure API\npython instant_api.py ecommerce_db\n</code></pre> <p>Result: Secure read-only API exposing only the public product catalog and aggregate statistics from 50+ tables!</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"examples/instant-rest-api/instant-rest-api/#environment-specific-configs","title":"Environment-Specific Configs","text":"<pre><code># production_api_config.yml - Minimal exposure\npublic:\n  products:\n    - id\n    - name\n    - price\n\n# development_api_config.yml - More detailed for testing  \npublic:\n  products:\n    - id\n    - name\n    - price\n    - category\n    - description\n    - created_at\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#schema-level-security","title":"Schema-Level Security","text":"<pre><code># Only specific schemas exposed\npartner_data:    # Partner-specific schema\n  shared_products:\n    - id\n    - name\n    - availability\n\n# Internal schemas (users, orders, etc.) not listed = not accessible\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#production-considerations","title":"Production Considerations","text":"<p>This example demonstrates the core concept of instant API generation with halfORM. For production use, you'll want to consider:</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#basic-production-setup","title":"Basic Production Setup","text":"<pre><code># Environment variables for production\nexport INSTANT_API_CONF_DIR=/etc/instant-api\nexport INSTANT_API_PORT=8001\nexport INSTANT_API_HOST=127.0.0.1\n\n# Run with custom port\npython instant_api.py production_db --port 8001 --host 127.0.0.1\n</code></pre>"},{"location":"examples/instant-rest-api/instant-rest-api/#community-contributions-welcome","title":"Community Contributions Welcome! \ud83e\udd1d","text":"<p>This instant API example shows halfORM's potential for rapid API development. The community could help evolve this into production-ready solutions:</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#contribution-ideas","title":"\ud83d\ude80 Contribution Ideas","text":"<p>halfORM-API-Server - A dedicated project could include:</p> <ul> <li>Authentication &amp; Authorization - JWT, OAuth2, API keys</li> <li>Rate limiting - Prevent abuse and ensure fair usage  </li> <li>Caching layer - Redis integration for high-performance APIs</li> <li>API versioning - Support multiple API versions</li> <li>Advanced filtering - GraphQL-style query capabilities</li> <li>Batch operations - Bulk insert/update endpoints</li> <li>Real-time features - WebSocket support for live data</li> <li>Monitoring &amp; metrics - Prometheus/Grafana integration</li> <li>Auto-documentation - Enhanced OpenAPI specs with examples</li> <li>Testing framework - Automated API testing tools</li> </ul> <p>halfORM-CLI-Tools - Command-line utilities:</p> <ul> <li>Database introspection - Generate API configs from existing schemas</li> <li>Performance analysis - Query optimization suggestions</li> <li>Migration helpers - Sync API configs with schema changes</li> <li>Deployment tools - Docker, Kubernetes, systemd templates</li> </ul> <p>halfORM-Admin - Web-based administration:</p> <ul> <li>Visual configuration - GUI for creating API configurations</li> <li>Real-time monitoring - Dashboard for API health and usage</li> <li>User management - Role-based access control</li> <li>API analytics - Usage patterns and performance metrics</li> </ul>"},{"location":"examples/instant-rest-api/instant-rest-api/#how-to-contribute","title":"\ud83d\udee0\ufe0f How to Contribute","text":"<ol> <li>Fork the concept - Create your own enhanced version</li> <li>Share improvements - Submit PRs for core functionality  </li> <li>Create integrations - Build plugins for popular frameworks</li> <li>Write documentation - Help others adopt halfORM for APIs</li> <li>Report use cases - Share your production experiences</li> </ol>"},{"location":"examples/instant-rest-api/instant-rest-api/#project-ideas","title":"\ud83d\udca1 Project Ideas","text":"<ul> <li>halfORM-GraphQL - GraphQL server generator</li> <li>halfORM-gRPC - Protocol Buffers / gRPC integration  </li> <li>halfORM-Serverless - AWS Lambda / Azure Functions deployment</li> <li>halfORM-Streaming - Apache Kafka / message queue integration</li> <li>halfORM-Microservices - Service mesh integration patterns</li> </ul>"},{"location":"examples/instant-rest-api/instant-rest-api/#get-involved","title":"\ud83d\udcde Get Involved","text":"<ul> <li>GitHub Discussions - Share ideas and collaborate</li> <li>Issues - Report bugs or request features</li> <li>Examples Repository - Contribute real-world examples</li> <li>Blog posts - Write about your halfORM API experiences</li> </ul> <p>The halfORM community thrives on practical, database-first solutions. Your contributions can help others build amazing APIs with minimal code!</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#conclusion","title":"Conclusion","text":"<p>This example demonstrates halfORM's core philosophy: let the database drive the application, but with security first. With minimal code, you get:</p> <ul> <li>\u2705 Secure read-only API for any PostgreSQL database</li> <li>\u2705 Mandatory configuration prevents accidental data exposure</li> <li>\u2705 Column-level control for precise data governance</li> <li>\u2705 Following halfORM conventions with <code>INSTANT_API_CONF_DIR</code></li> <li>\u2705 Production basics - port configuration and security headers</li> <li>\u2705 Self-documenting with OpenAPI integration</li> </ul> <p>The few lines mentioned at the beginning can power a secure API foundation that's ready for community enhancement!</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#get-started","title":"Get Started","text":"<ol> <li> <p>Download the example: instant_api.py</p> </li> <li> <p>Discover your database structure:    <pre><code>python instant_api.py your_database --create-config\n</code></pre></p> </li> <li> <p>Configure what to expose (uncomment lines in the generated file):    <pre><code>vim /etc/half_orm/instant_api/your_database.yml\n</code></pre></p> </li> <li> <p>Start your secure API:    <pre><code>python instant_api.py your_database --port 8001\n</code></pre></p> </li> <li> <p>Test and iterate - Add more data by uncommenting more lines!</p> </li> </ol> <p>The power of halfORM: From any PostgreSQL database to a secure REST API in minutes, not hours! \ud83d\udd12\ud83d\ude80</p> <p>This example showcases halfORM's database introspection capabilities. The community can help evolve it into production-ready solutions for authentication, caching, monitoring, and more. Contributions welcome!</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#conclusion_1","title":"Conclusion","text":"<p>This example demonstrates halfORM's core philosophy: let the database drive the application, but with security first. With minimal code, you get:</p> <ul> <li>\u2705 Secure read-only API for any PostgreSQL database</li> <li>\u2705 Mandatory configuration prevents accidental data exposure</li> <li>\u2705 Column-level control for precise data governance</li> <li>\u2705 Production-ready FastAPI foundation with OpenAPI docs</li> <li>\u2705 Zero maintenance - works with schema changes automatically</li> </ul> <p>The few lines mentioned at the beginning truly can power a secure, production-ready API infrastructure!</p>"},{"location":"examples/instant-rest-api/instant-rest-api/#get-started_1","title":"Get Started","text":"<ol> <li>Download the complete code: instant_api.py</li> <li>Create your configuration to expose only what you need</li> <li>Test with your database: <code>python instant_api.py your_database_name</code></li> <li>Deploy safely knowing write operations are disabled by design</li> </ol> <p>Safe, simple, and effective - the halfORM way! \ud83d\udd12\ud83d\ude80</p>"},{"location":"guides/","title":"Guides","text":"<p>Section Status</p> <p>Guide topics are defined. Each guide needs detailed content.</p>"},{"location":"guides/#available-guides","title":"Available Guides","text":"<p>[List and description of all guides]</p>"},{"location":"guides/configuration/","title":"Configuration","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/configuration/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/configuration/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/error-handling/","title":"Error Handling","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/error-handling/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/error-handling/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/migration/","title":"Migration from other ORMs","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/migration/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/migration/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/performance/","title":"Performance Optimization","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/performance/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/performance/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"guides/testing/","title":"Testing","text":"<p>Guide Status</p> <p>This guide needs comprehensive content with real-world examples.</p>"},{"location":"guides/testing/#purpose","title":"Purpose","text":"<p>[Why this guide exists and when to use it]</p>"},{"location":"guides/testing/#content","title":"Content","text":"<p>[Detailed guide content]</p>"},{"location":"tutorial/","title":"halfORM Tutorial","text":"<p>Welcome to the comprehensive halfORM tutorial! This step-by-step guide will take you from installation to advanced usage patterns.</p> <p>Before You Start</p> <p>This tutorial assumes basic familiarity with:</p> <ul> <li>Python (classes, decorators, basic OOP)</li> <li>SQL (SELECT, INSERT, UPDATE, DELETE, basic joins)</li> <li>PostgreSQL (connecting to a database, basic administration)</li> </ul> <p>If you're completely new to halfORM, start with the Quick Start Guide first!</p>"},{"location":"tutorial/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this tutorial, you'll be able to:</p> <ul> <li>\u2705 Install and configure halfORM for your projects</li> <li>\u2705 Connect to databases and work with existing schemas</li> <li>\u2705 Perform CRUD operations with intuitive Python syntax</li> <li>\u2705 Navigate relationships between tables efficiently</li> <li>\u2705 Create custom relation classes with business logic</li> <li>\u2705 Write complex queries with halfORM's powerful syntax</li> <li>\u2705 Handle transactions safely for complex operations</li> <li>\u2705 Debug and optimize your database interactions</li> </ul>"},{"location":"tutorial/#tutorial-structure","title":"Tutorial Structure","text":""},{"location":"tutorial/#part-1-getting-started","title":"Part 1: Getting Started","text":"Chapter Topic Duration Description 1. Installation Setup &amp; Config 10 min Install halfORM and configure database connections 2. First Steps Basic Usage 15 min Connect to databases, explore tables, basic CRUD"},{"location":"tutorial/#part-2-core-concepts","title":"Part 2: Core Concepts","text":"Chapter Topic Duration Description 3. Models &amp; Relations Classes &amp; Schemas 20 min Understanding relation classes, custom classes with <code>@register</code> 4. Foreign Keys Relationships 25 min Navigation, Fkeys configuration, relationship patterns"},{"location":"tutorial/#part-3-advanced-usage","title":"Part 3: Advanced Usage","text":"Chapter Topic Duration Description 5. Queries Advanced Querying 30 min Complex filters, joins, aggregations, performance 6. Transactions Data Integrity 20 min Transaction decorators, error handling, rollbacks <p>Total estimated time: ~2 hours</p>"},{"location":"tutorial/#tutorial-database","title":"Tutorial Database","text":"<p>Throughout this tutorial, we'll use a blog application schema that includes:</p> <pre><code>-- Authors table\nCREATE TABLE blog.author (\n    id SERIAL PRIMARY KEY,\n    first_name VARCHAR(100) NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    bio TEXT,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Posts table  \nCREATE TABLE blog.post (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    content TEXT,\n    author_id INTEGER REFERENCES blog.author(id) ON DELETE CASCADE,\n    published_at TIMESTAMP,\n    is_published BOOLEAN DEFAULT FALSE,\n    view_count INTEGER DEFAULT 0,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Comments table\nCREATE TABLE blog.comment (\n    id SERIAL PRIMARY KEY,\n    content TEXT NOT NULL,\n    author_id INTEGER REFERENCES blog.author(id) ON DELETE CASCADE,\n    post_id INTEGER REFERENCES blog.post(id) ON DELETE CASCADE,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n</code></pre>"},{"location":"tutorial/#tutorial-database-setup","title":"Tutorial Database Setup","text":"<p>We provide a complete setup script in Chapter 1: Installation that creates:</p> <ul> <li>Sample schema with the tables above</li> <li>Test data for realistic examples</li> <li>Indexes for performance</li> <li>Views for advanced examples</li> </ul>"},{"location":"tutorial/#learning-path-recommendations","title":"Learning Path Recommendations","text":""},{"location":"tutorial/#im-new-to-orms","title":"\ud83d\ude80 I'm new to ORMs","text":"<p>Start with Chapter 1 and follow sequentially. Take time with each concept before moving on.</p>"},{"location":"tutorial/#i-know-other-orms-django-sqlalchemy","title":"\ud83d\udd25 I know other ORMs (Django, SQLAlchemy)","text":"<p>You can skim Chapters 1-2 and focus on Chapters 3-4 to understand halfORM's unique approach.</p>"},{"location":"tutorial/#i-just-need-specific-topics","title":"\u26a1 I just need specific topics","text":"<p>Jump directly to the relevant chapter - each chapter includes necessary context.</p>"},{"location":"tutorial/#getting-help","title":"Getting Help","text":"<p>Throughout the tutorial:</p> <ul> <li>\ud83d\udca1 Tips highlight best practices</li> <li>\u26a0\ufe0f Warnings point out common pitfalls  </li> <li>\ud83d\udd0d Examples show real-world usage</li> <li>\ud83c\udfc6 Challenges let you practice concepts</li> </ul> <p>If you get stuck:</p> <ul> <li>Check the Fundamentals if you haven't already</li> <li>Browse Examples for patterns</li> <li>Ask in GitHub Discussions</li> </ul>"},{"location":"tutorial/#tutorial-philosophy","title":"Tutorial Philosophy","text":"<p>This tutorial follows halfORM's core principles:</p> <ol> <li>Database-First: We work with existing schemas, not code-generated ones</li> <li>SQL Transparency: You'll see exactly what SQL is generated</li> <li>PostgreSQL Native: We leverage PostgreSQL's unique features</li> <li>Practical Focus: Every example is based on real-world scenarios</li> </ol> <p>Ready to start? Let's begin with Chapter 1: Installation!</p> <p>Tutorial Feedback</p> <p>This tutorial is actively maintained. If you find errors, have suggestions, or want to contribute examples, please open an issue or start a discussion.</p>"},{"location":"tutorial/first-steps/","title":"Chapter 2: First Steps","text":"<p>Welcome to your first real halfORM experience! In this chapter, you'll create a complete tutorial database, connect to it with halfORM, and perform your first operations. By the end, you'll understand halfORM's core concepts and be ready for more advanced topics.</p> <p>Core Concepts</p> <p>This chapter introduces halfORM's fundamental concepts in action. For complete reference on these concepts, see halfORM Fundamentals which covers:</p> <ul> <li>Object-as-filter pattern and constraint syntax</li> <li>Declarative programming and lazy evaluation</li> <li>Method naming conventions (ho_ prefix)</li> <li>Database-first philosophy</li> </ul> <p>You can read Fundamentals now or refer to it as needed during this chapter.</p>"},{"location":"tutorial/first-steps/#tutorial-database-setup","title":"Tutorial Database Setup","text":"<p>Let's start by creating a proper database with realistic data. We'll build a blog application schema that includes authors, posts, comments, and tags - perfect for exploring relationships and real-world patterns.</p>"},{"location":"tutorial/first-steps/#step-1-create-the-tutorial-database","title":"Step 1: Create the Tutorial Database","text":"<p>First, let's create the database and user:</p> setup_tutorial_db.sql<pre><code>-- Create database and user\n-- Run as PostgreSQL superuser: psql -U postgres -f setup_tutorial_db.sql\n\n-- Create tutorial user\nCREATE USER tutorial_user WITH PASSWORD 'tutorial_pass';\n\n-- Create tutorial database\nCREATE DATABASE blog_tutorial OWNER tutorial_user;\n</code></pre> setup_tutorial_schema.sql<pre><code>-- Run this after connecting to blog_tutorial database\n-- psql -U postgres -d blog_tutorial -f setup_tutorial_schema.sql\n\n-- Grant necessary privileges\nGRANT ALL PRIVILEGES ON DATABASE blog_tutorial TO tutorial_user;\nGRANT ALL PRIVILEGES ON SCHEMA public TO tutorial_user;\n\n-- Create blog schema\nCREATE SCHEMA blog AUTHORIZATION tutorial_user;\n\n-- Create tables\nCREATE TABLE blog.author (\n    id SERIAL PRIMARY KEY,\n    first_name VARCHAR(100) NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    bio TEXT,\n    birth_date DATE,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Add table and column comments\nCOMMENT ON TABLE blog.author IS 'Authors who write blog posts and comments';\nCOMMENT ON COLUMN blog.author.id IS 'Unique identifier for each author';\nCOMMENT ON COLUMN blog.author.first_name IS 'Author''s first name';\nCOMMENT ON COLUMN blog.author.last_name IS 'Author''s last name';\nCOMMENT ON COLUMN blog.author.email IS 'Author''s email address (must be unique)';\nCOMMENT ON COLUMN blog.author.bio IS 'Short biography of the author';\nCOMMENT ON COLUMN blog.author.birth_date IS 'Author''s date of birth';\nCOMMENT ON COLUMN blog.author.is_active IS 'Whether the author account is active';\n\nCREATE TABLE blog.post (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    slug VARCHAR(255) UNIQUE NOT NULL,\n    content TEXT,\n    excerpt TEXT,\n    author_id INTEGER NOT NULL REFERENCES blog.author(id) ON DELETE CASCADE,\n    published_at TIMESTAMP,\n    is_published BOOLEAN DEFAULT FALSE,\n    view_count INTEGER DEFAULT 0,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCOMMENT ON TABLE blog.post IS 'Blog posts with content and metadata';\nCOMMENT ON COLUMN blog.post.id IS 'Unique identifier for each post';\nCOMMENT ON COLUMN blog.post.title IS 'Post title displayed to readers';\nCOMMENT ON COLUMN blog.post.slug IS 'URL-friendly version of the title';\nCOMMENT ON COLUMN blog.post.content IS 'Full content of the blog post';\nCOMMENT ON COLUMN blog.post.excerpt IS 'Short summary or preview of the post';\nCOMMENT ON COLUMN blog.post.author_id IS 'Reference to the author who wrote this post';\nCOMMENT ON COLUMN blog.post.published_at IS 'When the post was published (NULL for drafts)';\nCOMMENT ON COLUMN blog.post.is_published IS 'Whether the post is visible to readers';\nCOMMENT ON COLUMN blog.post.view_count IS 'Number of times this post has been viewed';\n\nCREATE TABLE blog.comment (\n    id SERIAL PRIMARY KEY,\n    content TEXT NOT NULL,\n    author_id INTEGER NOT NULL REFERENCES blog.author(id) ON DELETE CASCADE,\n    post_id INTEGER NOT NULL REFERENCES blog.post(id) ON DELETE CASCADE,\n    is_approved BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCOMMENT ON TABLE blog.comment IS 'Comments left by readers on blog posts';\nCOMMENT ON COLUMN blog.comment.id IS 'Unique identifier for each comment';\nCOMMENT ON COLUMN blog.comment.content IS 'The text content of the comment';\nCOMMENT ON COLUMN blog.comment.author_id IS 'Reference to the author who wrote this comment';\nCOMMENT ON COLUMN blog.comment.post_id IS 'Reference to the post this comment belongs to';\nCOMMENT ON COLUMN blog.comment.is_approved IS 'Whether the comment has been approved for display';\n\nCREATE TABLE blog.tag (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCOMMENT ON TABLE blog.tag IS 'Tags for categorizing and organizing blog posts';\nCOMMENT ON COLUMN blog.tag.id IS 'Unique identifier for each tag';\nCOMMENT ON COLUMN blog.tag.name IS 'Tag name (must be unique)';\nCOMMENT ON COLUMN blog.tag.description IS 'Optional description of what this tag represents';\n\nCREATE TABLE blog.post_tag (\n    post_id INTEGER REFERENCES blog.post(id) ON DELETE CASCADE,\n    tag_id INTEGER REFERENCES blog.tag(id) ON DELETE CASCADE,\n    PRIMARY KEY (post_id, tag_id)\n);\n\nCOMMENT ON TABLE blog.post_tag IS 'Many-to-many relationship linking posts with their tags';\n\n-- Create indexes for performance\nCREATE INDEX idx_author_email ON blog.author(email);\nCREATE INDEX idx_author_active ON blog.author(is_active);\nCREATE INDEX idx_post_author ON blog.post(author_id);\nCREATE INDEX idx_post_published ON blog.post(is_published);\nCREATE INDEX idx_post_published_at ON blog.post(published_at);\nCREATE INDEX idx_post_slug ON blog.post(slug);\nCREATE INDEX idx_comment_post ON blog.comment(post_id);\nCREATE INDEX idx_comment_author ON blog.comment(author_id);\nCREATE INDEX idx_comment_approved ON blog.comment(is_approved);\n\n-- Create useful views\nCREATE VIEW blog.published_posts AS\nSELECT \n    p.*,\n    a.first_name || ' ' || a.last_name AS author_name,\n    a.email AS author_email\nFROM blog.post p\nJOIN blog.author a ON p.author_id = a.id\nWHERE p.is_published = TRUE\nORDER BY p.published_at DESC;\n\nCOMMENT ON VIEW blog.published_posts IS 'Published posts with author information for public display';\n\nCREATE VIEW blog.post_stats AS\nSELECT \n    p.id,\n    p.title,\n    p.view_count,\n    COUNT(c.id) AS comment_count,\n    COUNT(CASE WHEN c.is_approved THEN 1 END) AS approved_comment_count\nFROM blog.post p\nLEFT JOIN blog.comment c ON p.id = c.post_id\nGROUP BY p.id, p.title, p.view_count;\n\nCOMMENT ON VIEW blog.post_stats IS 'Post statistics including view and comment counts';\n\n-- Grant permissions on new schema\nGRANT ALL PRIVILEGES ON SCHEMA blog TO tutorial_user;\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA blog TO tutorial_user;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA blog TO tutorial_user;\nGRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA blog TO tutorial_user;\n\n-- Insert sample data\nINSERT INTO blog.author (first_name, last_name, email, bio, birth_date) VALUES\n('Alice', 'Johnson', 'alice@collorg.org', 'Tech writer passionate about Python and databases.', '1985-03-15'),\n('Bob', 'Smith', 'bob@collorg.org', 'Full-stack developer and PostgreSQL enthusiast.', '1990-07-22'),\n('Carol', 'Brown', 'carol@collorg.org', 'Data scientist with a love for clear explanations.', '1988-11-08'),\n('David', 'Wilson', 'david@collorg.org', 'DevOps engineer and automation expert.', '1992-01-30');\n\nINSERT INTO blog.tag (name, description) VALUES\n('python', 'Python programming language'),\n('postgresql', 'PostgreSQL database'),\n('orm', 'Object-Relational Mapping'),\n('tutorial', 'Educational content'),\n('performance', 'Performance optimization'),\n('best-practices', 'Best practices and patterns');\n\nINSERT INTO blog.post (title, slug, content, excerpt, author_id, published_at, is_published, view_count) VALUES\n(\n    'Getting Started with halfORM',\n    'getting-started-halfORM',\n    'halfORM is a PostgreSQL-native ORM that takes a database-first approach...',\n    'Learn the basics of halfORM and why it''s different from other ORMs.',\n    1,\n    NOW() - INTERVAL '7 days',\n    TRUE,\n    245\n),\n(\n    'Advanced PostgreSQL Features',\n    'advanced-postgresql-features',\n    'PostgreSQL offers many advanced features that most ORMs don''t support well...',\n    'Explore PostgreSQL''s advanced features and how to use them with halfORM.',\n    2,\n    NOW() - INTERVAL '3 days',\n    TRUE,\n    189\n),\n(\n    'Database Performance Tips',\n    'database-performance-tips',\n    'Optimizing database performance requires understanding both your queries and your data...',\n    'Practical tips for improving database performance in production applications.',\n    3,\n    NOW() - INTERVAL '1 day',\n    TRUE,\n    156\n),\n(\n    'Working with Relationships',\n    'working-with-relationships',\n    'Foreign keys and relationships are at the heart of relational databases...',\n    'Master foreign key navigation and relationship patterns in halfORM.',\n    1,\n    NULL,\n    FALSE,\n    0\n);\n\n-- Link posts with tags\nINSERT INTO blog.post_tag (post_id, tag_id) VALUES\n(1, 3), (1, 4),  -- halfORM post: orm, tutorial\n(2, 2), (2, 5),  -- PostgreSQL post: postgresql, performance  \n(3, 2), (3, 5), (3, 6),  -- Performance post: postgresql, performance, best-practices\n(4, 3), (4, 4);  -- Relationships post: orm, tutorial\n\nINSERT INTO blog.comment (content, author_id, post_id, is_approved) VALUES\n('Great introduction! This really helped me understand the differences.', 2, 1, TRUE),\n('Thanks for the clear explanations. Looking forward to more posts!', 3, 1, TRUE),\n('Could you cover transactions in a future post?', 4, 1, TRUE),\n('Excellent deep dive into PostgreSQL features. Very practical!', 1, 2, TRUE),\n('The performance tips section was especially helpful.', 4, 2, TRUE),\n('This saved me hours of debugging. Thank you!', 2, 3, TRUE),\n('Would love to see examples with larger datasets.', 1, 3, FALSE);\n</code></pre>"},{"location":"tutorial/first-steps/#step-2-run-the-setup-scripts","title":"Step 2: Run the Setup Scripts","text":"<p>Execute the scripts to create your tutorial database:</p> <pre><code># Create the database and user\npsql -U postgres -f setup_tutorial_db.sql\n\n# Connect to the new database and create the schema\npsql -U postgres -d blog_tutorial -f setup_tutorial_schema.sql\n\n# Verify the setup\npsql -U tutorial_user -d blog_tutorial -c \"\\dt blog.*\"\n</code></pre> <p>Expected output: <pre><code>           List of relations\n Schema |   Name   | Type  |     Owner\n--------+----------+-------+---------------\n blog   | author   | table | tutorial_user\n blog   | comment  | table | tutorial_user\n blog   | post     | table | tutorial_user\n blog   | post_tag | table | tutorial_user\n blog   | tag      | table | tutorial_user\n</code></pre></p>"},{"location":"tutorial/first-steps/#step-3-configure-halform-connection","title":"Step 3: Configure halfORM Connection","text":"<p>Create a configuration file for the tutorial database:</p> <pre><code># Create config directory if it doesn't exist\nmkdir -p ~/.half_orm\nexport HALFORM_CONF_DIR=~/.half_orm\n</code></pre> ~/.half_orm/blog_tutorial<pre><code>[database]\nname = blog_tutorial\nuser = tutorial_user\npassword = tutorial_pass\nhost = localhost\nport = 5432\n</code></pre>"},{"location":"tutorial/first-steps/#step-4-test-the-setup","title":"Step 4: Test the Setup","text":"<pre><code># Test the new database connection\npython -m half_orm\n</code></pre> <p>You should see something like: <pre><code>[halfORM] version 0.15.0\n\u2705 Connected to template1 database (default setup)\n\n== Checking connections for files in HALFORM_CONF_DIR=/home/user/.half_orm\n\u2705 blog_tutorial\n</code></pre></p> <p>Perfect! Now you have a working tutorial database with sample data.</p>"},{"location":"tutorial/first-steps/#connecting-to-your-database","title":"Connecting to Your Database","text":"<p>Let's start exploring halfORM by connecting to our new database:</p> first_connection.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nFirst connection to the tutorial database\n\"\"\"\n\n# Import halfORM\nfrom half_orm.model import Model\n\n# Connect to the tutorial database\nblog = Model('blog_tutorial')\n\nprint(\"\ud83c\udf89 Connected to blog_tutorial database!\")\nprint(blog)\n</code></pre>"},{"location":"tutorial/first-steps/#understanding-the-model-class","title":"Understanding the Model Class","text":"<p>The <code>Model</code> class is your entry point to halfORM. It represents a connection to a specific PostgreSQL database and provides methods to:</p> <ul> <li>Get relation classes for tables and views</li> <li>Execute raw SQL when needed</li> <li>Manage transactions </li> <li>Access database metadata</li> </ul> <p>Model Details</p> <p>For complete information about the Model class and its responsibilities, see Model Architecture in Fundamentals.</p>"},{"location":"tutorial/first-steps/#exploring-the-database-schema","title":"Exploring the Database Schema","text":"<p>Let's explore what's in our database using halfORM:</p> explore_database.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nExplore the tutorial database structure\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\n\n# halfORM automatically discovers all relations (tables and views)\nprint(blog)\n</code></pre> <p>Expected output: <pre><code>\ud83d\udccb Available relations for blog_tutorial:\nr \"blog\".\"author\"           \u2192 Authors who write blog posts and comments\nr \"blog\".\"comment\"          \u2192 Comments left by readers on blog posts\nr \"blog\".\"post\"             \u2192 Blog posts with content and metadata\nr \"blog\".\"post_tag\"         \u2192 Many-to-many relationship linking posts with tags\nr \"blog\".\"tag\"              \u2192 Tags for categorizing and organizing blog posts\nv \"blog\".\"post_stats\"       \u2192 Post statistics including view and comment counts\nv \"blog\".\"published_posts\"  \u2192 Published posts with author information for public display\n\n\ud83d\udccb Relation Types:\n  r: Table\n  p: Partioned table\n  v: View\n  m: Materialized view\n  f: Foreign data\n</code></pre></p>"},{"location":"tutorial/first-steps/#creating-your-first-relation-class","title":"Creating Your First Relation Class","text":"<p>In halfORM, you work with relation classes that represent tables or views. Let's create our first one:</p> first_relation_class.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nWorking with relation classes\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\n\n# Create a relation class for the author table\nAuthor = blog.get_relation_class('blog.author')\n\nprint(\"\u2705 Created Author relation class\")\nprint(f\"\ud83d\udcdd Class: {Author}\")\nprint(f\"\ud83c\udfaf Represents: blog.author table\")\n\n# Explore the table structure\nprint(\"\\n\ud83d\udd0d Table structure:\")\nprint(Author())\n</code></pre> <p>When you run this, you'll see detailed information about the <code>blog.author</code> table:</p> <pre><code>DATABASE: blog_tutorial\nSCHEMA: blog\nTABLE: author\nDESCRIPTION:\nAuthors who write blog posts and comments\nFIELDS:\n- id:         (int4) NOT NULL\n- first_name: (varchar) NOT NULL\n- last_name:  (varchar) NOT NULL\n- email:      (varchar) NOT NULL\n- bio:        (text)\n- birth_date: (date)\n- is_active:  (bool)\n- created_at: (timestamp)\n- updated_at: (timestamp)\nPRIMARY KEY (id)\nUNIQUE CONSTRAINT (email)\nFOREIGN KEYS:\n- *reverse*fkey_blog_tutorial_blog_comment_author_id: (\"id\")\n \u21b3 \"blog_tutorial\":\"blog\".\"comment\"(author_id)\n- *reverse*fkey_blog_tutorial_blog_post_author_id: (\"id\")\n \u21b3 \"blog_tutorial\":\"blog\".\"post\"(author_id)\nTo use the foreign keys as direct attributes of the class, copy/paste the Fkeys below into\nyour code as a class attribute and replace the empty string key(s) with the alias(es) you\nwant to use. The aliases must be unique and different from any of the column names. Empty\nstring keys are ignored.\nFkeys = {\n    '': '_reverse_fkey_blog_tutorial_blog_comment_author_id',\n    '': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n}\n</code></pre> <p>Understanding the Output</p> <p>halfORM shows you:</p> <ul> <li>Database, schema, and table information with PostgreSQL comments</li> <li>Field details with types and constraints (NOT NULL, etc.)</li> <li>Primary keys and unique constraints clearly marked</li> <li>Foreign key relationships including reverse foreign keys (incoming references)</li> <li>Ready-to-use Fkeys template that you can copy/paste into your custom classes</li> <li>Clear instructions on how to use foreign keys as class attributes</li> </ul> <p>Schema Names Are Required</p> <p>halfORM always requires the full <code>schema.table</code> format in <code>get_relation_class()</code>. For complete details on this requirement and the reasons behind it, see Schema Requirements in Fundamentals.</p>"},{"location":"tutorial/first-steps/#your-first-crud-operations","title":"Your First CRUD Operations","text":"<p>Now let's perform basic Create, Read, Update, Delete operations:</p>"},{"location":"tutorial/first-steps/#important-null-vs-none","title":"Important: NULL vs None","text":"<p>halfORM makes a crucial distinction between <code>None</code> (Python) and <code>NULL</code> (SQL):</p> <pre><code>from half_orm.null import NULL  # Required import\n\n# \u274c COMMON TRAP\nAuthor(bio=None)   # Has NO effect - ignores bio field entirely\nAuthor(bio=NULL)   # \u2705 Filters WHERE bio IS NULL\n</code></pre> <p>Simple rule: - <code>field=None</code> \u2192 ignores the field (no filter) - <code>field=NULL</code> \u2192 filters NULL values in database</p> <p>Frequent mistake</p> <p><code>Author(bio=None)</code> returns ALL authors, not those without bio! Use <code>Author(bio=NULL)</code> to filter NULL values.</p> <p>See halfORM Fundamentals for complete details.</p>"},{"location":"tutorial/first-steps/#reading-data-r","title":"Reading Data (R)","text":"read_operations.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nReading data with halfORM\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\n\nprint(\"\ud83d\udcd6 Reading data from the database\")\nprint(\"=\" * 40)\n\n# Method 1: Simple iteration - objects are iterators!\nprint(\"\\n\ud83d\udc65 All authors (using iteration):\")\nfor author in Author():\n    print(f\"  \ud83d\udcdd {author['first_name']} {author['last_name']} ({author['email']})\")\n\n# Method 2: Explicit ho_select() for all columns (equivalent to above)\nprint(\"\\n\ud83d\udc65 All authors (using ho_select):\")\nall_authors = Author().ho_select()\nfor author in all_authors:\n    print(f\"  \ud83d\udcdd {author['first_name']} {author['last_name']} ({author['email']})\")\n\n# Method 3: ho_select() with specific columns (this is where it's really needed)\nprint(\"\\n\ud83d\udce7 Just names and emails (ho_select with column selection):\")\nauthor_info = Author().ho_select('first_name', 'last_name', 'email')\nfor author in author_info:\n    print(f\"  \ud83d\udc64 {author['first_name']} {author['last_name']} - {author['email']}\")\n\n# Method 4: Count records\nauthor_count = Author().ho_count()\nprint(f\"\\n\ud83d\udd22 Total authors: {author_count}\")\n\n# Method 5: Get one specific author\nalice = Author(email='alice@collorg.org').ho_get()\nprint(f\"\\n\ud83c\udfaf Found Alice: {alice.first_name} {alice.last_name}\")\n</code></pre> <p>Method Reference</p> <p>For complete details on all available methods and their usage patterns, see Method Naming Convention in Fundamentals.</p> <p>Query Building vs Execution</p> <p>Notice the pattern above:</p> <pre><code># Building phase (lazy - no SQL)\nquery = Author(email=('ilike', '%@gmail.com'))  # Just a filter\nordered = query.ho_order_by('last_name')        # Add ordering\n\n# Execution phase (eager - SQL runs)\nfor author in ordered.ho_select('name', 'email'):  # SQL executes NOW\n    print(author['name'])\n</code></pre> <p>Key insight: <code>.ho_select()</code> is a generator that executes SQL immediately. You cannot chain more operations after it!</p> <p>Deep Dive</p> <p>This is a fundamental halfORM concept. For complete details and more examples, see Query Execution Model in Fundamentals.</p>"},{"location":"tutorial/first-steps/#creating-data-c","title":"Creating Data (C)","text":"create_operations.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nCreating new data with halfORM\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\n\nprint(\"\u2795 Creating new data\")\nprint(\"=\" * 30)\n\n# Create a new author\nnew_author = Author(\n    first_name='Emma',\n    last_name='Wilson',\n    email='emma@collorg.org',\n    bio='Frontend developer passionate about user experience.',\n    birth_date='1991-05-12'\n)\n\n# Check if author already exists\nif Author(email=new_author.email).ho_is_empty():\n    # Insert the new author\n    result = new_author.ho_insert()\n    print(f\"\u2705 Created new author: {result}\")\n    print(f\"\ud83d\udcdd New author ID: {result['id']}\")\nelse:\n    print(\"\u2139\ufe0f  Author already exists\")\n\n# Verify the creation\nemma = Author(email='emma@collorg.org').ho_get()\nprint(f\"\ud83c\udf89 Verified: {emma.first_name} {emma.last_name} is in the database\")\n</code></pre>"},{"location":"tutorial/first-steps/#updating-data-u","title":"Updating Data (U)","text":"update_operations.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nUpdating data with halfORM\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\n\nprint(\"\ud83d\udcdd Updating data\")\nprint(\"=\" * 25)\n\n# Find Emma and update her bio\nemma = Author(email='emma@collorg.org')\n\nif not emma.ho_is_empty():\n    # Update the bio\n    result = emma.ho_update(\n        bio='Frontend developer and UX designer passionate about accessible web applications.'\n    )\n    print(f\"\u2705 Updated Emma's bio\")\n\n    # Verify the update\n    updated_emma = Author(email='emma@collorg.org').ho_get()\n    print(f\"\ud83d\udcdd New bio: {updated_emma.bio}\")\nelse:\n    print(\"\u274c Emma not found in database\")\n</code></pre>"},{"location":"tutorial/first-steps/#deleting-data-d","title":"Deleting Data (D)","text":"delete_operations.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nDeleting data with halfORM\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\n\nprint(\"\ud83d\uddd1\ufe0f  Deleting data\")\nprint(\"=\" * 25)\n\n# Find Emma\nemma = Author(email='emma@collorg.org')\n\nif not emma.ho_is_empty():\n    # Delete Emma\n    emma.ho_delete()\n    print(\"\u2705 Deleted Emma from database\")\n\n    # Verify deletion\n    check_emma = Author(email='emma@collorg.org')\n    if check_emma.ho_is_empty():\n        print(\"\u2705 Confirmed: Emma is no longer in database\")\nelse:\n    print(\"\u2139\ufe0f  Emma not found in database\")\n</code></pre>"},{"location":"tutorial/first-steps/#basic-filtering-and-querying","title":"Basic Filtering and Querying","text":"<p>Core Concept: Object-as-Filter</p> <p>halfORM uses a unique object-as-filter pattern where the object instance represents a subset of data. For complete details on this fundamental concept, constraint syntax, and all available operators, see Object-as-Filter Pattern in Fundamentals.</p> <p>Here are some practical examples of this pattern in action:</p> filtering_examples.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nFiltering and querying examples\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\nPost = blog.get_relation_class('blog.post')\n\nprint(\"\ud83d\udd0d Filtering and querying\")\nprint(\"=\" * 35)\n\n# Example 1: Exact match (single value)\nprint(\"\\n\ud83d\udce7 Author with specific email:\")\nalice = Author(email='alice@collorg.org').ho_get()\nprint(f\"  \ud83d\udcdd {alice.first_name} {alice.last_name}\")\n\n# Example 2: Pattern matching with ILIKE\nprint(\"\\n\ud83d\udce7 Authors with collorg.org addresses:\")\ncollorg_authors = Author(email=('ilike', '%@collorg.org'))\nfor author in collorg_authors:\n    print(f\"  \ud83d\udcee {author['first_name']} {author['last_name']}\")\n\n# Example 3: Boolean filter (exact match)\nprint(\"\\n\u2705 Active authors:\")\nactive_authors = Author(is_active=True).ho_select('first_name', 'last_name')\nfor author in active_authors:\n    print(f\"  \ud83d\udc64 {author['first_name']} {author['last_name']}\")\n\n# Example 4: Date comparison (tuple form)\nprint(\"\\n\ud83d\udcc5 Authors born after 1988:\")\nyoung_authors = Author(birth_date=('&gt;', '1988-01-01')).ho_select('first_name', 'last_name', 'birth_date')\nfor author in young_authors:\n    print(f\"  \ud83c\udf82 {author['first_name']} {author['last_name']} ({author['birth_date']})\")\n\n# Example 5: Published posts (exact match)\nprint(\"\\n\ud83d\udcf0 Published posts:\")\npublished_posts = Post(is_published=True).ho_select('title', 'view_count')\nfor post in published_posts:\n    print(f\"  \ud83d\udcc4 {post['title']} ({post['view_count']} views)\")\n\n# Example 6: Ordering and limiting\nprint(\"\\n\ud83d\udd25 Most viewed posts:\")\npopular_posts = (Post(is_published=True)\n    .ho_order_by('view_count desc')\n    .ho_limit(3)\n    .ho_select('title', 'view_count'))\n\nfor post in popular_posts:\n    print(f\"  \ud83c\udf1f {post['title']} - {post['view_count']} views\")\n</code></pre> <p>More Operators Available</p> <p>This example shows basic patterns. For the complete list of operators including regular expressions, list operations, and range queries, see Common Operators in Fundamentals.</p>"},{"location":"tutorial/first-steps/#understanding-halforms-core-concepts","title":"Understanding halfORM's Core Concepts","text":""},{"location":"tutorial/first-steps/#declarative-programming-model","title":"Declarative Programming Model","text":"<p>halfORM follows a declarative programming model where you build query intentions first, then execute them when needed:</p> <pre><code># \ud83c\udfaf Declaration phase - no SQL executed yet\nauthors = Author(is_active=True)\ngmail_authors = Author(email=('ilike', '%@gmail.com'))\nordered_authors = authors.ho_order_by('last_name')\n\n# \u26a1 Execution phase - SQL runs now\nfor author in ordered_authors:  # Query executes here\n    print(author['first_name'])\n</code></pre> <p>Learn More</p> <p>This is a fundamental halfORM concept. For complete details on when queries execute and how to optimize the declarative flow, see Query Execution Model in Fundamentals.</p>"},{"location":"tutorial/first-steps/#sql-transparency-see-whats-generated","title":"SQL Transparency - See What's Generated","text":"<p>One of halfORM's key features is SQL transparency. You can see exactly what SQL query is executed:</p> sql_transparency.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nSeeing the generated SQL\n\"\"\"\n\nfrom half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\n\nprint(\"\ud83d\udd0d SQL Transparency\")\nprint(\"=\" * 30)\n\n# Create a query\nquery = Author(is_active=True).ho_order_by('last_name')\n\n# See the SQL without executing\nprint(\"\\n\ud83d\udcdd Generated SQL:\")\nquery.ho_mogrify()\n\n# Now execute and see results\nprint(\"\\n\ud83d\udcca Results:\")\nresults = query.ho_select('first_name', 'last_name')\nfor result in results:\n    print(f\"  \ud83d\udc64 {result['first_name']} {result['last_name']}\")\n</code></pre> <p>This will show you the exact SQL being generated, helping you understand what halfORM is doing and optimize your queries.</p> <p>SQL Transparency Details</p> <p>For more information on halfORM's commitment to SQL transparency and how it benefits development, see SQL Transparency in Fundamentals.</p>"},{"location":"tutorial/first-steps/#whats-next","title":"What's Next?","text":"<p>Congratulations! You've successfully:</p> <ul> <li>\u2705 Set up a complete tutorial database with realistic data</li> <li>\u2705 Connected to PostgreSQL using halfORM</li> <li>\u2705 Created your first relation classes</li> <li>\u2705 Performed all basic CRUD operations</li> <li>\u2705 Used halfORM's filtering and querying features</li> <li>\u2705 Understood key halfORM concepts and patterns</li> </ul> <p>In the next chapter, Models &amp; Relations, you'll learn:</p> <ul> <li>How to create custom relation classes with business logic</li> <li>Using the <code>@register</code> decorator for enhanced functionality</li> <li>Working with more complex data types and constraints</li> <li>Best practices for organizing your halfORM code</li> </ul> <p>Ready to go deeper? Continue to Chapter 3: Models &amp; Relations!</p> <p>Practice Makes Perfect</p> <p>Try modifying the examples above:</p> <ul> <li>Create new authors and posts</li> <li>Experiment with different filters (try the operators from Fundamentals)</li> <li>Try combining multiple filter conditions</li> <li>Explore the other tables (comment, tag, post_tag)</li> </ul> <p>The best way to learn halfORM is by experimenting with real data!</p> <p>Need More Detail?</p> <p>If any concepts in this chapter need clarification, the Fundamentals page provides comprehensive coverage of all core halfORM concepts with additional examples and details.</p>"},{"location":"tutorial/foreign-keys/","title":"Foreign Keys","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/foreign-keys/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/foreign-keys/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/foreign-keys/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"},{"location":"tutorial/installation/","title":"Chapter 1: Installation","text":"<p>In this chapter, you'll install halfORM and verify it works with your PostgreSQL database. We'll keep it simple and get you up and running quickly!</p>"},{"location":"tutorial/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing halfORM, ensure you have:</p>"},{"location":"tutorial/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.7+ (3.9+ recommended)</li> <li>PostgreSQL 9.6+ (13+ recommended) with peer authentication for <code>$USER</code> on development environment</li> <li>psycopg2 (installed automatically with halfORM)</li> </ul> <p>Don't have PostgreSQL?</p> <p>Quick setup options:</p> <ul> <li>Docker: <code>docker run --name postgres-tutorial -e POSTGRES_PASSWORD=tutorial -d -p 5432:5432 postgres:13</code></li> <li>Local install: PostgreSQL Downloads</li> <li>Cloud: ElephantSQL (free tier), Supabase, AWS RDS</li> </ul>"},{"location":"tutorial/installation/#installing-halform","title":"Installing halfORM","text":""},{"location":"tutorial/installation/#method-1-pip-with-virtual-environment-recommended","title":"Method 1: pip with virtual environment (Recommended)","text":"<pre><code># Create virtual environment\npython -m venv halfORM-tutorial\nsource halfORM-tutorial/bin/activate  # Linux/Mac\n# halfORM-tutorial\\Scripts\\activate  # Windows\n\n# Install halfORM\npip install half_orm\n\n# Verify installation\npython -m half_orm\n</code></pre> <p>Virtual Environment Benefits</p> <p>Using a virtual environment prevents conflicts with other Python packages and makes it easy to reproduce the tutorial environment.</p>"},{"location":"tutorial/installation/#method-2-development-installation","title":"Method 2: Development Installation","text":"<p>If you want to contribute or use the latest features:</p> <pre><code># Clone the repository\ngit clone https://github.com/collorg/halfORM.git\ncd halfORM\n\n# Install in development mode\npip install -e .\n\n# Verify installation\npython -m half_orm\n</code></pre>"},{"location":"tutorial/installation/#quick-test-with-default-postgresql","title":"Quick Test with Default PostgreSQL","text":"<p>Let's verify halfORM works with your PostgreSQL installation using the built-in diagnostic tool.</p>"},{"location":"tutorial/installation/#one-command-test","title":"One-Command Test","text":"<p>halfORM includes a built-in diagnostic tool that tests your installation and database connections:</p> <pre><code># Test halfORM installation and database access\npython -m half_orm\n</code></pre> <p>Expected output: <pre><code>[halfORM] version 0.15.1\n- HALFORM_CONF_DIR=/home/user/.half_orm\n\u2705 Connected to template1 database (default setup)\n</code></pre></p> <p>This tests:</p> <ul> <li>\u2705 halfORM installation and version</li> <li>\u2705 Configuration directory location  </li> <li>\u2705 Default peer authentication with template1</li> <li>\u2705 Any configured database connections</li> </ul>"},{"location":"tutorial/installation/#what-the-test-does","title":"What the Test Does","text":"<p>The diagnostic tool automatically:</p> <ol> <li>Tests template1 connection using peer authentication (no config needed)</li> <li>Scans your config directory for database connection files</li> <li>Tests each configured database and reports status</li> <li>Shows helpful error messages if something isn't working</li> </ol>"},{"location":"tutorial/installation/#default-postgresql-configuration","title":"Default PostgreSQL Configuration","text":"<p>This works because most PostgreSQL installations include:</p> <pre><code># in pg_hba.conf\nlocal   all             all                                     peer\n</code></pre> <p>This allows your system user to connect to any database without a password assuming there is a role with the correponding name in PostgreSQL. Otherwise you will get the following result:</p> <pre><code>[halfORM] version 0.15.1\n- HALFORM_CONF_DIR=/etc/half_orm\nHOP WARNING: No config file '/etc/half_orm/template1'.\n     Trying peer authentication for 'nopgaccess'.\n\u274c connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: FATAL:  role \"nopgaccess\" does not exist\n</code></pre>"},{"location":"tutorial/installation/#database-configuration-optional","title":"Database Configuration (Optional)","text":"<p>For production use or when you need to connect to specific databases, halfORM uses configuration files. This section shows you how to set them up, but it's not required for the tutorial.</p>"},{"location":"tutorial/installation/#when-you-need-configuration-files","title":"When You Need Configuration Files","text":"<ul> <li>Connecting to databases other than <code>template1</code></li> <li>Using different usernames or passwords</li> <li>Connecting to remote databases</li> <li>Production deployments</li> </ul>"},{"location":"tutorial/installation/#basic-configuration-setup","title":"Basic Configuration Setup","text":"<p>If you want to set up configuration files:</p> <pre><code># Create configuration directory\nmkdir ~/.half_orm\nexport HALFORM_CONF_DIR=~/.half_orm\n\n# Add to shell profile for persistence\necho 'export HALFORM_CONF_DIR=~/.half_orm' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"tutorial/installation/#example-configuration-file","title":"Example Configuration File","text":"~/.half_orm/my_database<pre><code>[database]\nname = my_database\nuser = my_user\npassword = my_password\nhost = localhost\nport = 5432\n</code></pre> <p>Usage: <pre><code>from half_orm.model import Model\ndb = Model('my_database')  # References ~/.half_orm/my_database\n</code></pre></p>"},{"location":"tutorial/installation/#trusted-authentication-no-password","title":"Trusted Authentication (No Password)","text":"<p>For local development with trusted authentication:</p> ~/.half_orm/my_local_db<pre><code>[database]\nname = my_local_db\n# user defaults to current system user\n# no password needed with peer authentication\nhost = localhost\nport = 5432\n</code></pre>"},{"location":"tutorial/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorial/installation/#common-issues","title":"Common Issues","text":""},{"location":"tutorial/installation/#halform-import-error","title":"halfORM Import Error","text":"<pre><code>ModuleNotFoundError: No module named 'half_orm'\n</code></pre> <p>Solutions: - Check virtual environment is activated - Install halfORM: <code>pip install half_orm</code> - Verify Python path: <code>python -c \"import sys; print(sys.path)\"</code></p>"},{"location":"tutorial/installation/#postgresql-connection-failed","title":"PostgreSQL Connection Failed","text":"<pre><code>psycopg2.OperationalError: could not connect to server\n</code></pre> <p>Solutions: - Check PostgreSQL is running: <code>sudo systemctl status postgresql</code> - Check PostgreSQL is accepting connections: <code>psql template1</code> - Ensure your user can connect: <code>psql -U $(whoami) template1</code></p>"},{"location":"tutorial/installation/#permission-denied","title":"Permission Denied","text":"<pre><code>psycopg2.errors.InsufficientPrivilege: permission denied\n</code></pre> <p>Solutions: - Check <code>pg_hba.conf</code> has peer authentication enabled - Ensure your system user exists in PostgreSQL: <code>createuser $(whoami)</code> - Try connecting manually first: <code>psql template1</code></p>"},{"location":"tutorial/installation/#getting-help","title":"Getting Help","text":"<p>If you're still having issues:</p> <ol> <li>Check PostgreSQL is running: <code>sudo systemctl status postgresql</code></li> <li>Test manual connection: <code>psql template1</code></li> <li>Search existing issues on GitHub</li> <li>Ask for help in GitHub Discussions</li> </ol>"},{"location":"tutorial/installation/#whats-next","title":"What's Next?","text":"<p>Congratulations! You now have:</p> <ul> <li>\u2705 halfORM installed and working</li> <li>\u2705 Verified connection to PostgreSQL</li> <li>\u2705 Understanding of basic configuration</li> </ul> <p>In the next chapter, First Steps, you'll:</p> <ul> <li>Set up a complete tutorial database with sample data</li> <li>Explore database schemas and tables</li> <li>Perform your first CRUD operations</li> <li>Learn halfORM's core concepts and syntax</li> </ul> <p>The tutorial database setup has been moved to Chapter 2 to keep this installation chapter focused and simple.</p> <p>Ready to continue? Let's move on to Chapter 2: First Steps where we'll create a proper tutorial database and start exploring halfORM's features!</p>"},{"location":"tutorial/models-relations/","title":"Chapter 3: Models &amp; Relations","text":"<p>In the previous chapter, you learned how to connect to databases and perform basic CRUD operations. Now we'll dive deeper into halfORM's core concepts: Models and custom Relation classes. You'll learn how to add business logic to your data classes and create a more maintainable codebase.</p> <p>Prerequisites</p> <p>This chapter builds on core halfORM concepts. Ensure you're familiar with:</p> <ul> <li>halfORM Fundamentals - Essential concepts including Model architecture, schema requirements, and method naming conventions</li> <li>Chapter 2: First Steps - Basic CRUD operations and relation class creation</li> </ul> <p>Pay special attention to the Database-First Strategy and Schema Requirements sections in Fundamentals.</p>"},{"location":"tutorial/models-relations/#chapter-objectives","title":"Chapter Objectives","text":"<p>By the end of this chapter, you'll understand:</p> <ul> <li>Custom relation classes - Creating classes with business logic and clean interfaces</li> <li>The <code>@register</code> decorator - Overriding auto-generated classes with your custom implementations</li> <li>Fkeys configuration - Clean foreign key aliases for better code readability</li> <li>Class organization - Best practices for structuring your halfORM code</li> <li>Inheritance patterns - Working with PostgreSQL table inheritance</li> </ul>"},{"location":"tutorial/models-relations/#model-class-deep-dive","title":"Model Class Deep Dive","text":"<p>Model Fundamentals</p> <p>The Model class architecture and responsibilities are covered in detail in Model Architecture. This section focuses on practical usage patterns.</p>"},{"location":"tutorial/models-relations/#model-as-a-relation-factory","title":"Model as a Relation Factory","text":"<p>When you call <code>get_relation_class()</code>, the model returns a generated class that inherits from <code>Relation</code>. Classes are created once and cached:</p> <pre><code>from half_orm.model import Model\n\nblog = Model('blog_tutorial')\n\n# Each call returns the same cached class\nAuthor1 = blog.get_relation_class('blog.author')\nAuthor2 = blog.get_relation_class('blog.author')\nprint(Author1 is Author2)  # \u2192 True (same class object)\n\nprint(Author1.__name__)  # \u2192 'Table_BlogTutorialBlogAuthor'\nprint(Author1.__bases__)  # \u2192 (&lt;class 'half_orm.relation.Relation'&gt;,)\n\n# You can inspect the generated class\nprint(Author1())  # Shows complete table structure\n</code></pre>"},{"location":"tutorial/models-relations/#model-metadata-discovery","title":"Model Metadata Discovery","text":"<p>Models automatically discover and cache database structure:</p> <pre><code># Explore what's in your database\nprint(blog)  # Shows all relations\n\n# Check if a relation exists\nif blog.has_relation('blog.author'):\n    Author = blog.get_relation_class('blog.author')\n\n# Get detailed metadata\nrelations = blog.desc()  # List of all relations with inheritance info\n</code></pre>"},{"location":"tutorial/models-relations/#auto-generated-relation-classes","title":"Auto-Generated Relation Classes","text":"<p>When you call <code>get_relation_class()</code>, halfORM generates a class with all the necessary attributes and methods based on your database schema.</p>"},{"location":"tutorial/models-relations/#what-gets-generated-automatically","title":"What Gets Generated Automatically","text":"<pre><code>Author = blog.get_relation_class('blog.author')\n\n# Fields become attributes\nauthor = Author()\nprint(author.first_name)  # \u2192 Field object\nprint(author.email)       # \u2192 Field object\n\n# Foreign keys are available\nprint(author._ho_fkeys.keys())  # \u2192 All available foreign keys\n\n# Metadata is attached\nprint(author._ho_metadata['description'])  # \u2192 Table comment\nprint(author._ho_pkey)  # \u2192 Primary key fields\n</code></pre>"},{"location":"tutorial/models-relations/#working-with-auto-generated-classes","title":"Working with Auto-Generated Classes","text":"<pre><code># You can use auto-generated classes directly\nAuthor = blog.get_relation_class('blog.author')\nPost = blog.get_relation_class('blog.post')\n\n# Create and manipulate data\nalice = Author(\n    first_name='Alice', \n    last_name='Johnson', \n    email='alice@example.com'\n).ho_insert()\n\n# Navigate relationships using the full foreign key names\nalice_posts = alice._ho_fkeys['_reverse_fkey_blog_tutorial_blog_post_author_id']()\nprint(f\"Alice has {alice_posts.ho_count()} posts\")\n</code></pre> <p>The Problem: Foreign key names are long and hard to remember. Business logic gets scattered across your application.</p>"},{"location":"tutorial/models-relations/#creating-custom-relation-classes","title":"Creating Custom Relation Classes","text":"<p>Custom relation classes let you add business logic, create readable foreign key aliases, and encapsulate domain-specific operations.</p>"},{"location":"tutorial/models-relations/#basic-custom-class-structure","title":"Basic Custom Class Structure","text":"<pre><code>from half_orm.model import Model\n\nblog = Model('blog_tutorial')\n\nclass Author(blog.get_relation_class('blog.author')):\n    \"\"\"Custom Author class with business methods\"\"\"\n\n    # Clean foreign key aliases\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments_rfk': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n    def get_full_name(self):\n        \"\"\"Return author's full name\"\"\"\n        return f\"{self.first_name.value} {self.last_name.value}\"\n\n    def get_post_count(self):\n        \"\"\"Get total number of posts by this author\"\"\"\n        return self.posts_rfk().ho_count()\n\n    def create_post(self, title, content):\n        \"\"\"Create a new post for this author\"\"\"\n        return self.posts_rfk(\n            title=title,\n            content=content\n        ).ho_insert()\n\n# Usage\nalice = Author(email='alice@example.com').ho_get()\nprint(alice.get_full_name())  # \u2192 \"Alice Johnson\"\nprint(f\"Posts: {alice.get_post_count()}\")  # \u2192 \"Posts: 3\"\n\n# Clean foreign key access\nfor post in alice.posts_rfk():\n    print(post['title'])\n</code></pre>"},{"location":"tutorial/models-relations/#the-fkeys-dictionary","title":"The Fkeys Dictionary","text":"<p>The <code>Fkeys</code> dictionary maps friendly names to actual foreign key constraint names:</p> <pre><code>class Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        # Alias: Actual constraint name\n        'posts_rfk': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments_rfk': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n# Now you can use clean names\nauthor = Author().ho_get()\nauthor.posts_rfk()     # Instead of author._ho_fkeys['_reverse_fkey_...']()\nauthor.comments_rfk()  # Much more readable!\n</code></pre> <p>Finding Foreign Key Names</p> <p>When you print a relation class (<code>print(Author())</code>), halfORM shows you the exact foreign key names to copy into your <code>Fkeys</code> dictionary.</p>"},{"location":"tutorial/models-relations/#adding-business-logic","title":"Adding Business Logic","text":"<p>Custom classes are perfect for encapsulating domain logic:</p> <pre><code>from datetime import datetime, timedelta\n\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments_rfk': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n    def is_active_writer(self, days=30):\n        \"\"\"Check if author has posted recently\"\"\"\n        cutoff = datetime.now() - timedelta(days=days)\n        recent_posts = self.posts_rfk(created_at=('&gt;', cutoff))\n        return recent_posts.ho_count() &gt; 0\n\n    def get_statistics(self):\n        \"\"\"Get comprehensive author statistics\"\"\"\n        all_posts = self.posts_rfk()\n        published_posts = all_posts(is_published=True)\n\n        return {\n            'total_posts': all_posts.ho_count(),\n            'published_posts': published_posts.ho_count(),\n            'draft_posts': all_posts(is_published=False).ho_count(),\n            'total_comments': self.comments_rfk().ho_count()\n        }\n\n    def publish_all_drafts(self):\n        \"\"\"Publish all draft posts for this author\"\"\"\n        drafts = self.posts_rfk(is_published=False)\n        return drafts.ho_update(\n            is_published=True,\n            published_at=datetime.now()\n        )\n\n# Usage\nalice = Author(email='alice@example.com').ho_get()\n\nif alice.is_active_writer():\n    stats = alice.get_statistics()\n    print(f\"Alice has {stats['published_posts']} published posts\")\n\n    # Publish remaining drafts\n    if stats['draft_posts'] &gt; 0:\n        alice.publish_all_drafts()\n        print(f\"Published {stats['draft_posts']} draft posts\")\n</code></pre>"},{"location":"tutorial/models-relations/#the-register-decorator","title":"The @register Decorator","text":"<p>The <code>@register</code> decorator is halfORM's powerful feature that replaces the auto-generated base class with your custom class in the model's class cache. This makes your custom classes the default whenever that relation is accessed, including through foreign key navigation.</p>"},{"location":"tutorial/models-relations/#without-register","title":"Without @register","text":"<pre><code># Regular custom class\nclass Author(blog.get_relation_class('blog.author')):\n    def get_full_name(self):\n        return f\"{self.first_name.value} {self.last_name.value}\"\n\nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {'author_fk': 'post_author_id_fkey'}\n\n# Problem: Foreign keys return generic classes\npost = Post(title='My Post').ho_get()\nauthor = post.author_fk().ho_get()  # Returns generic Author class\n# author.get_full_name()  # \u274c Method doesn't exist!\n</code></pre>"},{"location":"tutorial/models-relations/#with-register","title":"With @register","text":"<pre><code>from half_orm.model import register\n\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments_rfk': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n    def get_full_name(self):\n        return f\"{self.first_name.value} {self.last_name.value}\"\n\n    def create_post(self, title, content):\n        return self.posts_rfk(title=title, content=content).ho_insert()\n\n@register  \nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {'author_fk': 'post_author_id_fkey'}\n\n    def get_author_name(self):\n        return self.author_fk().ho_get().get_full_name()\n\n# Magic: Foreign keys now return YOUR custom classes!\npost = Post(title='My Post').ho_get()\nauthor = post.author_fk().ho_get()  # Returns YOUR Author class!\nprint(author.get_full_name())       # \u2705 Method available!\n\n# Works in both directions\nalice = Author(email='alice@example.com').ho_get()\nfor post in alice.posts_rfk():  # Each post is YOUR Post class\n    post_obj = Post(**post)\n    print(post_obj.get_author_name())  # Your custom methods work!\n</code></pre>"},{"location":"tutorial/models-relations/#how-register-works","title":"How @register Works","text":"<p>When you use <code>@register</code>, halfORM:</p> <ol> <li>Replaces the auto-generated class in the model's class cache with your custom class</li> <li>Returns your class whenever that relation is requested via <code>get_relation_class()</code></li> <li>Uses your class in foreign key navigation automatically</li> <li>Preserves your methods and custom <code>Fkeys</code> across all relation access</li> </ol> <pre><code># Before registration\nAuthor1 = blog.get_relation_class('blog.author')  # Auto-generated class\nprint(Author1.__name__)  # \u2192 'Table_BlogTutorialBlogAuthor'\n\n# Registration happens at import time\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    def get_full_name(self):\n        return f\"{self.first_name.value} {self.last_name.value}\"\n\n# After registration - same call now returns YOUR class\nAuthor2 = blog.get_relation_class('blog.author')  # Returns your Author class\nprint(Author2 is Author)  # \u2192 True (same class object)\n</code></pre>"},{"location":"tutorial/models-relations/#advanced-custom-class-patterns","title":"Advanced Custom Class Patterns","text":""},{"location":"tutorial/models-relations/#working-with-the-singleton-decorator","title":"Working with the @singleton Decorator","text":"<p>For methods that should work on single records, use the <code>@singleton</code> decorator:</p> <pre><code>from half_orm.model import register\nfrom half_orm.relation import singleton\n\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments_rfk': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n    @singleton\n    def create_post(self, title, content, published=False):\n        \"\"\"Create a new post for this author.\"\"\"\n        return self.posts_rfk(\n            title=title, \n            content=content, \n            is_published=published\n        ).ho_insert()\n\n    @singleton\n    def get_published_posts(self):\n        \"\"\"Get all published posts by this author.\"\"\"\n        return self.posts_rfk(is_published=True)\n\n    @singleton\n    def get_stats(self):\n        \"\"\"Get author statistics.\"\"\"\n        all_posts = self.posts_rfk()\n        published = all_posts(is_published=True)\n        return {\n            'total_posts': all_posts.ho_count(),\n            'published_posts': published.ho_count(),\n            'draft_posts': all_posts.ho_count() - published.ho_count()\n        }\n\n@register\nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {'author_fk': 'post_author_id_fkey'}\n\n    @singleton\n    def publish(self):\n        \"\"\"Publish this post.\"\"\"\n        from datetime import datetime\n        return self.ho_update(is_published=True, published_at=datetime.now())\n\n    @singleton\n    def unpublish(self):\n        \"\"\"Unpublish this post.\"\"\"\n        return self.ho_update(is_published=False)\n\n    @singleton\n    def get_author_name(self):\n        \"\"\"Get the name of this post's author.\"\"\"\n        return self.author_fk().get_full_name()  # No ho_get() needed with @singleton\n\n# Test the custom classes\nif __name__ == \"__main__\":\n    # Find Alice - no ho_get() needed with @singleton methods\n    alice = Author(name='Alice Johnson')\n\n    # Create a post using custom method\n    new_post = alice.create_post(\n        title=\"halfORM Custom Classes\", \n        content=\"This post was created using a custom method!\",\n        published=True\n    )\n    print(f\"\u2705 Created post: {new_post}\")\n\n    # Get author statistics\n    stats = alice.get_stats()\n    print(f\"\ud83d\udcca Alice's stats: {stats}\")\n\n    # Navigate from post to author using custom method\n    post = Post(title='Welcome to halfORM')\n    author_name = post.get_author_name()\n    print(f\"\ud83d\udcdd '{post.title.value}' was written by: {author_name}\")\n</code></pre> <p>The <code>@singleton</code> decorator</p> <p>Use <code>@singleton</code> when you need to ensure that the object you are operating on defines a singleton in your relation. This eliminates the need for <code>.ho_get()</code> calls in your business methods.</p>"},{"location":"tutorial/models-relations/#complex-business-logic-examples","title":"Complex Business Logic Examples","text":"<pre><code>from datetime import datetime, timedelta\nfrom half_orm.model import register\nfrom half_orm.relation import singleton\n\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        'posts_rfk': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments_rfk': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n    @singleton\n    def get_engagement_score(self, days_back=30):\n        \"\"\"Calculate author engagement score based on recent activity\"\"\"\n        cutoff = datetime.now() - timedelta(days=days_back)\n\n        # Recent posts and comments\n        recent_posts = self.posts_rfk(published_at=('&gt;', cutoff), is_published=True)\n        recent_comments = self.comments_rfk(created_at=('&gt;', cutoff))\n\n        # Calculate metrics\n        post_count = recent_posts.ho_count()\n        comment_count = recent_comments.ho_count()\n        total_views = sum(p['view_count'] for p in recent_posts.ho_select('view_count'))\n\n        # Engagement score formula\n        return (post_count * 10) + (comment_count * 2) + (total_views * 0.1)\n\n    @singleton\n    def get_popular_posts(self, min_views=50, limit=5):\n        \"\"\"Get this author's most popular posts\"\"\"\n        return (self.posts_rfk(is_published=True, view_count=('&gt;=', min_views))\n                .ho_order_by('view_count DESC')\n                .ho_limit(limit))\n\n    @singleton\n    def archive_old_drafts(self, days_old=90):\n        \"\"\"Archive drafts older than specified days\"\"\"\n        cutoff = datetime.now() - timedelta(days=days_old)\n        old_drafts = self.posts_rfk(\n            is_published=False,\n            created_at=('&lt;', cutoff)\n        )\n\n        archived_count = old_drafts.ho_update(\n            title=self.title + ' [ARCHIVED]',\n            content='[This draft was automatically archived]'\n        )\n\n        return archived_count\n\n@register  \nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {\n        'author_fk': 'post_author_id_fkey',\n        'comments_rfk': '_reverse_fkey_blog_tutorial_blog_comment_post_id'\n    }\n\n    @singleton\n    def get_engagement_metrics(self):\n        \"\"\"Get detailed engagement metrics for this post\"\"\"\n        comments = self.comments_rfk()\n        approved_comments = comments(is_approved=True)\n\n        # Calculate engagement rate\n        views = self.view_count.value or 0\n        comment_rate = (approved_comments.ho_count() / views * 100) if views &gt; 0 else 0\n\n        return {\n            'views': views,\n            'total_comments': comments.ho_count(),\n            'approved_comments': approved_comments.ho_count(),\n            'comment_rate': round(comment_rate, 2)\n        }\n\n    @singleton\n    def moderate_comments(self, approve_all=False):\n        \"\"\"Moderate comments on this post\"\"\"\n        pending_comments = self.comments_rfk(is_approved=False)\n\n        if approve_all:\n            return pending_comments.ho_update(is_approved=True)\n        else:\n            # Return comments for manual review\n            return list(pending_comments.ho_select('id', 'content', 'created_at'))\n\n    @singleton\n    def suggest_tags(self):\n        \"\"\"Suggest tags based on content analysis\"\"\"\n        content = self.content.value or \"\"\n        title = self.title.value or \"\"\n\n        # Simple keyword-based tag suggestions\n        suggestions = []\n        text = (content + \" \" + title).lower()\n\n        tag_keywords = {\n            'python': ['python', 'django', 'flask', 'pip'],\n            'postgresql': ['postgresql', 'postgres', 'sql', 'database'],\n            'performance': ['performance', 'optimization', 'speed', 'efficient'],\n            'tutorial': ['tutorial', 'guide', 'how-to', 'introduction']\n        }\n\n        for tag, keywords in tag_keywords.items():\n            if any(keyword in text for keyword in keywords):\n                suggestions.append(tag)\n\n        return suggestions\n\n# Usage examples\nif __name__ == \"__main__\":\n    # Author engagement analysis\n    alice = Author(email='alice@example.com')\n    engagement = alice.get_engagement_score(days_back=30)\n    print(f\"Alice's 30-day engagement score: {engagement}\")\n\n    # Popular posts\n    popular = alice.get_popular_posts(min_views=100, limit=3)\n    print(f\"Alice's top posts: {[p['title'] for p in popular.ho_select('title')]}\")\n\n    # Post analytics\n    post = Post(title='Getting Started with halfORM')\n    metrics = post.get_engagement_metrics()\n    print(f\"Post metrics: {metrics}\")\n\n    # Tag suggestions\n    suggestions = post.suggest_tags()\n    print(f\"Suggested tags: {suggestions}\")\n</code></pre>"},{"location":"tutorial/models-relations/#working-with-postgresql-inheritance","title":"Working with PostgreSQL Inheritance","text":"<p>halfORM handles PostgreSQL table inheritance naturally:</p> <pre><code># PostgreSQL: CREATE TABLE blog.event (...) INHERITS (blog.post);\n\n@register\nclass Post(blog.get_relation_class('blog.post')):\n    Fkeys = {'author_fk': 'post_author_id_fkey'}\n\n@register  \nclass Event(blog.get_relation_class('blog.event')):\n    # Inherits all Post functionality + event-specific fields\n    Fkeys = {'author_fk': 'event_author_id_fkey'}\n\n    @singleton\n    def is_upcoming(self):\n        from datetime import datetime\n        return self.begin.value &gt; datetime.now()\n\n    @singleton\n    def get_duration(self):\n        \"\"\"Calculate event duration in hours\"\"\"\n        if self.begin.value and self.end.value:\n            delta = self.end.value - self.begin.value\n            return delta.total_seconds() / 3600\n        return None\n\n# Events are also Posts\nevent = Event(title='Conference')\nprint(event.title.value)  # Inherited from Post\nprint(event.is_upcoming())  # Event-specific method\n</code></pre>"},{"location":"tutorial/models-relations/#best-practices-for-custom-classes","title":"Best Practices for Custom Classes","text":""},{"location":"tutorial/models-relations/#1-use-register-for-production-code","title":"1. Use @register for Production Code","text":"<pre><code># \u274c Don't: Manual class usage in production\nAuthor = blog.get_relation_class('blog.author')\nauthor = Author().ho_get()\n\n# \u2705 Do: Register your classes for automatic resolution\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    pass\n\n# Now all foreign key navigation uses your class automatically\n</code></pre>"},{"location":"tutorial/models-relations/#2-keep-business-logic-in-relation-classes","title":"2. Keep Business Logic in Relation Classes","text":"<pre><code>@register\nclass Order(blog.get_relation_class('shop.order')):\n    Fkeys = {'items_rfk': '_reverse_fkey_shop_order_item_order_id'}\n\n    @singleton\n    def calculate_total(self):\n        \"\"\"Business logic belongs in the relation class\"\"\"\n        total = 0\n        for item in self.items_rfk():\n            total += item['price'] * item['quantity']\n        return total\n\n    @singleton\n    def can_be_cancelled(self):\n        \"\"\"Domain rules encapsulated in the class\"\"\"\n        return self.status.value in ['pending', 'confirmed']\n\n    @singleton  \n    def apply_discount(self, percentage):\n        \"\"\"Complex business operations\"\"\"\n        if not self.can_be_cancelled():\n            raise ValueError(\"Cannot apply discount to processed order\")\n\n        current_total = self.calculate_total()\n        discount_amount = current_total * (percentage / 100)\n\n        return self.ho_update(\n            discount_amount=discount_amount,\n            total_amount=current_total - discount_amount\n        )\n</code></pre>"},{"location":"tutorial/models-relations/#3-use-descriptive-fkey-aliases","title":"3. Use Descriptive Fkey Aliases","text":"<pre><code>class Author(blog.get_relation_class('blog.author')):\n    Fkeys = {\n        # \u2705 Clear and descriptive\n        'posts': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments': '_reverse_fkey_blog_tutorial_blog_comment_author_id',\n        'published_posts': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n\n        # \u274c Avoid unclear names  \n        # 'rfk1': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        # 'data': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n    def get_published_posts(self):\n        \"\"\"Use the descriptive alias in business logic\"\"\"\n        return self.posts(is_published=True)\n</code></pre>"},{"location":"tutorial/models-relations/#4-organize-your-classes-effectively","title":"4. Organize Your Classes Effectively","text":"<pre><code># blog_models.py\nfrom half_orm.model import Model, register\nfrom half_orm.relation import singleton\nfrom datetime import datetime, timedelta\n\nblog = Model('blog_tutorial')\n\n@register\nclass Author(blog.get_relation_class('blog.author')):\n    \"\"\"Authors who write posts and comments\"\"\"\n    Fkeys = {\n        'posts': '_reverse_fkey_blog_tutorial_blog_post_author_id',\n        'comments': '_reverse_fkey_blog_tutorial_blog_comment_author_id'\n    }\n\n    @singleton\n    def get_stats(self):\n        return {\n            'posts': self.posts().ho_count(),\n            'published_posts': self.posts(is_published=True).ho_count()\n        }\n\n@register  \nclass Post(blog.get_relation_class('blog.post')):\n    \"\"\"Blog posts with content\"\"\"\n    Fkeys = {\n        'author': 'post_author_id_fkey',\n        'comments': '_reverse_fkey_blog_tutorial_blog_comment_post_id'\n    }\n\n    @singleton\n    def publish(self):\n        return self.ho_update(\n            is_published=True,\n            published_at=datetime.now()\n        )\n\n# Usage in other modules\nfrom blog_models import Author, Post\n\nalice = Author(email='alice@example.com')\nstats = alice.get_stats()\n</code></pre>"},{"location":"tutorial/models-relations/#5-handle-edge-cases-gracefully","title":"5. Handle Edge Cases Gracefully","text":"<pre><code>@register\nclass Author(blog.get_relation_class('blog.author')):\n    Fkeys = {'posts': '_reverse_fkey_blog_tutorial_blog_post_author_id'}\n\n    @singleton\n    def get_latest_post(self):\n        \"\"\"Get the most recent post, handling case of no posts\"\"\"\n        latest_posts = (self.posts(is_published=True)\n                       .ho_order_by('published_at DESC')\n                       .ho_limit(1))\n\n        if latest_posts.ho_is_empty():\n            return None\n\n        return latest_posts.ho_get()\n\n    @singleton\n    def safe_delete(self):\n        \"\"\"Delete author only if they have no published posts\"\"\"\n        published_posts = self.posts(is_published=True)\n\n        if not published_posts.ho_is_empty():\n            raise ValueError(\n                f\"Cannot delete author with {published_posts.ho_count()} published posts\"\n            )\n\n        # Delete drafts first\n        drafts = self.posts(is_published=False)\n        drafts.ho_delete()\n\n        # Then delete the author\n        return self.ho_delete()\n</code></pre>"},{"location":"tutorial/models-relations/#chapter-summary","title":"Chapter Summary","text":"<p>Congratulations! You've mastered the core concepts of halfORM's Models and Relations architecture. Let's recap what you've learned:</p>"},{"location":"tutorial/models-relations/#key-concepts-mastered","title":"\u2705 Key Concepts Mastered","text":"<p>Custom Relation Classes - Add business logic methods to your data classes - Use <code>Fkeys</code> dictionary for clean foreign key aliases - Encapsulate domain-specific operations</p> <p>The @register Decorator - Replaces auto-generated classes with your custom classes - Makes foreign key navigation return YOUR classes automatically - Enables clean, maintainable code architecture</p> <p>Advanced Patterns - <code>@singleton</code> decorator for single-record operations - Complex business logic encapsulation - PostgreSQL table inheritance support</p> <p>Best Practices - Organize classes in dedicated modules - Use descriptive Fkey aliases - Handle edge cases gracefully - Keep business logic in relation classes</p>"},{"location":"tutorial/models-relations/#skills-you-can-now-apply","title":"\ud83c\udfaf Skills You Can Now Apply","text":"<ul> <li>Create custom relation classes with sophisticated business methods</li> <li>Set up clean foreign key aliases using <code>Fkeys</code></li> <li>Use <code>@register</code> to make your classes the default across your application</li> <li>Organize your halfORM code for maintainability</li> <li>Work with PostgreSQL table inheritance</li> <li>Handle complex domain logic within your data classes</li> </ul>"},{"location":"tutorial/models-relations/#architecture-benefits-youve-gained","title":"\ud83d\udca1 Architecture Benefits You've Gained","text":"<ul> <li>Automatic class resolution through foreign key navigation</li> <li>Centralized business logic in appropriate data classes</li> <li>Clean, readable code with descriptive method names</li> <li>Type safety through custom class methods</li> <li>Maintainable codebase with clear separation of concerns</li> </ul>"},{"location":"tutorial/models-relations/#whats-next","title":"What's Next?","text":"<p>Now that you understand Models and Relations, you're ready to master relationship navigation. In the next chapter, Foreign Keys, you'll learn:</p> <ul> <li>Advanced navigation patterns - Chaining relationships efficiently</li> <li>Complex relationship handling - Many-to-many, self-references</li> <li>Query optimization - Reducing database calls across tables</li> <li>Relationship constraints - Using foreign keys for filtering</li> </ul> <p>The foreign key system is where halfORM really shines, letting you navigate complex database relationships with intuitive Python syntax.</p> <p>Additional Resources</p> <ul> <li>halfORM Fundamentals - Core concepts reference</li> <li>Model API Reference - Complete Model class documentation</li> <li>Relation API Reference - All Relation methods and properties  </li> <li>Examples - Real-world usage patterns</li> </ul> <p>Ready to master relationships? Continue to Chapter 4: Foreign Keys!</p>"},{"location":"tutorial/queries/","title":"Chapter 5: Queries","text":"<p>In previous chapters, you learned halfORM basics and how to create custom classes. Now we'll explore halfORM's powerful querying capabilities. You'll learn how to build complex queries, optimize performance, and handle advanced relationship navigation.</p> <p>Prerequisites</p> <p>This chapter assumes you understand halfORM's core concepts. If you haven't already, please read:</p> <ul> <li>halfORM Fundamentals - Essential concepts like object-as-filter, declarative programming, and set operations</li> <li>Tutorial Chapter 2: First Steps - Basic CRUD operations</li> <li>Tutorial Chapter 3: Models &amp; Relations - Custom classes and the <code>@register</code> decorator</li> </ul>"},{"location":"tutorial/queries/#chapter-objectives","title":"Chapter Objectives","text":"<p>By the end of this chapter, you'll master:</p> <ul> <li>Complex filtering patterns - Advanced operators and multi-condition queries  </li> <li>Query optimization - Minimizing database calls and improving performance</li> <li>Advanced ordering and limiting - Sophisticated result control</li> <li>Subquery patterns - Using halfORM queries within other queries</li> <li>Performance debugging - Using <code>ho_mogrify()</code> and query analysis</li> <li>Database-first solutions - When to use views and functions instead of complex Python code</li> </ul>"},{"location":"tutorial/queries/#advanced-filtering-patterns","title":"Advanced Filtering Patterns","text":"<p>Building on the fundamental filtering concepts, let's explore more sophisticated querying patterns.</p>"},{"location":"tutorial/queries/#complex-multi-condition-queries","title":"Complex Multi-Condition Queries","text":"<pre><code>from half_orm.model import Model\n\nblog = Model('blog_tutorial')\nAuthor = blog.get_relation_class('blog.author')\nPost = blog.get_relation_class('blog.post')\n\n# Multiple conditions (AND by default)\nexperienced_authors = Author(\n    is_active=True,\n    birth_date=('&lt;', '1990-01-01'),\n    email=('not ilike', '%test%')\n)\n\n# Date ranges using set operations\nthis_year_posts = (Post(published_at=('&gt;=', '2024-01-01')) &amp; \n                   Post(published_at=('&lt;=', '2024-12-31')) &amp;\n                   Post(is_published=True))\n\n# Pattern matching with exclusions\nquality_posts = Post(\n    title=('not ilike', '%draft%'),\n    content=('~', r'\\w{100,}'),  # At least 100 word characters\n    view_count=('&gt;', 10)\n)\n</code></pre>"},{"location":"tutorial/queries/#advanced-set-operations","title":"Advanced Set Operations","text":"<p>Remember that Relations are Python sets, so you can combine them with boolean logic:</p> <pre><code># Complex boolean combinations\nprolific_authors = Author().posts_rfk(ho_count=('&gt;', 5))  # Authors with 5+ posts\npopular_authors = Author().posts_rfk(view_count=('&gt;', 100))  # Authors of popular posts\ngmail_authors = Author(email=('ilike', '%@gmail.com'))\n\n# Find popular Gmail authors who are prolific\nfeatured = (popular_authors &amp; gmail_authors &amp; prolific_authors)\n\n# Find authors who write but don't use Gmail\nnon_gmail_writers = prolific_authors - gmail_authors\n\n# Complex exclusions\nactive_non_test = (Author(is_active=True) - \n                  Author(email=('ilike', '%test%')) - \n                  Author(email=('ilike', '%example%')))\n</code></pre>"},{"location":"tutorial/queries/#regular-expression-patterns","title":"Regular Expression Patterns","text":"<p>PostgreSQL's powerful regex support is available through halfORM:</p> <pre><code># POSIX regular expressions\nvalid_slugs = Post(slug=('~', r'^[a-z0-9-]+$'))  # Valid URL slugs\nphone_authors = Author(bio=('~*', r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b'))  # Contains phone\n\n# Complex content analysis\nstructured_posts = Post(\n    content=('~', r'##\\s+.+'),  # Contains markdown headers\n    content=('~', r'```\\w+'),   # Contains code blocks\n    is_published=True\n)\n</code></pre>"},{"location":"tutorial/queries/#working-with-null-values","title":"Working with NULL Values","text":"<pre><code>from half_orm.null import NULL\n\n# Authors with complete profiles\ncomplete_authors = Author(\n    bio=('is not', NULL),\n    birth_date=('is not', NULL)\n)\n\n# Posts without excerpts\nposts_needing_excerpts = Post(\n    excerpt=('is', NULL),\n    is_published=True\n)\n\n# NULL comparisons\nrecent_or_null = Post(\n    published_at=('&gt;', '2024-01-01') | Post(published_at=('is', NULL))\n)\n</code></pre>"},{"location":"tutorial/queries/#advanced-query-operations","title":"Advanced Query Operations","text":""},{"location":"tutorial/queries/#understanding-query-execution","title":"Understanding Query Execution","text":"<p>Before diving into advanced patterns, it's crucial to understand when SQL actually executes:</p> <pre><code># \u274c COMMON MISTAKE: Trying to modify after execution\ndef get_sorted_authors_wrong():\n    authors = Author().ho_select('name', 'email')  # SQL executes - returns generator\n    return authors.ho_order_by('name')  # \u274c ERROR! Cannot modify generator\n\n# \u2705 CORRECT: Build complete query first\ndef get_sorted_authors_right():\n    authors = Author().ho_order_by('name')  # Builds query - no SQL yet\n    return authors.ho_select('name', 'email')  # SQL executes with ORDER BY\n</code></pre> <p>Execution vs Building</p> <p>Query Builders: <code>ho_order_by()</code>, <code>ho_limit()</code>, <code>ho_offset()</code>, <code>ho_where()</code>, set operations (<code>&amp;</code>, <code>|</code>, <code>-</code>)</p> <p>Query Executors: <code>ho_select()</code>, <code>ho_count()</code>, <code>ho_get()</code>, <code>ho_is_empty()</code>, <code>ho_insert()</code>, <code>ho_update()</code>, <code>ho_delete()</code></p> <p>Once you call an executor, you get results - not a query object!</p> <p>Learn More</p> <p>For a complete explanation of halfORM's query execution model, see Method Categories in Fundamentals.</p>"},{"location":"tutorial/queries/#dynamic-ordering","title":"Dynamic Ordering","text":"<pre><code># Dynamic sort direction\ndef get_posts(sort_by='created_at', direction='DESC'):\n    sort_clause = f\"{sort_by} {direction}\"\n    return Post(is_published=True).ho_order_by(sort_clause)\n\n# Multiple column ordering with priorities\ntop_posts = (Post(is_published=True)\n            .ho_order_by('view_count DESC, published_at DESC, title ASC'))\n\n# Conditional ordering\ndef get_author_posts(author_id, sort_recent_first=True):\n    posts = Post(author_id=author_id, is_published=True)\n    if sort_recent_first:\n        return posts.ho_order_by('published_at DESC')\n    else:\n        return posts.ho_order_by('title ASC')\n</code></pre>"},{"location":"tutorial/queries/#pagination-patterns","title":"Pagination Patterns","text":"<pre><code>def get_paginated_posts(page=1, per_page=10):\n    \"\"\"Get paginated posts with metadata\"\"\"\n    offset = (page - 1) * per_page\n\n    posts_query = Post(is_published=True).ho_order_by('published_at DESC')\n\n    # Get total count for pagination metadata\n    total_posts = posts_query.ho_count()\n\n    # Get page data\n    posts = posts_query.ho_limit(per_page).ho_offset(offset)\n\n    return {\n        'posts': list(posts.ho_select('title', 'published_at', 'view_count')),\n        'page': page,\n        'per_page': per_page,\n        'total': total_posts,\n        'pages': (total_posts + per_page - 1) // per_page  # Ceiling division\n    }\n\n# Usage\npage_data = get_paginated_posts(page=2, per_page=5)\nprint(f\"Page {page_data['page']} of {page_data['pages']}\")\nfor post in page_data['posts']:\n    print(f\"- {post['title']}\")\n</code></pre>"},{"location":"tutorial/queries/#efficient-field-selection-strategies","title":"Efficient Field Selection Strategies","text":"<pre><code># Minimal field selection for lists\ndef get_post_index():\n    \"\"\"Get lightweight post list for index pages\"\"\"\n    return Post(is_published=True).ho_select(\n        'id', 'title', 'excerpt', 'published_at', 'view_count'\n    ).ho_order_by('published_at DESC')\n\n# Full selection for detail views\ndef get_post_detail(post_id):\n    \"\"\"Get complete post data for detail view\"\"\"\n    return Post(id=post_id).ho_get()  # All columns\n\n# Custom field combinations\ndef get_author_summary():\n    \"\"\"Get author data optimized for summary cards\"\"\"\n    return Author(is_active=True).ho_select(\n        'id', 'first_name', 'last_name', 'email'\n    )\n</code></pre>"},{"location":"tutorial/queries/#relationship-navigation-in-queries","title":"Relationship Navigation in Queries","text":""},{"location":"tutorial/queries/#chaining-relationships-with-filters","title":"Chaining Relationships with Filters","text":"<pre><code># Find comments by active authors on popular posts\npopular_post_comments = (Post(view_count=('&gt;', 100))\n                        .comments_rfk(is_approved=True)\n                        .author_fk(is_active=True))\n\n# Authors who comment on their own posts\nself_commenters = (Author(is_active=True)\n                  .posts_rfk(is_published=True)\n                  .comments_rfk()\n                  .author_fk())  # This should match the original author\n\n# Multi-level navigation with conditions\ntrending_author_latest_posts = (Post(view_count=('&gt;', 50))\n                               .author_fk(is_active=True)\n                               .posts_rfk(published_at=('&gt;', '2024-06-01')))\n</code></pre>"},{"location":"tutorial/queries/#relationship-existence-queries","title":"Relationship Existence Queries","text":"<pre><code># Authors who have posts\nauthors_with_posts = Author().posts_rfk()\n\n# Authors who have never posted\nauthors_without_posts = Author() - Author().posts_rfk()\n\n# Authors with approved comments\nauthors_with_approved_comments = Author().comments_rfk(is_approved=True)\n\n# Posts with no comments\nposts_without_comments = Post(is_published=True) - Post().comments_rfk()\n</code></pre>"},{"location":"tutorial/queries/#performance-optimization","title":"Performance Optimization","text":""},{"location":"tutorial/queries/#query-analysis-and-debugging","title":"Query Analysis and Debugging","text":"<p>Use <code>ho_mogrify()</code> to understand query performance:</p> <pre><code># Analyze complex queries\ncomplex_query = (Author(is_active=True)\n                .posts_rfk(is_published=True, view_count=('&gt;', 50))\n                .ho_order_by('published_at DESC')\n                .ho_limit(10))\n\n# See the generated SQL\nprint(\"=== Generated SQL ===\")\ncomplex_query.ho_mogrify()\n\n# Execute and time the query\nimport time\nstart = time.time()\nresults = list(complex_query.ho_select('title', 'view_count'))\nend = time.time()\nprint(f\"Query executed in {end - start:.3f} seconds\")\n</code></pre>"},{"location":"tutorial/queries/#minimizing-database-calls","title":"Minimizing Database Calls","text":"<pre><code># \u274c Inefficient - multiple queries\ndef get_author_stats_slow(author_id):\n    author = Author(id=author_id).ho_get()\n    posts = author.posts_rfk()\n    published = posts(is_published=True)\n\n    return {\n        'name': f\"{author.first_name.value} {author.last_name.value}\",\n        'total_posts': posts.ho_count(),          # Query 1\n        'published_posts': published.ho_count(),  # Query 2  \n        'draft_posts': posts(is_published=False).ho_count(),  # Query 3\n        'total_views': sum(p['view_count'] for p in published)  # Query 4 + N queries\n    }\n\n# \u2705 Efficient - fewer queries with strategic data loading\ndef get_author_stats_fast(author_id):\n    author = Author(id=author_id).ho_get()\n\n    # Get all posts at once with needed fields\n    all_posts = list(author.posts_rfk().ho_select('is_published', 'view_count'))\n\n    # Calculate stats in Python\n    published_posts = [p for p in all_posts if p['is_published']]\n\n    return {\n        'name': f\"{author.first_name.value} {author.last_name.value}\",\n        'total_posts': len(all_posts),\n        'published_posts': len(published_posts),\n        'draft_posts': len(all_posts) - len(published_posts),\n        'total_views': sum(p['view_count'] for p in published_posts)\n    }\n</code></pre>"},{"location":"tutorial/queries/#using-exists-for-existence-checks","title":"Using EXISTS for Existence Checks","text":"<pre><code># \u2705 Efficient existence checks\nif not Author(email='new@example.com').ho_is_empty():\n    print(\"Email already exists\")\n\n# \u2705 Efficient counting for small numbers\ndraft_count = Post(is_published=False).ho_count()\nif draft_count &gt; 0:\n    print(f\"You have {draft_count} drafts\")\n\n# \u274c Avoid loading data just to check existence\n# if len(list(Author(email='new@example.com'))) &gt; 0:  # Don't do this\n</code></pre>"},{"location":"tutorial/queries/#database-first-advanced-patterns","title":"Database-First Advanced Patterns","text":""},{"location":"tutorial/queries/#when-to-create-views","title":"When to Create Views","text":"<p>For complex queries that you use frequently, consider database views:</p> <pre><code>-- Create a materialized view for expensive analytics\nCREATE MATERIALIZED VIEW blog.author_analytics AS\nSELECT \n    a.id,\n    a.first_name || ' ' || a.last_name as full_name,\n    a.email,\n    COUNT(DISTINCT p.id) as total_posts,\n    COUNT(DISTINCT CASE WHEN p.is_published THEN p.id END) as published_posts,\n    COALESCE(SUM(p.view_count), 0) as total_views,\n    COALESCE(AVG(p.view_count), 0) as avg_views_per_post,\n    COUNT(DISTINCT c.id) as total_comments,\n    MAX(p.published_at) as last_post_date\nFROM blog.author a\nLEFT JOIN blog.post p ON a.id = p.author_id\nLEFT JOIN blog.comment c ON a.id = c.author_id\nGROUP BY a.id, a.first_name, a.last_name, a.email;\n\n-- Add indexes for performance\nCREATE INDEX idx_author_analytics_total_posts ON blog.author_analytics(total_posts);\nCREATE INDEX idx_author_analytics_total_views ON blog.author_analytics(total_views);\n</code></pre> <pre><code># Use the view in halfORM for fast analytics\nAuthorAnalytics = blog.get_relation_class('blog.author_analytics')\n\n# Fast queries on pre-calculated data\ntop_authors = (AuthorAnalytics(published_posts=('&gt;', 5))\n               .ho_order_by('total_views DESC')\n               .ho_limit(10))\n\nfor author in top_authors.ho_select('full_name', 'total_posts', 'total_views'):\n    print(f\"{author['full_name']}: {author['total_posts']} posts, {author['total_views']} views\")\n\n# Refresh the materialized view when needed\nblog.execute(\"REFRESH MATERIALIZED VIEW blog.author_analytics\")\n</code></pre>"},{"location":"tutorial/queries/#using-postgresql-functions-for-complex-logic","title":"Using PostgreSQL Functions for Complex Logic","text":"<pre><code>-- Create a function for complex search\nCREATE OR REPLACE FUNCTION blog.search_content(\n    search_term TEXT,\n    limit_results INTEGER DEFAULT 10\n) RETURNS TABLE(\n    post_id INTEGER,\n    title VARCHAR,\n    relevance_score NUMERIC,\n    author_name TEXT\n) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT \n        p.id,\n        p.title,\n        (\n            CASE WHEN p.title ILIKE '%' || search_term || '%' THEN 10 ELSE 0 END +\n            CASE WHEN p.excerpt ILIKE '%' || search_term || '%' THEN 5 ELSE 0 END +\n            CASE WHEN p.content ILIKE '%' || search_term || '%' THEN 1 ELSE 0 END\n        )::NUMERIC as relevance_score,\n        a.first_name || ' ' || a.last_name as author_name\n    FROM blog.post p\n    JOIN blog.author a ON p.author_id = a.id\n    WHERE p.is_published = TRUE\n    AND (\n        p.title ILIKE '%' || search_term || '%' OR\n        p.excerpt ILIKE '%' || search_term || '%' OR  \n        p.content ILIKE '%' || search_term || '%'\n    )\n    ORDER BY relevance_score DESC\n    LIMIT limit_results;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre> <pre><code># Use the function from halfORM\ndef search_posts(term, limit=10):\n    \"\"\"Search posts using PostgreSQL function\"\"\"\n    results = blog.execute_function('blog.search_content', term, limit)\n    return [{\n        'post_id': row['post_id'],\n        'title': row['title'],\n        'relevance_score': row['relevance_score'],\n        'author_name': row['author_name']\n    } for row in results]\n\n# Usage\nsearch_results = search_posts('postgresql')\nfor result in search_results:\n    print(f\"{result['title']} by {result['author_name']} (score: {result['relevance_score']})\")\n</code></pre>"},{"location":"tutorial/queries/#subquery-patterns","title":"Subquery Patterns","text":""},{"location":"tutorial/queries/#using-halform-queries-as-subqueries","title":"Using halfORM Queries as Subqueries","text":"<p>While halfORM excels at declarative queries, sometimes you need subquery-like patterns:</p> <pre><code># Find authors who have more posts than the average\ndef get_prolific_authors():\n    # First, calculate average posts per author\n    all_authors = Author()\n    total_authors = all_authors.ho_count()\n    total_posts = Post().ho_count()\n    avg_posts = total_posts / total_authors if total_authors &gt; 0 else 0\n\n    # Find authors above average\n    prolific = []\n    for author in all_authors:\n        post_count = author.posts_rfk().ho_count()\n        if post_count &gt; avg_posts:\n            prolific.append({\n                'author': author,\n                'post_count': post_count,\n                'above_average': post_count - avg_posts\n            })\n\n    return sorted(prolific, key=lambda x: x['post_count'], reverse=True)\n\n# Usage\nprolific_authors = get_prolific_authors()\nfor author_data in prolific_authors:\n    author = author_data['author']\n    name = f\"{author.first_name.value} {author.last_name.value}\"\n    print(f\"{name}: {author_data['post_count']} posts (+{author_data['above_average']:.1f} above avg)\")\n</code></pre>"},{"location":"tutorial/queries/#complex-aggregation-patterns","title":"Complex Aggregation Patterns","text":"<pre><code>def get_engagement_metrics(days_back=30):\n    \"\"\"Calculate engagement metrics for recent posts\"\"\"\n    from datetime import datetime, timedelta\n\n    cutoff_date = datetime.now() - timedelta(days=days_back)\n    recent_posts = Post(\n        is_published=True,\n        published_at=('&gt;', cutoff_date)\n    )\n\n    metrics = []\n    for post in recent_posts.ho_select('id', 'title', 'view_count', 'published_at'):\n        comments = Post(id=post['id']).comments_rfk()\n        approved_comments = comments(is_approved=True)\n\n        # Calculate engagement score\n        days_since_publish = (datetime.now() - post['published_at']).days + 1\n        views_per_day = post['view_count'] / days_since_publish\n        comments_per_day = approved_comments.ho_count() / days_since_publish\n\n        engagement_score = (views_per_day * 0.1) + (comments_per_day * 2)\n\n        metrics.append({\n            'post_id': post['id'],\n            'title': post['title'],\n            'views': post['view_count'],\n            'comments': approved_comments.ho_count(),\n            'days_live': days_since_publish,\n            'engagement_score': engagement_score\n        })\n\n    return sorted(metrics, key=lambda x: x['engagement_score'], reverse=True)\n\n# Get top engaging posts\ntop_engaging = get_engagement_metrics(days_back=7)[:5]\nfor post in top_engaging:\n    print(f\"{post['title']}: {post['engagement_score']:.2f} engagement score\")\n</code></pre>"},{"location":"tutorial/queries/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"tutorial/queries/#batch-operations-with-transactions","title":"Batch Operations with Transactions","text":"<pre><code>from half_orm.transaction import transaction\n\n@transaction\ndef bulk_update_posts(author_id, updates):\n    \"\"\"Bulk update multiple posts with transaction safety\"\"\"\n    author = Author(id=author_id)\n    posts = author.posts_rfk(is_published=False)  # Only drafts\n\n    updated_count = 0\n    for post in posts:\n        try:\n            # Apply updates\n            post.ho_update(**updates)\n            updated_count += 1\n        except Exception as e:\n            print(f\"Failed to update post {post.id.value}: {e}\")\n            raise  # This will rollback the entire transaction\n\n    return updated_count\n\n# Usage\ntry:\n    count = bulk_update_posts(author_id=1, updates={\n        'is_published': True,\n        'published_at': datetime.now()\n    })\n    print(f\"Successfully published {count} posts\")\nexcept Exception as e:\n    print(f\"Bulk update failed: {e}\")\n</code></pre>"},{"location":"tutorial/queries/#dynamic-query-building","title":"Dynamic Query Building","text":"<pre><code>def build_dynamic_post_query(filters):\n    \"\"\"Build a post query from dynamic filters\"\"\"\n    query = Post(is_published=True)\n\n    # Apply filters dynamically\n    if 'author_id' in filters:\n        query = query &amp; Post(author_id=filters['author_id'])\n\n    if 'min_views' in filters:\n        query = query &amp; Post(view_count=('&gt;=', filters['min_views']))\n\n    if 'published_after' in filters:\n        query = query &amp; Post(published_at=('&gt;=', filters['published_after']))\n\n    if 'published_before' in filters:\n        query = query &amp; Post(published_at=('&lt;=', filters['published_before']))\n\n    if 'title_contains' in filters:\n        query = query &amp; Post(title=('ilike', f\"%{filters['title_contains']}%\"))\n\n    if 'tags' in filters:\n        # Posts that have any of the specified tags\n        tag_query = Post()\n        for tag_id in filters['tags']:\n            tag_posts = Post().post_tags_rfk(tag_id=tag_id)\n            tag_query = tag_query | tag_posts\n        query = query &amp; tag_query\n\n    return query\n\n# Usage\nfilters = {\n    'min_views': 50,\n    'published_after': '2024-01-01',\n    'published_before': '2024-12-31',\n    'title_contains': 'postgresql',\n    'tags': [1, 3, 5]  # Python, PostgreSQL, Performance tags\n}\n\ndynamic_query = build_dynamic_post_query(filters)\nresults = dynamic_query.ho_order_by('view_count DESC').ho_limit(20)\n\nprint(f\"Found {results.ho_count()} posts matching criteria\")\nfor post in results.ho_select('title', 'view_count'):\n    print(f\"- {post['title']} ({post['view_count']} views)\")\n</code></pre>"},{"location":"tutorial/queries/#caching-query-results","title":"Caching Query Results","text":"<pre><code>from functools import lru_cache\nfrom datetime import datetime, timedelta\n\nclass PostAnalytics:\n    def __init__(self, blog_model):\n        self.blog = blog_model\n        self.Post = blog_model.get_relation_class('blog.post')\n        self.Author = blog_model.get_relation_class('blog.author')\n\n    @lru_cache(maxsize=128)\n    def get_top_posts_cached(self, days_back=7, limit=10):\n        \"\"\"Cached version of top posts query\"\"\"\n        cutoff = datetime.now() - timedelta(days=days_back)\n\n        query = (self.Post(is_published=True, published_at=('&gt;', cutoff))\n                .ho_order_by('view_count DESC')\n                .ho_limit(limit))\n\n        return tuple(query.ho_select('id', 'title', 'view_count'))\n\n    def get_top_posts(self, days_back=7, limit=10, use_cache=True):\n        \"\"\"Get top posts with optional caching\"\"\"\n        if use_cache:\n            return list(self.get_top_posts_cached(days_back, limit))\n        else:\n            cutoff = datetime.now() - timedelta(days=days_back)\n            query = (self.Post(is_published=True, published_at=('&gt;', cutoff))\n                    .ho_order_by('view_count DESC')\n                    .ho_limit(limit))\n            return list(query.ho_select('id', 'title', 'view_count'))\n\n    def clear_cache(self):\n        \"\"\"Clear cached results\"\"\"\n        self.get_top_posts_cached.cache_clear()\n\n# Usage\nanalytics = PostAnalytics(blog)\n\n# First call - hits database\ntop_posts = analytics.get_top_posts(days_back=7, limit=5)\nprint(\"Top posts (from database):\")\nfor post in top_posts:\n    print(f\"- {post['title']}: {post['view_count']} views\")\n\n# Second call - uses cache\ntop_posts_cached = analytics.get_top_posts(days_back=7, limit=5)\nprint(\"\\nTop posts (from cache):\")\nfor post in top_posts_cached:\n    print(f\"- {post['title']}: {post['view_count']} views\")\n\n# Clear cache when data changes\nanalytics.clear_cache()\n</code></pre>"},{"location":"tutorial/queries/#common-query-patterns","title":"Common Query Patterns","text":""},{"location":"tutorial/queries/#searching-and-filtering","title":"Searching and Filtering","text":"<pre><code>def search_and_filter_posts(search_term=None, author_id=None, tag_ids=None, \n                           min_views=None, published_after=None, published_before=None, limit=20):\n    \"\"\"Comprehensive search and filter function\"\"\"\n    query = Post(is_published=True)\n\n    # Text search\n    if search_term:\n        search_query = (Post(title=('ilike', f'%{search_term}%')) |\n                       Post(excerpt=('ilike', f'%{search_term}%')) |  \n                       Post(content=('ilike', f'%{search_term}%')))\n        query = query &amp; search_query\n\n    # Author filter\n    if author_id:\n        query = query &amp; Post(author_id=author_id)\n\n    # View count filter\n    if min_views:\n        query = query &amp; Post(view_count=('&gt;=', min_views))\n\n    # Date range filters\n    if published_after:\n        query = query &amp; Post(published_at=('&gt;=', published_after))\n\n    if published_before:\n        query = query &amp; Post(published_at=('&lt;=', published_before))\n\n    # Tag filter (posts must have ALL specified tags)\n    if tag_ids:\n        for tag_id in tag_ids:\n            tagged_posts = Post().post_tags_rfk(tag_id=tag_id)\n            query = query &amp; tagged_posts\n\n    return (query.ho_order_by('published_at DESC')\n                 .ho_limit(limit)\n                 .ho_select('id', 'title', 'excerpt', 'published_at', 'view_count'))\n\n# Usage examples\nrecent_python_posts = search_and_filter_posts(\n    search_term='python',\n    min_views=10,\n    published_after='2024-01-01'\n)\n\nauthor_popular_posts = search_and_filter_posts(\n    author_id=1,\n    min_views=50,\n    limit=10\n)\n</code></pre>"},{"location":"tutorial/queries/#reporting-queries","title":"Reporting Queries","text":"<pre><code>def generate_content_report(start_date, end_date):\n    \"\"\"Generate comprehensive content report\"\"\"\n\n    # Date range filter using set operations\n    date_filter = (Post(published_at=('&gt;=', start_date)) &amp; \n                   Post(published_at=('&lt;=', end_date)) &amp;\n                   Post(is_published=True))\n\n    # Basic stats\n    total_posts = date_filter.ho_count()\n    total_views = sum(p['view_count'] for p in date_filter.ho_select('view_count'))\n    total_comments = Post().comments_rfk().ho_count()\n\n    # Author performance\n    author_stats = {}\n    for author in Author(is_active=True):\n        author_posts = author.posts_rfk() &amp; date_filter\n        post_count = author_posts.ho_count()\n        if post_count &gt; 0:\n            author_views = sum(p['view_count'] for p in author_posts.ho_select('view_count'))\n            author_stats[f\"{author.first_name.value} {author.last_name.value}\"] = {\n                'posts': post_count,\n                'views': author_views,\n                'avg_views': author_views / post_count\n            }\n\n    # Top performing posts\n    top_posts = (date_filter.ho_order_by('view_count DESC')\n                           .ho_limit(5)\n                           .ho_select('title', 'view_count', 'published_at'))\n\n    return {\n        'period': {'start': start_date, 'end': end_date},\n        'totals': {\n            'posts': total_posts,\n            'views': total_views,\n            'comments': total_comments,\n            'avg_views_per_post': total_views / total_posts if total_posts &gt; 0 else 0\n        },\n        'authors': dict(sorted(author_stats.items(), \n                              key=lambda x: x[1]['views'], reverse=True)),\n        'top_posts': list(top_posts)\n    }\n\n# Generate monthly report\nfrom datetime import datetime, timedelta\n\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=30)\n\nreport = generate_content_report(start_date.strftime('%Y-%m-%d'), \n                                end_date.strftime('%Y-%m-%d'))\n\nprint(f\"Content Report: {report['period']['start']} to {report['period']['end']}\")\nprint(f\"Total Posts: {report['totals']['posts']}\")\nprint(f\"Total Views: {report['totals']['views']}\")\nprint(f\"Average Views per Post: {report['totals']['avg_views_per_post']:.1f}\")\n\nprint(\"\\nTop Authors:\")\nfor author, stats in list(report['authors'].items())[:3]:\n    print(f\"  {author}: {stats['posts']} posts, {stats['views']} views\")\n\nprint(\"\\nTop Posts:\")\nfor post in report['top_posts']:\n    print(f\"  {post['title']}: {post['view_count']} views\")\n</code></pre>"},{"location":"tutorial/queries/#performance-best-practices","title":"Performance Best Practices","text":""},{"location":"tutorial/queries/#1-use-appropriate-query-methods","title":"1. Use Appropriate Query Methods","text":"<pre><code># \u2705 For checking existence\nif not Author(email='test@example.com').ho_is_empty():\n    print(\"Email exists\")\n\n# \u2705 For counting\npost_count = Author(id=1).posts_rfk().ho_count()\n\n# \u2705 For getting a single record\nauthor = Author(id=1).ho_get()\n\n# \u2705 For iterating all records\nfor post in Post(is_published=True):\n    print(post['title'])\n\n# \u2705 For specific columns only\nfor author in Author().ho_select('first_name', 'last_name'):\n    print(f\"{author['first_name']} {author['last_name']}\")\n</code></pre>"},{"location":"tutorial/queries/#2-minimize-relationship-traversals","title":"2. Minimize Relationship Traversals","text":"<pre><code># \u274c Inefficient - multiple queries\ndef get_post_with_author_slow(post_id):\n    post = Post(id=post_id).ho_get()\n    author = post.author_fk().ho_get()\n    return {\n        'title': post.title.value,\n        'author_name': f\"{author.first_name.value} {author.last_name.value}\"\n    }\n\n# \u2705 More efficient - fewer queries\ndef get_post_with_author_fast(post_id):\n    post = Post(id=post_id).ho_get()\n    # Get just the author ID from the post, then fetch author name efficiently\n    author = Author(id=post.author_id.value).ho_select('first_name', 'last_name').ho_get()\n    return {\n        'title': post.title.value,\n        'author_name': f\"{author['first_name']} {author['last_name']}\"\n    }\n</code></pre>"},{"location":"tutorial/queries/#3-use-database-features","title":"3. Use Database Features","text":"<pre><code># \u2705 Let PostgreSQL handle complex operations\n# Instead of complex Python logic, create a database view or function\n\n# Example: Use a view for complex joins\nTopAuthors = blog.get_relation_class('blog.top_authors_view')  # Assuming view exists\ntop_performers = TopAuthors(month_year='2024-01').ho_limit(10)\n\n# \u2705 Use PostgreSQL aggregation functions when available\n# Instead of: sum(p['view_count'] for p in posts)\n# Use a database view or function that calculates this\n</code></pre>"},{"location":"tutorial/queries/#chapter-summary","title":"Chapter Summary","text":""},{"location":"tutorial/queries/#advanced-concepts-mastered","title":"\u2705 Advanced Concepts Mastered","text":"<p>Complex Filtering - Multi-condition queries with boolean logic - Regular expression patterns and NULL handling - Advanced set operations and relationship existence queries</p> <p>Query Optimization - Performance analysis with <code>ho_mogrify()</code> - Efficient field selection and pagination patterns - Minimizing database calls through strategic query design</p> <p>Advanced Patterns - Subquery-like patterns using halfORM - Dynamic query building and batch operations - Caching strategies for frequently-used queries</p> <p>Database-First Solutions - When to use PostgreSQL views for complex analytics - Leveraging PostgreSQL functions for business logic - Materialized views for expensive calculations</p>"},{"location":"tutorial/queries/#skills-you-can-now-apply","title":"\ud83c\udfaf Skills You Can Now Apply","text":"<ul> <li>Build sophisticated multi-table queries with optimal performance</li> <li>Implement complex search and filtering functionality</li> <li>Create efficient reporting and analytics queries</li> <li>Debug and optimize query performance</li> <li>Choose appropriate database-first solutions for complex requirements</li> </ul>"},{"location":"tutorial/queries/#key-performance-principles","title":"\ud83d\udca1 Key Performance Principles","text":"<ol> <li>Understand your queries - Use <code>ho_mogrify()</code> to see generated SQL</li> <li>Minimize database calls - Fetch what you need in fewer trips</li> <li>Use appropriate methods - <code>ho_count()</code> vs loading data, <code>ho_is_empty()</code> vs iteration</li> <li>Leverage PostgreSQL - Views and functions for complex logic</li> <li>Cache wisely - Store expensive query results when appropriate</li> </ol>"},{"location":"tutorial/queries/#whats-next","title":"What's Next?","text":"<p>You've mastered halfORM's querying capabilities! In the next chapter, Transactions, you'll learn:</p> <ul> <li>Transaction management - Ensuring data consistency</li> <li>Error handling - Rollback on failures</li> <li>Batch operations - Efficient bulk updates</li> <li>Isolation levels - Controlling concurrent access</li> </ul> <p>Transactions are crucial for maintaining data integrity in production applications.</p> <p>Additional Resources</p> <ul> <li>halfORM Fundamentals - Core concepts reference</li> <li>Relation API Reference - Complete query method documentation</li> <li>Examples - Real-world query patterns</li> <li>Performance Guide - Advanced optimization techniques</li> </ul> <p>Ready for data integrity? Continue to Chapter 6: Transactions!</p>"},{"location":"tutorial/transactions/","title":"Transactions","text":"<p>Chapter Status</p> <p>This chapter needs to be written with practical examples and exercises.</p>"},{"location":"tutorial/transactions/#objectives","title":"Objectives","text":"<p>[Learning objectives for this chapter]</p>"},{"location":"tutorial/transactions/#content","title":"Content","text":"<p>[Step-by-step tutorial content]</p>"},{"location":"tutorial/transactions/#next-steps","title":"Next Steps","text":"<p>[Link to next chapter]</p>"}]}